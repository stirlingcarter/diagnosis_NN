node {
  name: "global_step/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Fill"
  input: "global_step/Initializer/zeros/shape_as_tensor"
  input: "global_step/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\000\000\000\000\000H\217@\000\000\000\000\000\270\224@\000\000\000\000\000\314\222@\232\231\231\231\231!x@\000\000\000\000\000D\224@\232\231\231\231\231\321}@\000\000\000\000\000@\220@33333\017\202@fffff>\200@fffff\276}@fffff\356\210@\000\000\000\000\000h\210@\000\000\000\000\000\214\221@\232\231\231\231\231u\210@fffff\022\202@fffff\226\204@\000\000\000\000\000d\205@fffff\366\210@\000\000\000\000\000\260\223@fffff\262\201@\000\000\000\000\000@\200@fffff\036q@33333\003\206@\000\000\000\000\000\360\225@\315\314\314\314\314D\214@\232\231\231\231\231\205\214@fffff&\204@\000\000\000\000\000\030\221@33333\343\206@\315\314\314\314\314\330\215@\000\000\000\000\000\000\221@\232\231\231\231\231\211{@fffff\032\214@\000\000\000\000\000(\222@\232\231\231\231\2319\211@\000\000\000\000\000,\213@\000\000\000\000\000\310\203@fffff^\200@fffff\326\205@\232\231\231\231\231y\201@\000\000\000\000\000\230\201@\232\231\231\231\2311w@\000\000\000\000\000@\221@\232\231\231\231\231\t\201@\000\000\000\000\000\234\200@\000\000\000\000\000\320\220@\315\314\314\314\314<i@\315\314\314\314\314\264\200@\315\314\314\314\314\024|@\000\000\000\000\000\210\201@fffff\276z@fffff\336\201@\232\231\231\231\231Y{@\000\000\000\000\000$\220@fffffF\206@\000\000\000\000\000\220y@\000\000\000\000\000\000\222@33333\207\204@\232\231\231\231\231y\200@\000\000\000\000\000\020l@fffff~s@\232\231\231\231\231\271k@\232\231\231\231\231-\204@fffffNp@\000\000\000\000\0000\177@fffff\342\204@fffff\326p@\232\231\231\231\231\241x@\000\000\000\000\000Po@\000\000\000\000\000h\177@\000\000\000\000\000\250\221@\000\000\000\000\000\200n@33333\013\215@\315\314\314\314\314@\202@fffffn}@\232\231\231\231\231\215\211@\232\231\231\231\231y\201@\000\000\000\000\000p\217@\000\000\000\000\000t\223@\315\314\314\314\314\244\177@\000\000\000\000\000\030y@\000\000\000\000\000@\200@\000\000\000\000\000X\235@\000\000\000\000\000\260\221@\315\314\314\314\314\264{@\000\000\000\000\000\314\220@\232\231\231\231\231A\204@\000\000\000\000\000\320\220@\232\231\231\231\231!}@33333_\204@\232\231\231\231\231\265\204@\232\231\231\231\231\301\206@\232\231\231\231\231=\201@\315\314\314\314\314X\201@\315\314\314\314\314\014\206@\000\000\000\000\000\300\223@\232\231\231\231\2311|@\000\000\000\000\000hr@\232\231\231\231\231\311y@\000\000\000\000\000\024\204@\232\231\231\231\2315\202@\000\000\000\000\000\360a@33333\253|@\315\314\314\314\314\244r@\232\231\231\231\231\001u@\232\231\231\231\231\221\200@\000\000\000\000\000\310y@33333+}@\000\000\000\000\000\224\227@\000\000\000\000\000\310x@33333#r@fffff\006~@33333\257\203@33333\343t@\315\314\314\314\314\334l@\232\231\231\231\231i{@fffff\246n@\000\000\000\000\000T\205@\315\314\314\314\314t\210@\000\000\000\000\000\260\216@\315\314\314\314\3144y@\000\000\000\000\000\324\220@\000\000\000\000\000\204\233@\232\231\231\231\231\005\204@\000\000\000\000\000L\201@\232\231\231\231\231e\202@\315\314\314\314\314\344\201@\000\000\000\000\000\310\221@\000\000\000\000\000\024\205@\000\000\000\000\000\240\222@\315\314\314\314\314||@33333g\207@fffffN\211@\232\231\231\231\231\315\207@\000\000\000\000\000\314\220@\315\314\314\314\314\244\177@\232\231\231\231\231yz@\315\314\314\314\314\374x@\315\314\314\314\3140\205@\315\314\314\314\314\014x@\000\000\000\000\000\010r@\000\000\000\000\000h\211@\000\000\000\000\000\340x@\232\231\231\231\231\001\200@\315\314\314\314\3144v@\315\314\314\314\314\014{@\000\000\000\000\000\000{@\000\000\000\000\000\214\205@\315\314\314\314\314\000\204@\000\000\000\000\000H\202@33333;\200@\315\314\314\314\314|i@33333\303r@fffff\336w@33333\327\200@\315\314\314\314\314\304|@\232\231\231\231\231\035\216@\232\231\231\231\231\201\213@\232\231\231\231\231\t|@\315\314\314\314\314\354v@\315\314\314\314\314<z@\000\000\000\000\000\024\222@\000\000\000\000\000\370\222@\000\000\000\000\000\010}@\000\000\000\000\000X\232@\232\231\231\231\231\221\205@\232\231\231\231\231Yv@fffff\262\213@\315\314\314\314\314\304\216@33333o\205@\232\231\231\231\231\001}@33333\253\201@33333\007\207@33333Kw@\232\231\231\231\231\331u@ffffffl@fffff\346r@33333\007\212@33333s\200@\315\314\314\314\314\314\177@\000\000\000\000\000\224\241@\000\000\000\000\000|\224@\315\314\314\314\314\364\207@\000\000\000\000\000 y@\315\314\314\314\3144\206@\000\000\000\000\000\330s@\000\000\000\000\000D\220@\315\314\314\314\314Dz@fffff\316z@33333\373|@33333\017\203@fffff\266\177@\232\231\231\231\231\001r@fffff\326}@33333\373\204@33333#\200@33333g\202@\000\000\000\000\000\000\220@\000\000\000\000\000\360\221@\232\231\231\231\231\025\204@\000\000\000\000\000\320|@\315\314\314\314\314\274\215@\000\000\000\000\000T\232@fffff\256\202@fffff\036~@\315\314\314\314\314d\206@fffffvr@fffffB\214@33333\213\200@\000\000\000\000\000\254\206@\000\000\000\000\000(\224@\000\000\000\000\000\300z@\000\000\000\000\000\206\243@\000\000\000\000\000\240\215@\232\231\231\231\231\025\203@33333\027\202@33333\003{@33333\023t@\000\000\000\000\0008\223@\000\000\000\000\000\034\223@33333\307\201@fffff\212\201@\232\231\231\231\231\221s@fffff\312\207@33333\023\201@\232\231\231\231\231\t\204@\232\231\231\231\231\231t@\000\000\000\000\000d\205@fffff\006\177@33333s\177@\000\000\000\000\000\370\213@33333\273x@\315\314\314\314\314,x@\000\000\000\000\000\234\224@\232\231\231\231\231yq@33333\333\202@\000\000\000\000\000\030\232@\000\000\000\000\000h\224@33333\177\203@\315\314\314\314\314\304\214@fffff\372\201@\000\000\000\000\000\310}@fffffVx@\000\000\000\000\000p\202@\000\000\000\000\000\014\222@33333\033u@\315\314\314\314\314\354\200@\232\231\231\231\231\001\200@\000\000\000\000\000\260u@\315\314\314\314\314dy@\000\000\000\000\000P\225@fffffvy@\000\000\000\000\000\330\222@\232\231\231\231\231\001\215@\000\000\000\000\000D\222@33333\323\202@\000\000\000\000\000\334\222@fffffJ\206@\000\000\000\000\000,\210@33333G\207@\000\000\000\000\000 \224@\315\314\314\314\314(\215@fffff\236\215@\315\314\314\314\314\264\207@fffff\002\215@\000\000\000\000\000,\226@fffff\246u@\000\000\000\000\000\210\201@\232\231\231\231\231\001\200@fffff\216u@\315\314\314\314\314\304\203@\000\000\000\000\000@x@\000\000\000\000\000L\227@fffff\036r@333337\217@\232\231\231\231\2319{@\232\231\231\231\231\311x@\000\000\000\000\0008\221@fffff\342\201@33333[\202@\000\000\000\000\000\310\221@\315\314\314\314\314\264z@\000\000\000\000\000\344\221@\315\314\314\314\314(\211@\315\314\314\314\314$\200@\000\000\000\000\000\220~@\000\000\000\000\000\220{@33333\037\200@\232\231\231\231\231\241x@\000\000\000\000\000\300x@\000\000\000\000\000X\204@fffffz\205@\232\231\231\231\231\r\200@33333\013{@\232\231\231\231\231\301~@\232\231\231\231\2315\202@33333\273v@\232\231\231\231\231\361z@\315\314\314\314\314\310\203@33333\343t@\000\000\000\000\000\004\223@\315\314\314\314\314t}@\000\000\000\000\000|\223@\315\314\314\314\314\344t@\232\231\231\231\2311y@33333\023z@fffff\312\200@\232\231\231\231\231\311n@\232\231\231\231\231\261\201@\315\314\314\314\314\224\200@33333+z@33333\307\204@\232\231\231\231\231\201\177@\232\231\231\231\231\221y@fffff\246k@\232\231\231\231\231\031~@fffff\326|@\000\000\000\000\000\014\220@\000\000\000\000\000\220n@\315\314\314\314\314\324}@33333Ct@\000\000\000\000\000\350\223@\315\314\314\314\314\214\177@\000\000\000\000\000\300\223@fffff\236|@fffff\236~@\000\000\000\000\000D\203@\000\000\000\000\000\340{@\232\231\231\231\231m\211@fffff\326\211@\232\231\231\231\231\311\210@\000\000\000\000\000\020\200@\315\314\314\314\3144x@\000\000\000\000\000`x@fffff\006}@\315\314\314\314\314\264\214@fffff\022\200@\000\000\000\000\000\020\221@\315\314\314\314\314ls@\000\000\000\000\000L\233@\232\231\231\231\231\t\204@\000\000\000\000\000\210q@fffff^w@\000\000\000\000\000\250\222@\315\314\314\314\314Dz@\232\231\231\231\231\031t@\315\314\314\314\314\324{@\232\231\231\231\231\345\204@33333+y@33333\253z@\000\000\000\000\000Pz@\315\314\314\314\314\264\207@\000\000\000\000\000h\237@\315\314\314\314\314d\206@\232\231\231\231\231\tx@\315\314\314\314\314\\~@\000\000\000\000\000\000\200@\232\231\231\231\231\215\202@\000\000\000\000\000 n@\232\231\231\231\231iq@fffff\276~@\315\314\314\314\314\020\201@\232\231\231\231\231\t\177@\315\314\314\314\3140\212@33333C\201@\000\000\000\000\0004\224@\000\000\000\000\000H\223@fffff\246|@\000\000\000\000\000(\230@\000\000\000\000\000(\227@33333C\212@fffff>\206@\000\000\000\000\000\250\225@\000\000\000\000\000\334\224@\315\314\314\314\314\030\202@\000\000\000\000\000\244\210@\315\314\314\314\314$u@\315\314\314\314\314\220\201@\315\314\314\314\314$\202@\232\231\231\231\231\231v@\315\314\314\314\314$x@33333Kw@\315\314\314\314\314\374{@fffff\356|@fffff\356\200@\232\231\231\231\231\305\204@\000\000\000\000\000\340|@\315\314\314\314\314\244\202@\000\000\000\000\000\200x@\000\000\000\000\000X\222@\232\231\231\231\231\031t@\232\231\231\231\231Im@\232\231\231\231\231E\207@\000\000\000\000\000\374\225@33333\343{@\315\314\314\314\314\010\203@\315\314\314\314\314p\201@\315\314\314\314\314\304\177@33333\243w@fffff\376z@\000\000\000\000\000\020\217@33333\253{@\232\231\231\231\231i\200@\232\231\231\231\231\271\177@\232\231\231\231\231Q}@\000\000\000\000\000 w@\000\000\000\000\000\000\211@\000\000\000\000\000\024\200@\232\231\231\231\231\375\216@\232\231\231\231\231!}@\315\314\314\314\314\374x@33333Sw@\315\314\314\314\314\314p@\232\231\231\231\231\255\205@\000\000\000\000\000|\206@\315\314\314\314\314\034{@33333\363p@\315\314\314\314\314\030\211@\000\000\000\000\000\360~@\315\314\314\314\314\304w@33333\233y@\315\314\314\314\314\200\204@33333\203y@fffff\372\201@33333\033r@\315\314\314\314\3144s@\232\231\231\231\231\331t@fffff~v@\232\231\231\231\231\321w@\315\314\314\314\314T\177@\000\000\000\000\000h\205@\315\314\314\314\314<}@\000\000\000\000\000\210\223@\000\000\000\000\000X\221@\232\231\231\231\231\r\205@\000\000\000\000\000\274\202@33333\323\177@\232\231\231\231\231\031\203@\315\314\314\314\314\204\202@\000\000\000\000\000\364\202@\000\000\000\000\0008w@fffff\006\215@33333O\202@fffffNu@\000\000\000\000\000\360\216@\315\314\314\314\314\224{@\315\314\314\314\314\254\216@fffff\026\205@\232\231\231\231\231\235\204@"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\315\314\314\314\314,c@\205\353Q\270\036\205R@R\270\036\205\353\201W@{\024\256G\341:;@\\\217\302\365(\234W@q=\n\327\2430;@\024\256G\341z\364J@{\024\256G\341zI@R\270\036\205\353Q8@q=\n\327\243\3607@\341z\024\256GAD@\024\256G\341z\024K@\315\314\314\314\314\014]@\n\327\243p=JB@\366(\\\217\30253@fffffF@@33333\263F@\327\243p=\n\027K@\232\231\231\231\231\031\\@\217\302\365(\\\2177@\327\243p=\nW-@ffffff/@\024\256G\341ztF@\217\302\365(\\\177W@fffff\246Y@\232\231\231\231\231\331[@\315\314\314\314\314\0145@\303\365(\\\217bW@\000\000\000\000\000\300E@\315\314\314\314\314\214N@\000\000\000\000\000@Z@\000\000\000\000\000\200D@R\270\036\205\353\361P@{\024\256G\341\nQ@\244p=\n\327\203A@\270\036\205\353Q\230F@)\\\217\302\365\3508@R\270\036\205\353Q,@\000\000\000\000\000\200Z@\205\353Q\270\036\2052@H\341z\024\256\2074@\270\036\205\353Q\3700@\232\231\231\231\2319Z@\024\256G\341zT?@{\024\256G\341\372,@\244p=\n\327\343Q@)\\\217\302\365h @\000\000\000\000\000@8@\037\205\353Q\270\3363@3333334@\270\036\205\353Qx<@\232\231\231\231\231\031-@\270\036\205\353Qx1@\244p=\n\327\263X@)\\\217\302\365\350=@\270\036\205\353Qx7@\000\000\000\000\000\240Y@\354Q\270\036\205\013D@{\024\256G\341z@@\277\237\032/\335\244 @\217\302\365(\\OA@\244p=\n\327c2@\244p=\n\327cN@\205\353Q\270\036\2057@{\024\256G\341:B@\037\205\353Q\270\236A@ffffff,@fffff&2@\354Q\270\036\205\2531@\024\256G\341zT2@33333\003X@q=\n\327\243p9@\256G\341z\024^Q@\232\231\231\231\231Y7@\256G\341z\024\2563@\000\000\000\000\000\320S@33333S@@\232\231\231\231\231\331`@\232\231\231\231\231\031]@\232\231\231\231\231Y4@\037\205\353Q\270\2368@\354Q\270\036\205\353)@\000\000\000\000\000\000^@fffff\306P@)\\\217\302\365(0@fffff&T@\217\302\365(\\oC@33333\323L@33333\3634@\341z\024\256GaE@\341z\024\256G\341@@q=\n\327\243p=@\315\314\314\314\314,B@\270\036\205\353Q89@R\270\036\205\353\221G@H\341z\024\256\367U@q=\n\327\243p8@\315\314\314\314\314\0144@\000\000\000\000\000\200/@\232\231\231\231\231\331:@R\270\036\205\353\221E@\321\"\333\371~\252#@\\\217\302\365(\\-@\n\327\243p=\212\'@\341z\024\256G!7@\024\256G\341zTA@\037\205\353Q\270\2364@Nb\020X9t\"@\000\000\000\000\000@e@)\\\217\302\365h0@\037\205\353Q\270\3366@{\024\256G\341z4@\000\000\000\000\000@=@)\\\217\302\365\3503@<\337O\215\227\356!@\n\327\243p=\3128@q=\n\327\243\3600@\327\243p=\n\227D@q=\n\327\243PM@\205\353Q\270\036\005K@\000\000\000\000\000\000%@\256G\341z\024\236V@\000\000\000\000\000 m@q=\n\327\24308@R\270\036\205\353Q-@)\\\217\302\365\3501@\024\256G\341z\3243@\037\205\353Q\270NT@\354Q\270\036\205\353C@\n\327\243p=\252O@{\024\256G\341z.@H\341z\024\256\'H@\327\243p=\n\327E@q=\n\327\243\360;@fffff\026Q@\037\205\353Q\270\3363@\217\302\365(\\/A@\327\243p=\nW)@\232\231\231\231\231yY@\024\256G\341zT:@\205\353Q\270\036\205(@\205\353Q\270\036\205R@\341z\024\256Ga5@\244p=\n\327\2430@=\n\327\243p\2751@H\341z\024\256\0079@\270\036\205\353Q\2708@\327\243p=\n\267C@3333335@\270\036\205\353Qx5@\244p=\n\327cA@\354Q\270\036\205k$@\315\314\314\314\314\354H@\366(\\\217\302\365.@\n\327\243p=\3126@\303\365(\\\217\2020@\n\327\243p=zW@\256G\341z\024NG@\000\000\000\000\000\200*@\n\327\243p=\2122@\354Q\270\036\205+C@33333\323]@\024\256G\341zDX@\315\314\314\314\314\2145@fffffvX@\244p=\n\327\2430@\366(\\\217\302\365&@\366(\\\217\302\325P@33333\223^@H\341z\024\256G8@\256G\341z\024n1@33333\263E@R\270\036\205\353QF@\024\256G\341z\0243@{\024\256G\341\3725@\270\036\205\353Q\270&@{\024\256G\341z;@\327\243p=\n\227?@\256G\341z\024\256,@\n\327\243p=\3125@fffff\026`@=\n\327\243p]T@=\n\327\243p}D@\205\353Q\270\036\3056@H\341z\024\256\2073@\256G\341z\024n:@\354Q\270\036\205\353<@\\\217\302\365(\3341@q=\n\327\243\360,@R\270\036\205\353Q2@\270\036\205\353Q\270?@33333\323J@q=\n\327\243\2605@\270\036\205\353Q8A@3333339@\000\000\000\000\000\200/@\232\231\231\231\231\331H@\327\243p=\n\027S@\\\217\302\365(\034K@\354Q\270\036\205k3@=\n\327\243p=;@=\n\327\243p]D@\n\327\243p=\312T@\\\217\302\365(\\J@\n\327\243p=J>@q=\n\327\243p:@)\\\217\302\365\250(@=\n\327\243p\035Q@\256G\341z\024..@\000\000\000\000\000\0004@\315\314\314\314\314\354[@\037\205\353Q\270\0361@\315\314\314\314\314l\200@\244p=\n\327CM@\000\000\000\000\000\000?@q=\n\327\243\2606@\366(\\\217\302u5@\n\327\243p=\3126@\232\231\231\231\231\031_@\232\231\231\231\231y[@ffffff1@H\341z\024\256\0075@\232\231\231\231\231\031.@\270\036\205\353Q\030@@\256G\341z\024\2568@\205\353Q\270\036%H@\270\036\205\353Q\270\'@\341z\024\256G\3413@\303\365(\\\217\2022@\341z\024\256G!9@{\024\256G\341\372?@\366(\\\217\3025!@\354Q\270\036\205\353.@q=\n\327\243\200Q@H\341z\024\256G)@R\270\036\205\353\0216@\232\231\231\231\231yc@\000\000\000\000\000\340T@\366(\\\217\302\365=@\000\000\000\000\000\200H@q=\n\327\2430;@P\215\227n\022\003\"@\244p=\n\327c0@\327\243p=\n\367C@\024\256G\341z4N@\270\036\205\353Q87@\037\205\353Q\270\036+@\232\231\231\231\231Y0@\244p=\n\327\2430@\037\205\353Q\270\2362@\315\314\314\314\314<a@=\n\327\243p\375:@\244p=\n\3273W@q=\n\327\243\320@@\000\000\000\000\000\300Q@\037\205\353Q\270\336A@\232\231\231\231\231\231Z@{\024\256G\341\272M@\000\000\000\000\000Pa@\205\353Q\270\036\0057@\354Q\270\036\205+J@\024\256G\341z4F@\\\217\302\365(\274V@\256G\341z\024.6@\366(\\\217\302\265F@fffff\366h@\232\231\231\231\231\031;@\303\365(\\\217\302:@=\n\327\243p=2@=\n\327\243p\2754@\n\327\243p=\212%@\327\243p=\nW*@\232\231\231\231\231\231c@\244p=\n\327c0@H\341z\024\256\347F@\354Q\270\036\205kH@\327\243p=\n\0271@\037\205\353Q\270^B@\270\036\205\353Q86@)\\\217\302\365h3@\232\231\231\231\231iQ@\n\327\243p=\352B@\024\256G\341z\224J@\327\243p=\n\027<@\n\327\243p=J7@33333s6@)\\\217\302\365\3505@\\\217\302\365(\\)@\327\243p=\nWA@=\n\327\243p}1@\327\243p=\nGS@\037\205\353Q\270\3368@\354Q\270\036\205\2531@\303\365(\\\217\302+@\303\365(\\\217\302*@=\n\327\243p\2751@\256G\341z\024.&@\256G\341z\024\216H@\217\302\365(\\\2174@\217\302\365(\\\2174@\000\000\000\000\000\240`@R\270\036\205\353Q<@\232\231\231\231\231Y`@)\\\217\302\365($@\256G\341z\024\3566@\366(\\\217\30252@\000\000\000\000\000\000/@\207\026\331\316\367\223#@\244p=\n\327c4@\341z\024\256G\201@@\217\302\365(\\\217&@fffff\346<@\256G\341z\024.9@\306K7\211A\340\"@\217\302\365(\\\3171@\341z\024\256Ga)@\244p=\n\327\243/@33333sH@3333338@)\\\217\302\365(?@\256G\341z\024\2566@fffff\266R@R\270\036\205\353\2210@\244p=\n\327CQ@\303\365(\\\217\0023@\\\217\302\365(\2341@\354Q\270\036\205\3537@\270\036\205\353Q\3700@\024\256G\341z4F@\\\217\302\365(\334L@\303\365(\\\217\242@@fffff\2464@\037\205\353Q\270\2363@\244p=\n\327#.@{\024\256G\341z*@{\024\256G\341\312U@R\270\036\205\353\321,@\000\000\000\000\000\020V@\232\231\231\231\231\3310@33333\203d@R\270\036\205\353\021@@\244p=\n\327#(@\232\231\231\231\231\231%@\n\327\243p=\352P@H\341z\024\256\2078@\024\256G\341zT3@\205\353Q\270\036\0052@\217\302\365(\\\017=@\000\000\000\000\000\200(@fffff\246:@H\341z\024\256\007:@\\\217\302\365(\234I@33333#c@\217\302\365(\\\257O@\327\243p=\n\327<@=\n\327\243p};@R\270\036\205\353\2215@=\n\327\243p\2754@\256G\341z\024.>@{\024\256G\341z>@\315\314\314\314\314L<@{\024\256G\341\3724@\303\365(\\\217B1@\n\327\243p=\312@@q=\n\327\243p*@\\\217\302\365(\034R@fffff\346Y@R\270\036\205\353\2212@33333\003l@fffffF`@\000\000\000\000\000\300F@\270\036\205\353Q\2701@H\341z\024\256\207C@\341z\024\256GAS@\000\000\000\000\000\000,@R\270\036\205\353\321-@\266\363\375\324x\351\034@R\270\036\205\353\321-@33333\263&@{\024\256G\341\372+@\n\327\243p=\n0@\\\217\302\365(\\\'@\014\002+\207\026\031#@3333333@\205\353Q\270\036\205.@\341z\024\256G\201@@\366(\\\217\302\3653@\037\205\353Q\270\0367@\270\036\205\353Q\3706@fffff\206Q@\303\365(\\\217\302\'@\232\231\231\231\231\331<@\n\327\243p=\272P@\217\302\365(\\?T@\270\036\205\353Q86@\327\243p=\nW)@\n\327\243p=J3@R\270\036\205\353\221>@\366(\\\217\302\365)@\217\302\365(\\\0179@\341z\024\256G\301D@33333\3632@\366(\\\217\30254@\270\036\205\353Q\270&@fffff&>@H\341z\024\256\3079@\024\256G\341z\3245@\037\205\353Q\270\236D@H\341z\024\256\347H@\n\327\243p=\3129@R\270\036\205\353Q+@\024\256G\341z\024+@i\221\355|?5\033@\303\365(\\\217\202<@q=\n\327\243\260F@H\341z\024\256\2073@\354Q\270\036\205+9@\000\000\000\000\000\020f@\037\205\353Q\270^1@=\n\327\243p\3752@\315\314\314\314\314L4@\232\231\231\231\231\271H@H\341z\024\256\307/@\\\217\302\365(\\3@\303\365(\\\217\302E@333333\'@\205\353Q\270\036\3054@3333334@\234\304 \260rh#@=\n\327\243p=7@q=\n\327\24308@\\\217\302\365(\334.@\037\205\353Q\270>J@\232\231\231\231\231\371Y@\354Q\270\036\205\3537@\232\231\231\231\231\3312@\000\000\000\000\000\200:@\037\205\353Q\270^@@\341z\024\256G\241=@\000\000\000\000\000@3@fffff&2@q=\n\327\2430M@\327\243p=\nW=@=\n\327\243p=*@\303\365(\\\217\342A@\244p=\n\327c3@\232\231\231\231\231\371E@\000\000\000\000\000\3003@\n\327\243p=\n7@"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\000\000\000\000\000\214\237@\000\000\000\000\000\220\236@\000\000\000\000\000\264\232@\232\231\231\231\231\275\201@\000\000\000\000\000\234\230@\315\314\314\314\314,\207@\000\000\000\000\000\030\231@\000\000\000\000\000\010\214@fffff\032\207@33333;\206@\000\000\000\000\000\370\221@\000\000\000\000\000L\224@\000\000\000\000\000\320\224@\000\000\000\000\000d\213@\232\231\231\231\231\315\205@\232\231\231\231\231y\215@\000\000\000\000\000\310\221@\000\000\000\000\000\214\224@\000\000\000\000\000\274\242@\232\231\231\231\2319\206@\000\000\000\000\000\264\203@fffff\256s@33333\247\216@\000\000\000\000\000n\244@\000\000\000\000\000N\241@\000\000\000\000\000\324\226@33333\007\214@\000\000\000\000\000\354\225@\000\000\000\000\000\324\223@\000\000\000\000\000,\223@\000\000\000\000\000\030\232@\232\231\231\231\231\305\213@\000\000\000\000\000\000\225@\000\000\000\000\000T\234@\000\000\000\000\000\264\223@\000\000\000\000\0004\223@\315\314\314\314\314\374\210@33333\017\201@fffff\326\205@33333#\207@33333\237\210@\000\000\000\000\000\020\200@\000\000\000\000\000\314\231@\232\231\231\231\231Y\214@\232\231\231\231\231%\207@\000\000\000\000\000|\230@fffffFn@33333\273\207@\315\314\314\314\3144\202@fffff\326\205@\000\000\000\000\000$\200@\232\231\231\231\231\205\204@\232\231\231\231\231y\200@\000\000\000\000\000\244\224@\000\000\000\000\000\030\220@33333\243\177@\000\000\000\000\000\302\240@\000\000\000\000\000\314\216@\315\314\314\314\314\200\203@fffff.q@\232\231\231\231\231\tw@fffff\036q@\000\000\000\000\000\374\215@\232\231\231\231\231as@fffff\302\213@\315\314\314\314\314\350\214@33333\253t@33333+}@33333Kt@33333W\201@\000\000\000\000\000(\235@fffff\306q@\000\000\000\000\000D\232@33333c\211@\315\314\314\314\314\030\203@\000\000\000\000\000\034\223@\000\000\000\000\000\354\202@\000\000\000\000\000(\231@\000\000\000\000\000\\\231@\315\314\314\314\314p\203@\315\314\314\314\314h\200@333337\203@\000\000\000\000\000\004\244@\000\000\000\000\000H\224@33333\277\201@\000\000\000\000\000\014\231@33333G\211@\000\000\000\000\000\\\231@\232\231\231\231\231\365\201@\315\314\314\314\314\034\211@\232\231\231\231\231\035\211@33333\367\211@\315\314\314\314\314\364\211@33333\333\205@\000\000\000\000\000\004\220@\000\000\000\000\000X\233@33333\363~@\232\231\231\231\231\341v@\000\000\000\000\000\004\200@33333\323\211@\000\000\000\000\000T\214@fffff&g@fffff\036\201@33333\223v@\315\314\314\314\314,y@\232\231\231\231\231\331\211@\232\231\231\231\231M\200@\315\314\314\314\314\000\201@\000\000\000\000\000p\242@\315\314\314\314\3140\200@\000\000\000\000\000\360v@33333{\200@\000\000\000\000\000(\206@ffffffw@fffff\306q@\000\000\000\000\0008\202@\000\000\000\000\000\340p@\000\000\000\000\000\034\221@\000\000\000\000\000\340\223@\000\000\000\000\000\264\223@\000\000\000\000\000\350\177@\000\000\000\000\0004\230@\000\000\000\000\0002\240@\000\000\000\000\000L\207@\315\314\314\314\314\300\203@33333\257\206@\232\231\231\231\231\205\212@\000\000\000\000\000\010\230@\315\314\314\314\314\324\207@\000\000\000\000\000\324\230@\232\231\231\231\231\t\201@\000\000\000\000\000\020\222@\000\000\000\000\000\\\222@fffff\326\214@\000\000\000\000\000\330\230@\315\314\314\314\314l\204@\232\231\231\231\231\025\201@\000\000\000\000\000\340|@33333[\216@\000\000\000\000\000 {@fffffnu@\000\000\000\000\000D\223@\000\000\000\000\000p\177@fffff\036\204@33333\223{@\232\231\231\231\231\331\177@\232\231\231\231\231}\202@\232\231\231\231\231M\211@33333\367\207@33333\257\206@\232\231\231\231\231E\203@\232\231\231\231\2319o@\000\000\000\000\000\310w@\315\314\314\314\314\214{@fffff*\205@\232\231\231\231\231\241\201@\000\000\000\000\000X\224@\000\000\000\000\000 \220@fffff\246\200@\000\000\000\000\000`}@33333\377\200@\000\000\000\000\000\\\227@\000\000\000\000\000p\241@\000\000\000\000\000H\201@\000\000\000\000\000\306\242@\315\314\314\314\314p\210@\000\000\000\000\000\340y@\000\000\000\000\000\260\223@\000\000\000\000\000\360\231@\232\231\231\231\231\315\210@\315\314\314\314\314(\201@\315\314\314\314\314\014\217@\000\000\000\000\0008\221@\000\000\000\000\000\310x@\315\314\314\314\314\204y@333333p@33333cx@\232\231\231\231\231\251\216@fffff\006\203@\232\231\231\231\231\325\201@\000\000\000\000\000 \251@\000\000\000\000\000R\240@\000\000\000\000\000\324\223@333333}@\315\314\314\314\314h\216@\000\000\000\000\000P{@\000\000\000\000\000\010\226@\000\000\000\000\000L\200@\000\000\000\000\000\230~@\232\231\231\231\231\025\201@33333\323\207@\000\000\000\000\000\034\202@\315\314\314\314\314\374r@33333\007\210@\232\231\231\231\231\205\210@\315\314\314\314\314\304\202@333337\211@\000\000\000\000\0000\223@\000\000\000\000\000`\232@\000\000\000\000\000P\220@33333\363\203@\000\000\000\000\000\\\223@\000\000\000\000\000\010\237@\000\000\000\000\000\004\222@33333/\205@\000\000\000\000\000\354\216@\232\231\231\231\231\271t@\000\000\000\000\000\350\222@fffff\372\203@\232\231\231\231\231%\215@\000\000\000\000\000\340\231@fffff\022\201@\000\000\000\000\000\206\243@\000\000\000\000\000\350\217@fffffZ\211@\315\314\314\314\314p\207@\232\231\231\231\231\231\200@33333;y@\000\000\000\000\000d\237@\000\000\000\000\000Z\243@\232\231\231\231\231\021\206@\315\314\314\314\314t\205@\232\231\231\231\231yw@\000\000\000\000\000\000\221@fffff&\206@\232\231\231\231\231I\213@fffff\266x@\232\231\231\231\231A\211@\000\000\000\000\000\200\203@\000\000\000\000\000\020\206@\000\000\000\000\000\224\222@\315\314\314\314\314D|@fffffn}@\000\000\000\000\000@\235@fffff\376t@\000\000\000\000\000\\\206@\000\000\000\000\000\000\247@\000\000\000\000\000X\233@\000\000\000\000\000\340\207@\000\000\000\000\000\000\226@33333[\205@33333\373\200@fffff\216}@\000\000\000\000\000\020\206@\000\000\000\000\000$\226@\315\314\314\314\314,y@\000\000\000\000\000\320\202@\315\314\314\314\314\370\203@33333{|@\315\314\314\314\314\274~@\000\000\000\000\000h\237@fffff\316\177@\000\000\000\000\0004\236@\000\000\000\000\000\030\223@\000\000\000\000\000\320\236@\000\000\000\000\000\320\211@\000\000\000\000\000\030\236@fffff\006\215@\000\000\000\000\000(\223@\000\000\000\000\000,\220@\000\000\000\000\000\320\234@\000\000\000\000\000\010\223@\000\000\000\000\000<\224@\315\314\314\314\314\344\216@\000\000\000\000\000p\226@\000\000\000\000\000\320\252@\315\314\314\314\314\214z@\000\000\000\000\000\254\204@\000\000\000\000\000\254\202@fffff\246y@\315\314\314\314\314d\205@\000\000\000\000\000\230|@\000\000\000\000\000\240\242@333333v@\000\000\000\000\000\240\224@fffff\206}@\000\000\000\000\000\240|@\000\000\000\000\000P\223@\315\314\314\314\314\030\207@\000\000\000\000\000\360\204@\000\000\000\000\000\360\232@\232\231\231\231\231\255\200@\000\000\000\000\000p\231@\000\000\000\000\000\034\220@\315\314\314\314\314\234\202@\315\314\314\314\314\240\201@\315\314\314\314\314\020\201@\000\000\000\000\000\010\202@\232\231\231\231\231Y{@\315\314\314\314\314\264|@fffff\372\207@fffffN\211@33333K\202@fffff.\200@\232\231\231\231\231M\201@\315\314\314\314\314\250\204@33333\203x@\315\314\314\314\314L\201@\232\231\231\231\231\235\211@33333\253v@\000\000\000\000\000\n\240@fffff:\201@\000\000\000\000\000\200\232@fffffvw@\315\314\314\314\314\234~@\000\000\000\000\000\310}@33333\347\203@\000\000\000\000\000\330q@\232\231\231\231\231\325\205@33333\003\205@\232\231\231\231\2311~@fffffF\212@fffffV\203@\315\314\314\314\314<}@33333\003n@\232\231\231\231\231\001\201@\315\314\314\314\314\010\200@\000\000\000\000\0004\227@\232\231\231\231\231\221r@33333\037\200@ffffffx@\000\000\000\000\000\344\231@\000\000\000\000\000\274\202@\000\000\000\000\000H\236@\315\314\314\314\3148\202@33333\363\201@33333o\207@33333[\200@\000\000\000\000\000\204\221@\232\231\231\231\231y\216@\000\000\000\000\000\270\220@fffff\322\203@\232\231\231\231\231A{@33333\313~@fffff\002\201@\000\000\000\000\000H\225@\000\000\000\000\000\000\202@\000\000\000\000\000D\235@\000\000\000\000\000\000x@\000\000\000\000\000\264\246@\315\314\314\314\314\360\212@\232\231\231\231\231\031v@\000\000\000\000\000\200{@\000\000\000\000\000\020\230@33333#\200@\232\231\231\231\231Qv@\315\314\314\314\314\224\201@fffff\206\213@\315\314\314\314\314\274}@33333\003\177@\000\000\000\000\000\364\200@fffff\232\214@\000\000\000\000\000D\251@\000\000\000\000\000h\220@\000\000\000\000\000X|@33333\033\201@\232\231\231\231\231y\202@33333\263\205@\000\000\000\000\000\340r@\232\231\231\231\231y{@\232\231\231\231\231M\202@\232\231\231\231\231i\203@\232\231\231\231\231\035\202@\000\000\000\000\000\210\217@\000\000\000\000\000\274\204@\000\000\000\000\000\320\233@\000\000\000\000\000\034\232@\315\314\314\314\314\204\203@\000\000\000\000\000\216\250@\000\000\000\000\000f\241@\000\000\000\000\0004\222@\315\314\314\314\314\230\211@\000\000\000\000\000\374\227@\000\000\000\000\000h\236@\315\314\314\314\314\364\204@\000\000\000\000\000\354\212@fffff\376u@\315\314\314\314\314D\205@\000\000\000\000\000\210\204@\232\231\231\231\231\301\177@\232\231\231\231\231\301}@\232\231\231\231\231\361{@fffff\206~@\000\000\000\000\000\304\202@\232\231\231\231\231}\203@\232\231\231\231\231\261\207@33333\217\200@fffffJ\207@\000\000\000\000\000 |@\000\000\000\000\000\204\224@\000\000\000\000\000\250x@\000\000\000\000\000\320s@\000\000\000\000\000<\225@\000\000\000\000\000B\240@\000\000\000\000\000|\201@\000\000\000\000\000d\205@\232\231\231\231\231\031\205@\000\000\000\000\000x\202@33333\013\177@\000\000\000\000\000\220\201@\000\000\000\000\000`\224@\000\000\000\000\000l\202@33333o\203@33333\'\202@\315\314\314\314\314\250\200@fffff\206}@33333\237\215@fffff.\204@\000\000\000\000\000\024\225@\232\231\231\231\231\021\203@fffffJ\200@fffffv}@\000\000\000\000\000\320r@\315\314\314\314\314\030\213@33333\033\215@33333W\200@fffffvv@\000\000\000\000\000P\233@33333\267\201@\000\000\000\000\000\240|@\000\000\000\000\000D\200@\232\231\231\231\231I\211@33333\273}@fffff&\206@fffff\316w@\315\314\314\314\314\204w@fffff\206{@\000\000\000\000\000\230~@\232\231\231\231\231Qz@fffffV\202@\232\231\231\231\231\005\212@fffff\036\200@\000\000\000\000\000\034\227@\000\000\000\000\000\014\231@\000\000\000\000\000L\210@fffff*\213@33333\227\203@\000\000\000\000\000p\207@\315\314\314\314\314h\207@33333\207\205@fffff\306}@\000\000\000\000\000\020\224@\315\314\314\314\314\024\206@\315\314\314\314\314\344v@\000\000\000\000\0000\224@33333\017\200@\000\000\000\000\000t\226@\000\000\000\000\000\354\211@\000\000\000\000\000\364\211@"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\207\247W\3122\304\321?\375M(D\300!\264?\362\260Pk\232w\304?\317f\325\347j+\322?\217St$\227\377\300?\303\365(\\\217\302\305?\201\225C\213l\347\273?u\223\030\004V\016\305?_)\313\020\307\272\310?\227\220\017z6\253\316?\246a\370\210\230\022\261?aTR\'\240\211\300?\237\253\255\330_v\317?\273\'\017\013\265\246\271?\266\204|\320\263Y\315?\321\"\333\371~j\304?<\337O\215\227n\262?R\'\240\211\260\341\311?_\230L\025\214J\272?:\351}\343k\317\264?\250\306K7\211A\300?\3127\333\334\230\236\260?\207\026\331\316\367S\313?\013\265\246y\307)\272?J{\203/L\246\302?\247\350H.\377!\315?EGr\371\017\351\307?\356\353\3009#J\273?)\313\020\307\272\270\305?\346\256%\344\203\236\275?e\252`TR\'\310?\272k\t\371\240g\303?\022\245\275\301\027&\303?\342X\027\267\321\000\306?\243#\271\374\207\364\303?\322o_\007\316\031\301?\007\316\031Q\332\033\274?\234\026\274\350+H\243?\205_\352\347ME\252?\252\361\322Mb\020\300?TW>\313\363\340\256?\347\035\247\350H.\277?\324x\351&1\010\314?\032Q\332\033|a\302?\257%\344\203\236\315\272?M\204\rO\257\224\305?\222t\315\344\233m\256?\3019#J{\203\277?\330d\215z\210F\267?L2r\026\366\264\263?[\266\326\027\tm\251?K\345\355\010\247\005\257?\211Fw\020;S\250?5^\272I\014\002\303?\215\321:\252\232 \262?g\\8\020\222\005\254?\017\2343\242\2647\300?F\266\363\375\324x\301?\203\335\260mQf\243?\222\263\260\247\035\376\252?\373\005\273a\333\242\264?\031\220\275\336\375\361\266?\335\265\204|\320\263\311?\202\255\022,\016g\266?e\252`TR\'\300?\003\t\212\037c\356\302?J\007\353\377\034\346\263?\341\177+\331\261\021\250?\331_vO\036\026\302?x\227\213\370N\314\252?\201&\302\206\247W\272?\270@\202\342\307\230\303?\006\201\225C\213l\307?\374\251\361\322Mb\300?\263\322\244\024t{\261?\251\331\003\255\300\220\265?\257%\344\203\236\315\272?d]\334F\003x\313?%u\002\232\010\033\326?9\177\023\n\021p\270?\236c@\366z\367\267?\331\316\367S\343\245\303?u\223\030\004V\016\321??W[\261\277\354\306?\201&\302\206\247W\262?\024\320D\330\360\364\272?\364\340\356\254\335v\271?\035\311\345?\244\337\276?vq\033\r\340-\270?k\232w\234\242#\301?\016g~5\007\010\266?\366\227\335\223\207\205\272?R\'\240\211\260\341\251?\020\351\267\257\003\347\264?p\316\210\322\336\340\303?\221~\373:p\316\300?\377&\024\"\340\020\262?\300\317\270p $\253?\335$\006\201\225C\263?\331=yX\2505\275?\357\003\220\332\304\311\265?r\026\366\264\303_\263?\2240\323\366\257\254\244?Pp\261\242\006\323\270?\022\240\246\226\255\365\265?d;\337O\215\227\306?\267\321\000\336\002\t\272?5\3578EGr\261?e\031\342X\027\267\321?\242E\266\363\375\324\260?\210K\216;\245\203\265?O\036\026jM\363\276?\2760\231*\030\225\314?=\233U\237\253\255\300?\346\350\361{\233\376\264?d#\020\257\353\027\264?\212\216\344\362\037\322\277?\226!\216uq\033\305?w-!\037\364l\306?L\032\243uT5\261?[\323\274\343\024\035\261?)\\\217\302\365(\274?E\330\360\364JY\322?\030\225\324\th\"\274?\215\227n\022\203\300\262?\265\253\220\362\223j\257?\307\277\317\270p \264?v\333\205\346:\215\264?\305\2171w-!\307?\237\315\252\317\325V\304?G8-x\321W\270?;\001M\204\rO\277?\0358gDio\300?F*\214-\0049\270?\227\305\304\346\343\332\270?\311Y\330\323\016\177\255?\367\344a\241\3264\257?\027}\005i\306\242\261?Nb\020X9\264\300?\206Z\323\274\343\024\275?8\276\366\314\222\000\245?\226!\216uq\033\275?\324\324\262\265\276H\270?G8-x\321W\270?9\321\256B\312O\252?\202\342\307\230\273\226\300?\303\365(\\\217\302\305?\216uq\033\r\340\275?\372\355\353\3009#\272?m\377\312J\223R\260?\257\353\027\354\206m\263?Nb\020X9\264\300?\362\260Pk\232w\304?\257_\260\033\266-\252?\214g\320\320?\301\265?\267(\263A&\031\261?\035Zd;\337O\305?\256B\312O\252}\262?\367z\367\307{\325\252?al!\310A\t\243?\331=yX\2505\275?\274t\223\030\004V\276?\245\275\301\027&S\305?\226C\213l\347\373\271?\035Zd;\337O\275?\237$]3\371f\253?uv28J^\255?od\036\371\203\201\267?\024?\306\334\265\204\304?:#J{\203/\264?\345\n\357r\021\337\261?\014\216\222W\347\030\260?\201\225C\213l\347\303?\362Y\236\007wg\255?\327\330%\252\267\006\246?Mg\'\203\243\344\245?q\033\r\340-\220\300?\t\371\240g\263\352\303?\0162\311\310Y\330\223?P\210\200C\250R\243?\307):\222\313\177\310?r\212\216\344\362\037\322?\237\002`<\203\206\266?\377!\375\366u\340\264?\003\t\212\037c\356\272?\231*\030\225\324\t\250?Y\022\240\246\226\255\265?\305rK\253!q\257?`\315\001\2029z\254?\341\227\372yS\221\262?\245,C\034\353\342\316?g~5\007\010\346\260?\033G\254\305\247\000\230?\341\013\223\251\202Q\301?\362\322Mb\020X\311?\232\3534\322Ry\253?\017\2343\242\2647\300?\345f\270\001\237\037\266?\3274\3578EG\302?\035\311\345?\244\337\276?\301>:u\345\263\264?\227\220\017z6\253\276?[B>\350\331\254\312?\376e\367\344a\241\306?h\263\352s\265\025\273?\262)Wx\227\213\270?\245\302\330B\220\203\262?P\302L\333\277\262\262?$\227\377\220~\373\302?\275\343\024\035\311\345\257?7\032\300[ A\301?D\213l\347\373\251\261?\272k\t\371\240g\303?-!\037\364lV\275?\326\305m4\200\267\300?B\317f\325\347j\303?\264Y\365\271\332\212\275?\347tYLl>\256?\326\305m4\200\267\300?!\260rh\221\355\274??\221\'I\327L\266?2\346\256%\344\203\276?\371\203\201\347\336\303\265?\373:p\316\210\322\276?RD\206U\274\221\251?j\244\245\362v\204\263?\334\334\230\236\260\304\263?\346?\244\337\276\016\274?JA\267\2274F\263?\202sF\224\366\006\307?\2201w-!\037\304?\2412\376}\306\205\243?\261mQf\203L\242?t$\227\377\220~\273?\005i\306\242\351\354\244?\017\013\265\246y\307\261?+\366\227\335\223\207\305?\220\275\336\375\361^\265?)\355\r\2760\231\272?\223\251\202QI\235\300?~\214\271k\t\371\260?\036\341\264\340E_\241?\366(\\\217\302\365\300?[\266\326\027\tm\261?\032\300[ A\361\303?\212\002}\"O\222\256?\',\361\200\262)\247?&S\005\243\222:\301?\333P1\316\337\204\262?\005\300x\006\r\375\263?\255i\336q\212\216\304?\316\036h\005\206\254\256?&\344\203\236\315\252\307?J{\203/L\246\272?\357\311\303B\255i\276?tF\224\366\006_\300?+\030\225\324\th\312?\352\0044\0216<\315?\222\\\376C\372\355\323?B>\350\331\254\372\304?_\007\316\031Q\332\273?C\034\353\3426\032\260?A\361c\314]K\300?\342\314\257\346\000\301\254?\202sF\224\366\006\267?\373\313\356\311\303B\275?>\350\331\254\372\\\275?\024\005\372D\236$\265?d\307F ^\327\257?\307):\222\313\177\300?1\010\254\034Zd\233?\2652\341\227\372y\263?\322o_\007\316\031\311?R\325\004Q\367\001\250?\314\321\343\3676\375\261?L\246\nF%u\262?3\371f\233\033\323\243?\377\255d\307F \256?\220\367\252\225\t\277\244?;k\267]h\256\263?)\355\r\2760\231\302?\361\364JY\2068\246?L\246\nF%u\302?\033\236^)\313\020\307?\330\360\364JY\206\270?\204\022f\332\376\225\245?R\'\240\211\260\341\271?\271\210\357\304\254\027\243?yX\2505\315;\276?N\013^\364\025\244\251?\371\240g\263\352s\305?\275o|\355\231%\271?h?RD\206U\264?m>\256\r\025\343\254?[=\'\275o|\265?\322\343\3676\375\331\257?$\234\026\274\350+\250?dX\305\033\231G\256?}\320\263Y\365\271\252?J\357\033_{f\261?\334h\000o\201\004\305?\205|\320\263Y\365\271?I\235\200&\302\206\307?\233\341\006|~\030\261?\337\025\301\377V\262\263?9\314\227\027`\037\255?\030\tm9\227\342\252?+\000\3063h\350\237?7\246\',\361\200\242?\001\336\002\t\212\037\243?\204%\036P6\345\252?\036\247\350H.\377\241?\360\242\257 \315X\264?\035\346\313\013\260\217\256?\035 \230\243\307\357\255?\032\335A\354L\241\243?\212T\030[\010r\240?F\224\366\006_\230\274?\256\266b\177\331=\311?\035\304\316\024:\257\241?\342\351\225\262\014q\274?\224\274:\307\200\354\265?Z\273\355Bs\235\266?\000\000\000\000\000\000\310?o\360\205\311T\301\260?\255\300\220\325\255\236\263?\321\226s)\256*\253?v\025R~R\355\243?\303\323+e\031\342\300?\225\324\th\"l\300?x\013$(~\214\301?\315\314\314\314\314\314\274?_\357\376x\257Z\261?\027\202\034\2240\323\246?\210K\216;\245\203\245?F%u\002\232\010\273?\337\340\013\223\251\202\271?\374\030s\327\022\362\301?\251\336\032\330*\301\262?\225\324\th\"l\300?\270\257\003\347\214(\275?V+\023~\251\237\267?a\310\352V\317I\267?k\232w\234\242#\301?\335^\322\030\255\243\262?\373\000\2446qr\267?\321\256B\312O\252\255?\t\371\240g\263\352\263?m\312\025\336\345\"\256?\035\311\345?\244\337\276?\240\211\260\341\351\225\242?\212\037c\356ZB\316?\002\274\005\022\024?\316?\374o%;6\002\271?\\\254\250\3014\014\257?\030&S\005\243\222\272?\305\376\262{\362\260\300?u\352\312gy\036\254?L2r\026\366\264\263?X\255L\370\245~\256?\211A`\345\320\"\233?\033*\306\371\233P\260?^\277`7l[\264?Y\022\240\246\226\255\265?\357=\\r\334)\255?2w-!\037\364\274?>\350\331\254\372\\\305?\221\355|?5^\262?^.\342;1\353\265?\027\267\321\000\336\002\311?\232\010\033\236^)\303?\343\374M(D\300\261?1\010\254\034Zd\303?\226\262\014q\254\213\273?6qr\277CQ\260?+\030\225\324\th\302?sh\221\355|?\305?5c\321tv2\250?P\210\200C\250R\263?\247y\307):\222\313?\342\351\225\262\014q\274?VC\342\036K\037\262?d]\334F\003x\273?\013F%u\002\232\300?\301\312\241E\266\363\265?\"7\303\r\370\374\260?\236\352\220\233\341\006\264?\226\267#\234\026\274\250?\024?\306\334\265\204\274?;p\316\210\322\336\300?\255\335v\241\271N\263?\2073\277\232\003\004\263?<N\321\221\\\376\303?\364lV}\256\266\312?\320a\276\274\000\373\270?\212$z\031\305r\253?>\350\331\254\372\\\275?\332\254\372\\m\305\266?(\270XQ\203i\250?+\000\3063h\350\257??\306\334\265\204|\320?-\tPS\313\326\252?\270\006\266J\2608\264?\221IF\316\302\236\266?,H3\026Mg\247?\360\026HP\374\030\263?\336<\325!7\303\265?\'\332UH\371I\265?\305\376\262{\362\260\300?i\251\274\035\341\264\260?Nz\337\370\3323\253?\230\243\307\357m\372\263?\003\220\332\304\311\375\256?=\n\327\243p=\272?k+\366\227\335\223\247?Dio\360\205\311\264?\233r\205w\271\210\257?\007\316\031Q\332\033\304?\321\256B\312O\252\255?\007\346\350\361{\233\256?\334\334\230\236\260\304\263?9\326\305m4\200\307?\237<,\324\232\346\275?>\350\331\254\372\\\275?\367\222\306h\035U\265?\2721=a\211\007\244?t\265\025\373\313\356\271?\362Y\236\007wg\255?\032\335A\354L\241\243?\272\017@j\023\'\247?{\024\256G\341z\314?*\251\023\320D\330\300?W\354/\273\'\017\303?\017\013\265\246y\307\301?\316\337\204B\004\034\262?S\005\243\222:\001\275?\003\225\361\3573.\264?X\3122\304\261.\256?\2068\326\305m4\260?m[\224\331 \223\254?\003x\013$(~\274?\300[ A\361c\274?\336\375\361^\2652\261?\361\272~\301n\330\246?\322\000\336\002\t\212\277?EdX\305\033\231\267?\031\342X\027\267\321\300?RI\235\200&\302\266?+\207\026\331\316\367\263?"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "$EdX\305\033\251?\014{\332\341\257\311\212?\303i\301\213\276\202\244?\271\210\357\304\254\027\263?\372D\236$]3\231?\3436\032\300[ \241? \352>\000\251M\214?\024W\225}W\004\237?Xni5$\356\241?\013\230\300\255\273y\262?\220\330\356\036\240\373\202?{\367\307{\325\312\244?!\223\214\234\205=\265?7\216X\213O\001\240?\025\221a\025od\256?\241g\263\352s\265\245?\225\016\326\3779\314\207?\007\266J\2608\234\231?\3402\247\313bb\223?\237<,\324\232\346\215?\001\301\034=~o\223?\300\004n\335\315S\215?\200\317\017#\204G\253?F\231\r2\311\310\211?/\372\n\322\214E\223?\244k&\337ls\243?*:\222\313\177H\237?9@0G\217\337\233?\004s\364\370\275M\237?\312\310Y\330\323\016\237?\021S\"\211^F\241?\227\213\370N\314z\241?\2549@0G\217\237?\"7\303\r\370\374\240?uv28J^\235?-}\350\202\372\226\231?\227\220\017z6\253\236?\020\230\207L\371\020t?\235\364\276\361\265g\206?Z\236\007wg\355\226?o\273\320\\\247\221\206?\343\337g\\8\020\222?\376C\372\355\353\300\271?#gaO;\374\225?\325[\003[%X\214?3\277\232\003\004s\244?\227\305\304\346\343\332\220?\262c#\020\257\353\227?}\350\202\372\2269\215? \352>\000\251M\214?\246\264\376\226\000\374\203?_c\227\250\336\032\210?a\032\206\217\210)\201?\031\312\211v\025R\236?\016\2760\231*\030\205?\274\262\013\006\327\334\201?\351\016bg\n\235\227?\352\0044\0216<\235?V\325\313\3574\231\201?^K\310\007=\233\205?\340\020\252\324\354\201\206?\343\215\314#\1770\240?\343\337g\\8\020\262?D\243;\210\235)\244?\257\010\376\267\222\035\233?\235\200&\302\206\247\227?\r\340-\220\240\370\221??\253\314\224\326\337\202?\016g~5\007\010\266?9Cq\307\233\374v?&p\353n\236\352\220?A\016J\230i\373\267?\342\314\257\346\000\301\254?0L\246\nF%\225?U\373t<f\240\222?\002\237\037F\010\217\226?\030>\"\246D\022\235?h\256\323HK\345\255?V}\256\266b\177\261?\374o%;6\002\221?*oG8-x\221?\347\373\251\361\322M\242?J\223R\320\355%\255?`\345\320\"\333\371\256?X4\235\235\014\216\222?\337\032\330*\301\342\220?z;\302i\301\213\236?\"\211^F\261\334\222?\236\322\301\372?\207\231?I\3642\212\345\226\246?\350\336\303%\307\235\222?\273a\333\242\314\006\231?\340\204B\004\034B\205?\014\037\021S\"\211\216?\276\301\027&S\005\243?\025R~R\355\323\241?\023\325[\003[%\210?.\347R\\U\366\215?\314]K\310\007=\213?\367u\340\234\021\245\235?~t\352\312gy\216?\027\274\350+H3\206?H\331\"i7\372x?\006\330G\247\256|\226?\324e1\261\371\270\226?6Y\243\036\242\321\235?\235\200&\302\206\247\227?\214\204\266\234Kq\205?\251\2377\025\2510\266?O\307c\006*\343\217?\274\221y\344\017\006\236?ni5$\356\261\244?r3\334\200\317\017\263?\217\210)\221D/\243?E\273\n)?\251\226?\225`q8\363\253\231?X\2505\315;N\261?t\230//\300>\232?^\277`7l[\244?)\t\211\264\215?\201?q\217\245\017]P\217?\210K\216;\245\203\225?\356\266\013\315u\032\271?\303_\2235\352!\212?\347\214(\355\r\276\240?\n\240\030Y2\307\202?\320\270p $\013\210?\020@j\023\'\367\233?\350\331\254\372\\m\245?\202\377\255d\307F\240?\330\266(\263A&\231?\025\221a\025od\216?\005\300x\006\r\375\223?\202sF\224\366\006\217?9\314\227\027`\037\215?\256\360.\027\361\235\210?lxz\245,C\214?\237\310\223\244k&\217?\2505\315;N\321\241?\1775\007\010\346\350\241?\2077k\360\276*w?\0162\311\310Y\330\223?\207\247W\3122\304\221?7\216X\213O\001\220?\"\303*\336\310<\222?g\270\001\237\037F\250?D4\272\203\330\231\242?cE\r\246a\370\250?\022\017(\233r\205\227?\223\306h\035UM\220?\210\235)t^c\207?B\262\200\t\334\272\253?|\233\376\354G\212\270?\364\211<I\272f\202?\272\367p\311q\247\224?\222\343N\351`\375\217?\314\013\260\217N]\251?:z\374\336\246?\233?\345d\342VA\014\204?\240rL\026\367\037y?\033\r\340-\220\240\230?*:\222\313\177H\237?\214\326Q\325\004Q\227?\250\306K7\211A\240?[|\n\200\361\014\232?VId\037dY\200?e\376\3217i\032\204?\320D\330\360\364J\231?z\302\022\017(\233\242?\346?\244\337\276\016\214?\355\r\2760\231*\210?0\022\332r.\305\205?M\271\302\273\\\304\227?\016\204d\001\023\270\225?\371\3323K\002\324\204?\307\321\034Y\371e\200?\224\202n/i\214\266?\203L2r\026\366\244?\267\0148K\311rb?\326\251\362=#\021z?_\2652\341\227\372\231?=\270;k\267]\250?\225H\242\227Q,\227?\203\372\2269]\026\243?6\315;N\321\221\214?\372~j\274t\223\210?C\344\364\365|\315\202?fL\301\032g\323\201?\275\345\352\307&\371\201?\327\236Y\022\240\246\226?io\360\205\311T\301?\370\302d\252`T\222?\251/K;5\227{?r\371\017\351\267\257\243?\232_\315\001\2029\252?q8\363\2539@\220?\207\341#bJ$\241?\257\010\376\267\222\035\253?\036P6\345\n\357\242?\264T\336\216pZ\220?H\212\310\260\2127\222?\002CV\267zN\232?d\321tv28\252?\301\034=~o\323\237?\2132\033d\222\221\223?\365\025\244\031\213\246\223?\300`7l[\224\211?H\311\253s\014\310\216?3\254\342\215\314#\237?\252}:\0363P\211?\224\373\035\212\002}\242?\035\304\316\024:\257\221?\211\315\307\265\241b\234?\237<,\324\232\346\265?\255\372\\m\305\376\242?\265\340E_A\232\241?f\275\030\312\211v\245?\336q\212\216\344\362\237?`q8\363\2539\240?\372\2269]\026\023\233?z6\253>W[\221?R\362\352\034\003\262\227?x\351&1\010\254\214?\345\233mnLO\230?$-\225\267#\234\206?X!\345\'\325>\215?\311\004\374\032I\202\200?z\215]\242zk\240?\314\271\024W\225}\227?82\217\374\301\300\243?\344\3676\375\331\217\224?\004\342u\375\202\335\220?0\233\000\303\362\347{?\350\366\222\306h\035\225?\224\366\006_\230L\205?\373\"\241-\347R\214?T\350\274\306.Q\235?\265q\304Z|\n\240?\247\350H.\377!\235?\024?\306\334\265\204\234?\345\'\325>\035\217\211?\213\370N\314z1t?dX\305\033\231G\256?\310$#gaO\233?\021\215\356 v\246\240?\211\315\307\265\241b\214?\3058\177\023\n\021\220?\305wb\326\213\241\254?Q\332\033|a2\205?\330\266(\263A&\211?\340\370\3323K\002\244?\344\203\236\315\252\317\205?\277CQ\240O\344\251?H\311\253s\014\310\216?<\337O\215\227n\222?\345ypw\326n\233?\204\rO\257\224e\250?\314\271\024W\225}\247?\250W\3122\304\261\256?x\321W\220f,\232?\2348\271\337\241(\220?\327\236Y\022\240\246\206?\254\220\362\223j\237\256?/4\327i\244\245\202?\027\324\267\314\351\262\210?\370;\024\005\372D\216?/Q\2755\260U\242?\210)\221D/\243\230?Z\330\323\016\177M\226?\307):\222\313\177\250?\025\221a\025odn?|,}\350\202\372\206?\023a\303\323+e\251?\231\365b(\'\332\205?\215\234\205=\355\360\207?X\255L\370\245~\216?\335\323\325\035\213m\202?\252ek}\221\320\206?\377?N\2300\232u?\2549@0G\217\217?\335\357P\024\350\023\231?F=D\243;\210\215?M-[\353\213\204\226?\337\303%\307\235\322\241?+j0\r\303G\244?w\327\331\220\177f\200?\331B\220\203\022f\252?\226\262\014q\254\213\213?f\332\376\225\225&\265?6\315;N\321\221\214?\314]K\310\007=\273?\177\331=yX\250\225?\303i\301\213\276\202\224?\270\036\205\353Q\270\216?\355\r\2760\231*\210?\324\017\352\"\205\262\200?\340(yu\216\001\211?\2760\231*\030\225\204?\335\315S\035r3\214?\"v\246\320y\215\215?\240T\373t<f\240?\000\214g\320\320?\241?|\270\344\270S:\250?K\351\231^b,\203?cz\302\022\017(\233?\037\200\324&N\356\227?\274\223O\217m\031\200?\"\342\346T2\000t?\302\303\264o\356\257n?h>\347n\327Ks?\234P\210\200C\250\202?\302mm\341y\251x?\325[\003[%X\234?S\226!\216uq\213?\010\224M\271\302\273\214?\336\217\333/\237\254h?\247%VF#\237w?\"7\303\r\370\374\220?;p\316\210\322\336\260?\324\237\375H\021\031\206?\365JY\2068\326\245?\003\225\361\3573.\214?M\333\277\262\322\244\224?0\360\334{\270\344\230?\322\350\016bg\n\215?sI\325v\023|\203?\002eS\256\360.\207?\234\344G\374\2125|?\334K\032\243uT\225?{\210Fw\020;\243?\223\251\202QI\235\240?\2657\370\302d\252\240?$-\225\267#\234\206?ikD0\016.}?\002B\353\341\313D\201?\364\211<I\272f\222?|\362\260Pk\232\227?\207\334\0147\340\363\243??\313\363\340\356\254\215?\036\334\235\265\333.\224?P\0010\236AC\237?\2765\260U\202\305\241?\rl\225`q8\223?\312\375\016E\201>\241?,\237\345ypw\206?|\325\312\204_\352\247?Qf\203L2r\206?\325s\322\373\306\327\216?\200\325\221#\235\201\201?9b->\005\300\230?#\203\334E\230\242|?\355\323\361\230\201\312\260?E\022\275\214b\271\245?0\360\334{\270\344\230?\326\213\241\234hW\241?\220\240\3701\346\256\245?\375M(D\300!\244?/O\347\212RB\200?\253\347\244\367\215\257\235?\345x\005\242\'e\202?\275qR\230\3678s?\251\023\320D\330\360\224?\227\305\304\346\343\332\220?]m\305\376\262{\222?\232\231\231\231\231\231\211?j\244\245\362v\204\223?\037\200\324&N\356\247???\214\020\036m\214?\365\363\246\"\025\306\206?m>\256\r\025\343\234?\312\370\367\031\027\016\244?\357\311\303B\255i\216?1\010\254\034Zd\233?\272k\t\371\240g\223?q8\363\2539@\220?X4\235\235\014\216\222?p\353n\236\352\220\263?\210)\221D/\243\210?\346Ws\200`\216\236?{\017\227\034wJ\247?mQf\203L2\222?#O\222\256\231|\223?\324+e\031\342X\247?\2343\242\2647\370\242?\231//\300>:\225?\202n/i\214\326\221?\316\001\2029z\374\236?B>\350\331\254\372\214?\246a\370\210\230\022\261?\'\367;\024\005\372\244?\243#\271\374\207\364\213?\375M(D\300!\224?\010 \265\211\223\373\235?\026\336\345\"\276\023\243?2\033d\222\221\263\220?5\265l\255/\022\212?\'N\356w(\n\224?\005\213\303\231_\315\241?K<\240l\312\025\216?#\025\306\026\202\034\224?al!\310A\t\243?cb\363qm\250\210?Q\245f\017\264\002\243?p_\007\316\031Q\212?q\221{\272\272c\201?\231\365b(\'\332\225?0\266\020\344\240\204\211?\307\272\270\215\006\360\246?\211\315\307\265\241b\234?\235\200&\302\206\247\227?)\347\213\275\027_\204?\177\301n\330\266(\203?\303\353\372\005\273a\233?\342\314\257\346\000\301\234?}\350\202\372\2269\215?P\0010\236AC\237?\207\341#bJ$\221?\323jH\334c\351\243?\256|\226\347\301\335\211?\035\260\253\311SV\203?\203L2r\026\366\224?\232%\001jj\331\252?\234\242#\271\374\207\224?N\351`\375\237\303\234?vO\036\026jM\223?\267\t\367\312\274Uw?\"2\254\342\215\314\243?\221\203\022f\332\376\225?k-\314B;\247y?\320\270p $\013\210?\035r3\334\200\317\257?;p\316\210\322\336\240?>yX\2505\315\233?<\367\036.9\356\244?\261\341\351\225\262\014\221?e\337\025\301\377V\222?\023y\222t\315\344\213?\366\227\335\223\207\205\212?w-!\037\364l\206?R(\013__\353\202?t\200`\216\036\277\247?\037.9\356\224\016\246?w\271\210\357\304\254\207?\246\226\255\365EB\213?\336q\212\216\344\362\217?#\333\371~j\274\224?\340\276\016\2343\242\224?A\016J\230i\373\207?\361h\343\210\265\370\224?"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\224\366\006_\230L\345?4\200\267@\202\342\307?^\272I\014\002+\333?)\313\020\307\272\270\353?=\n\327\243p=\312?\353s\265\025\373\313\340??\306\334\265\204|\320?\343\307\230\273\226\220\327?*:\222\313\177H\341?!\260rh\221\355\360?_\007\316\031Q\332\303?\336q\212\216\344\362\341?B>\350\331\254\372\330?\033\r\340-\220\240\310?\270\036\205\353Q\270\350?\316\210\322\336\340\013\345?\336q\212\216\344\362\307?,e\031\342X\027\333?)\\\217\302\365(\324?\250W\3122\304\261\306?\207\247W\3122\304\321?O\257\224e\210c\275?\223:\001M\204\r\343?\244p=\n\327\243\320?.\220\240\3701\346\326?\203/L\246\nF\331?\031s\327\022\362A\345?\360\026HP\374\030\313?Zd;\337O\215\343?\036\247\350H.\377\321?\221\017z6\253>\333?{\024\256G\341z\342?\236^)\313\020\307\326?J\014\002+\207\026\345?\030&S\005\243\222\342?%\006\201\225C\213\330?\001\336\002\t\212\037\333?f\362\31567\246\247?\205_\352\347ME\252?\n\327\243p=\n\333?\203QI\235\200&\312?\277}\0358gD\321?\212\216\344\362\037\322\347?\023\362A\317f\325\327?\007\360\026HP\374\330?}?5^\272I\340?\002\232\010\033\236^\301?\323\336\340\013\223\251\332?\270@\202\342\307\230\313?\237<,\324\232\346\305?\004\347\214(\355\r\266?\344\024\035\311\345?\304?\006\273a\333\242\314\266?\327\022\362A\317f\315?\370\302d\252`T\312?4\0216<\275R\266?\325\th\"lx\326?\333\371~j\274t\333?m9\227\342\252\262\257?Gr\371\017\351\267\277?Ral!\310A\271?\262.n\243\001\274\305?Z\365\271\332\212\375\343?\nh\"lxz\305?Z\365\271\332\212\375\331?\006\022\024?\306\334\325?\224\366\006_\230L\305?\317\362<\270;k\267?V\016-\262\235\357\333?lC\3058\177\023\262?\237<,\324\232\346\315?\347\035\247\350H.\317?a2U0*\251\347?\227\220\017z6\253\326?\363\216St$\227\307?\223\030\004V\016-\312?\273\'\017\013\265\246\301?\363\037\322o_\007\342?\013$(~\214\271\343?\272k\t\371\240g\313?\371\240g\263\352s\305?\323\336\340\013\223\251\336?S\226!\216uq\343?\363\037\322o_\007\322?3\304\261.n\243\311?\0054\0216<\275\312?\320D\330\360\364J\311?\024?\306\334\265\204\324?I\235\200&\302\206\317?i\000o\201\004\305\323?\355\236<,\324\232\306?\000o\201\004\305\217\311?6\253>W[\261\277?\357\311\303B\255i\306?.\220\240\3701\346\332?J{\203/L\246\326?0G\217\337\333\364\267?q8\363\2539@\270?6\253>W[\261\307? A\361c\314]\323?;p\316\210\322\336\310?\332\254\372\\m\305\276?V\202\305\341\314\257\266?\201\004\305\2171w\315?\276\301\027&S\005\303?yX\2505\315;\332?\240\032/\335$\006\321?\3436\032\300[ \311?\300[ A\361c\346?\007\316\031Q\332\033\314?d;\337O\215\227\306?\315\314\314\314\314\314\314?\204\236\315\252\317\325\332?\265\246y\307):\312?\212\037c\356ZB\316?0\273\'\017\013\265\316?\"\216uq\033\r\310?x\351&1\010\254\334?\205\353Q\270\036\205\337?\332\254\372\\m\305\276?d;\337O\215\227\316?\245\275\301\027&S\315?\232\010\033\236^)\333?\245,C\034\353\342\306?\302\206\247W\3122\320?H\341z\024\256G\301?L\246\nF%u\322?B>\350\331\254\372\314?\210\364\333\327\201s\322?\022\024?\306\334\265\330?%\006\201\225C\213\320?\206\311T\301\250\244\316?Zd;\337O\215\323?m\305\376\262{\362\310?\037\205\353Q\270\036\315?t$\227\377\220~\303?p_\007\316\031Q\272?\016\2760\231*\030\305?\373\\m\305\376\262\313?\303d\252`TR\307?\250\373\000\2446q\262?W[\261\277\354\236\314?\307\272\270\215\006\360\306?\312T\301\250\244N\320?;\001M\204\rO\277?\007\316\031Q\332\033\320?\034|a2U0\332?\030\225\324\th\"\320?\033/\335$\006\201\321?\324+e\031\342X\307?}?5^\272I\274?/\335$\006\201\225\333?v\340\234\021\245\275\321?\363\310\037\014<\367\266?\377!\375\366u\340\314?\245,C\034\353\342\306?\336\002\t\212\037c\326?\027\331\316\367S\343\305?\322\000\336\002\t\212\277?\317\275\207K\216;\265?\017\2343\242\2647\310? \322o_\007\316\311?\223\251\202QI\235\330?\260\003\347\214(\355\315?\003\t\212\037c\356\326?\0216<\275R\226\271?\273\270\215\006\360\026\300?\001\336\002\t\212\037\313?O\215\227n\022\203\330?2w-!\037\364\304?\2068\326\305m4\300?\265\025\373\313\356\311\303?\003\t\212\037c\356\326?\016\2760\231*\030\265?\246D\022\275\214b\261?\377&\024\"\340\020\262?\341z\024\256G\341\322?\312\303B\255i\336\335?m\2132\033d\222\241?p\316\210\322\336\340\253?\2505\315;N\321\331?0*\251\023\320D\350?l\t\371\240g\263\326?\317\367S\343\245\233\304?[\323\274\343\024\035\325?\331_vO\036\026\272?\262\235\357\247\306K\317?:\264\310v\276\237\272?\232\231\231\231\231\231\271?\037\205\353Q\270\036\305?\233U\237\253\255\330\355?\262\272\325s\322\373\266?5\007\010\346\350\361\233?\256\330_vO\036\336?:\222\313\177H\277\335?f\210c]\334F\303?\263\352s\265\025\373\323?\3436\032\300[ \311?\316\252\317\325V\354\341?\205|\320\263Y\365\331?\372\355\353\3009#\312?\027\331\316\367S\343\325?\227\220\017z6\253\332?\227\220\017z6\253\340?\000\221~\373:p\316?\341\013\223\251\202Q\325?\316\252\317\325V\354\277?\276\301\027&S\005\303?\261\277\354\236<,\334?\263\352s\265\025\373\313?\343\245\233\304 \260\322?\252\361\322Mb\020\310?\272k\t\371\240g\303?O\036\026jM\363\306?\321\221\\\376C\372\331?,\207\026\331\316\367\333?t$\227\377\220~\323?R\'\240\211\260\341\301?Nb\020X9\264\324?\361\364JY\2068\332?&\344\203\236\315\252\317?\277}\0358gD\321?<\337O\215\227n\302?x\351&1\010\254\334?\200\267@\202\342\307\300?\205\353Q\270\036\205\303?\243\222:\001M\204\275?\274\226\220\017z6\327?%u\002\232\010\033\326?\360\026HP\374\030\341?\005\305\2171w-\331?\370\302d\252`T\302?\252`TR\'\240\261?\010=\233U\237\253\321?\353\3426\032\300[\270? A\361c\314]\303?+\030\225\324\th\332?M\204\rO\257\224\315?\223:\001M\204\r\317?\201\225C\213l\347\327?\330\360\364JY\206\300?\234\334\357P\024\350\263?\202sF\224\366\006\337?L\246\nF%u\302?\255\372\\m\305\376\322?N\321\221\\\376C\272?vO\036\026jM\303?\326\305m4\200\267\342?\333\212\375e\367\344\301?\344\024\035\311\345?\304?\005\243\222:\001M\324?\320\263Y\365\271\332\272?u\223\030\004V\016\343?b\020X9\264\310\316?\227\377\220~\373:\324?\377!\375\366u\340\324?\223:\001M\204\r\341?\031\342X\027\267\321\334?\351\267\257\003\347\214\340? \322o_\007\316\341?\014\002+\207\026\331\322?\276\301\027&S\005\303?E\330\360\364JY\322?\305\2171w-!\307?Y\2068\326\305m\320?]\376C\372\355\353\320?\177j\274t\223\030\320?\277\237\032/\335$\306?M\363\216St$\307?R\270\036\205\353Q\320?F\231\r2\311\310\251?\356\353\3009#J\303?=\n\327\243p=\336?x\234\242#\271\374\267?=,\324\232\346\035\307?\261KTo\rl\265?\000\373\350\324\225\317\262?\030\004V\016-\262\275?4\026Mg\'\203\263?\214J\352\0044\021\306?\2760\231*\030\225\330?\303\365(\\\217\302\265?<N\321\221\\\376\327?\256\330_vO\036\336?\177\331=yX\250\315?\332\341\257\311\032\365\260?\342X\027\267\321\000\322?>\350\331\254\372\\\275?\363\216St$\227\307?|~\030!<\332\270?\025\035\311\345?\244\317?1\010\254\034Zd\323?\325\th\"lx\312?\252\202QI\235\200\306?HP\374\030s\327\302?S\226!\216uq\273?\327\335<\325!7\263?\265\333.4\327i\264?\224\207\205Z\323\274\313?\350\237\340bE\r\266?\201&\302\206\247W\332?\310\007=\233U\237\313?\335\265\204|\320\263\325?}\320\263Y\365\271\272?.\220\240\3701\346\306?$(~\214\271k\301?&S\005\243\222:\301?\014{\332\341\257\311\252?\305\003\312\246\\\341\255?\035 \230\243\307\357\255?O@\023a\303\323\273?1|DL\211$\262?lxz\245,C\314?U0*\251\023\320\304?\247\\\341].\342\263?\226}W\004\377[\251?\\\010rP\302L\253?\220\240\3701\346\256\321?x\234\242#\271\374\327?9\234\371\325\034 \250?i\221\355|?5\316?\352\225\262\014q\254\303?\255i\336q\212\216\314?\253>W[\261\277\334?=\233U\237\253\255\310?\202sF\224\366\006\277?\300[ A\361c\274?z\245,C\034\353\262?\225e\210c]\334\322?h\263\352s\265\025\313?\360\205\311T\301\250\334?\031\342X\027\267\321\324?T\251\331\003\255\300\270?\246a\370\210\230\022\271?\225H\242\227Q,\267?\3274\3578EG\312?H\341z\024\256G\311?j\336q\212\216\344\336?\374\030s\327\022\362\301?k\232w\234\242#\321?\211\322\336\340\013\223\325?\006\022\024?\306\334\325?}?5^\272I\314?6<\275R\226!\326?%\006\201\225C\213\274?\251\023\320D\330\360\304?X\2505\315;N\301?e\031\342X\027\267\311?x\351&1\010\254\274?T\343\245\233\304 \310?\025\306\026\202\034\224\260?\241\3701\346\256%\340?\217St$\227\377\342?G\003x\013$(\316?2U0*\251\023\300?\252`TR\'\240\311?\027\267\321\000\336\002\321? \322o_\007\316\271?\336q\212\216\344\362\277?\320\263Y\365\271\332\272?+\274\313E|\'\246?-!\037\364lV\305?\322\000\336\002\t\212\307?\222\313\177H\277}\305?\371\240g\263\352s\305?\357\311\303B\255i\316?\006\022\024?\306\334\325?-\262\235\357\247\306\313?f\367\344a\241\326\304?w\276\237\032/\335\330?B`\345\320\"\333\335?yX\2505\315;\306?\223\030\004V\016-\322?Zd;\337O\215\323?\300\354\236<,\324\312?R\270\036\205\353Q\320?\232\010\033\236^)\327?J{\203/L\246\302?\350j+\366\227\335\323?\210c]\334F\003\356?,e\031\342X\027\317?\002\232\010\033\236^\311?6\315;N\321\221\324?\255\372\\m\305\376\326?\311v\276\237\032/\321?[\261\277\354\236<\304?=,\324\232\346\035\317?\343\307\230\273\226\220\277?\321\221\\\376C\372\321?.\220\240\3701\346\316?\037\205\353Q\270\036\305?\370S\343\245\233\304\300?\354/\273\'\017\013\331?A\361c\314]K\342?\250W\3122\304\261\306?\3019#J{\203\277?\246\233\304 \260r\320?o\201\004\305\2171\307?\"\216uq\033\r\310?\235\021\245\275\301\027\306?\345a\241\3264\357\342?)\\\217\302\365(\304?\010=\233U\237\253\315?9EGr\371\017\311?\2446qr\277C\261?\354/\273\'\017\013\305?{\203/L\246\n\306?\200\267@\202\342\307\310?\201\225C\213l\347\327?`\345\320\"\333\371\306?4\242\2647\370\302\304?\2343\242\2647\370\302?e\252`TR\'\310?\234\304 \260rh\325?Ral!\310A\271?<N\321\221\\\376\313?C\255i\336q\212\276?\"\375\366u\340\234\331?6\315;N\321\221\304?\257\224e\210c]\274?\t\033\236^)\313\310?\335$\006\201\225C\327?-\262\235\357\247\306\313?0*\251\023\320D\324?X\2505\315;N\301?\360m\372\263\037)\262?\"lxz\245,\323?\241g\263\352s\265\305?d\307F ^\327\257?\202\342\307\230\273\226\270?\344\245\233\304 \260\346?\336\223\207\205Z\323\320?\300\354\236<,\324\322?\013\265\246y\307)\326?\327\243p=\n\327\303?\204\236\315\252\317\325\326?0L\246\nF%\305?\021\307\272\270\215\006\300?\331=yX\2505\275?\267\321\000\336\002\t\272?r\212\216\344\362\037\332?\032Q\332\033|a\332?B\317f\325\347j\273?\036\033\201x]\277\260?9EGr\371\017\321?\303d\252`TR\307?2U0*\251\023\330?2U0*\251\023\310?2w-!\037\364\320?"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\300\354\236<,\324\302?\274\n)?\251\366\261?tF\224\366\006_\300?\003\t\212\037c\356\272?l\t\371\240g\263\272?\367\314\222\0005\265\264?\214l\347\373\251\361\262?\206\311T\301\250\244\256?\250\3431\003\225\361\267?W\347\030\220\275\336\265?3\376}\306\205\003\241?\360\341\222\343N\351\260?W[\261\277\354\236\274?-\317\203\273\263v\253?%\006\201\225C\213\264?\265l\255/\022\332\262?\314z1\224\023\355\252?p_\007\316\031Q\272?\033*\306\371\233P\270?\356\360\327d\215z\250?\233U\237\253\255\330\237?\340\204B\004\034B\225?\232\323e1\261\371\270?\324\237\375H\021\031\266?(\017\013\265\246y\267?t\265\025\373\313\356\301?\352\220\233\341\006|\266?\321\\\247\221\226\312\263?\202\255\022,\016g\266?x\006\r\375\023\\\264?\233U\237\253\255\330\277?d\264\216\252&\210\252?\353s\265\025\373\313\276?\034\010\311\002&p\263?\0162\311\310Y\330\263?\216\036\277\267\351\317\256?\013\315u\032i\251\254?\347\221?\030x\356\235?\253\347\244\367\215\257\235?)yu\216\001\331\253?\261\205 \007%\314\224?->\005\300x\006\255?r\304Z|\n\200\271?d\344,\354i\207\257?O\227\305\304\346\343\252?1\231*\030\225\324\271?:\317\330\227l<x?\'\302\206\247W\312\262?\273?\336\253V&\234?2\341\227\372yS\241?\204\236\315\252\317\325\206?jR\n\272\275\244\221?\377\225\225&\245\240\213?\211A`\345\320\"\273?\212\032L\303\360\021\241?\372\362\002\354\243S\227?f,\232\316N\006\267?\226>tA}\313\264?\334\024\217\213j\021q?\177f\020\037\330\361\177?\263{\362\260Pk\212?\266\237\214\361a\366\202?\020u\037\200\324&\266?4\0216<\275R\226?c\013A\016J\230\261?!\345\'\325>\035\267?\"\002\016\241J\315\216?\204\236\315\252\317\325\226?ffffff\246?\300\004n\335\315S\235?Bx\264q\304Z\264?)\350\366\222\306h\235?\203\206\376\t.V\264?N\356w(\n\364\251?jH\334c\351C\227?X\305\033\231G\376\260?\234\376\354G\212\310\260?\332\316\367S\343\245\273?\234\242#\271\374\207\304?\277\016\2343\242\264\227?\314\363\340\356\254\335\226?\211\265\370\024\000\343\261?\004V\016-\262\235\307?\257%\344\203\236\315\302?\026\336\345\"\276\023\223?2\346\256%\344\203\266?c(\'\332UH\251?\\Z\r\211{,\265?\"lxz\245,\243?\275\030\312\211v\025\262?dX\305\033\231G\236?cz\302\022\017(\263?\257\010\376\267\222\035\233?\362\260Pk\232w\234?Tt$\227\377\220\266?B\312O\252}:\266?\223\221\263\260\247\035\236?\320Cm\033FA\200?\364\375\324x\351&\241?h\256\323HK\345\255?\262\272\325s\322\373\246?\000\000\000\000\000\000\000\000r\212\216\344\362\037\222?\024W\225}W\004\237?\324\267\314\351\262\230\210?\025\306\026\202\034\224\270?\271\374\207\364\333\327\241?\316N\006G\311\253\223?K\310\007=\233U\307?n\335\315S\035r\223?\333m\027\232\3534\222?2\311\310Y\330\323\256?\364\370\275M\177\366\263?\265\253\220\362\223j\237?\026\244\031\213\246\263\223?\344\3676\375\331\217\224?\303G\304\224H\242\227?\325s\322\373\306\327\266?\025\343\374M(D\270?\237\260\304\003\312\246\254?\007B\262\200\t\334\232?X\3122\304\261.\266?\376C\372\355\353\300\311?h\313\271\024W\225\255?x\351&1\010\254\234?\256d\307F ^\207?\363\216St$\227\237?;\351}\343k\317\254?bg\n\235\327\330\265?`vO\036\026j\275?l\004\342u\375\202\235?\301>:u\345\263\264?=\"\246D\022\275\254?p\346Ws\200`\256?\236\322\301\372?\207\261?\215@\274\256_\260\233?:\264\310v\276\237\232?q=\n\327\243p\235?\371f\233\033\323\023\266? F\010\2176\216\250?\000\000\000\000\000\000\000\000\222t\315\344\233m\256?;\245\203\365\177\016\223?;\344f\270\001\237\237?T\343\245\233\304 \200?\000t\230//\300\236?$\227\377\220~\373\262?\"\303*\336\310<\242?\373\"\241-\347R\254?\362$\351\232\3117\213?h\263\352s\265\025\233?\027\274\350+H3\226?>\\r\334)\035\264?DQ\240O\344I\222?L\340\326\335<\325\241?\221\325\255\236\223\336\227?$\227\377\220~\373\272?\035\261\026\237\002`\234?\266\370\024\000\343\031\224?\323\234\274\310\004\374z?\245\210\014\253x#\243?\036\033\201x]\277\270?.\377!\375\366u\300?\331Z_$\264\345\234?\331\323\016\177M\326\270?{Nz\337\370\332\223?\302\213\276\2024c\221?\275\214b\271\245\325\260?l\t\371\240g\263\272?\317k\354\022\325[\243?\214l\347\373\251\361\242?\265\340E_A\232\241?\367\006_\230L\025\274?\373\320\005\365-s\232?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\365Op\261\242\006\243?\303\236v\370k\262\266?\242\010\251\333\331W^?\314]K\310\007=\213?\231*\030\225\324\t\310?\022\245\275\301\027&\303?\341\227\372yS\221\252?Z*oG8-\230?i\251\274\035\341\264\240?X\215%\254\215\261c?\024\313-\255\206\304\255?KTo\rl\225\240?\347\343\332P1\316\217?\000\251M\234\334\357\220?67\246\',\361\260?\300\004n\335\315S\235?\000\000\000\000\000\000\000\000AH\0260\201[\247?\n\364\211<I\272\266?,\361\200\262)W\230?i\251\274\035\341\264\260?h\313\271\024W\225\255?\240\375H\021\031V\261?u\002\232\010\033\236\256?H\205\261\205 \007\245?\354\335\037\357U+\263?#\333\371~j\274\304?\314\271\024W\225}\267?U\244\302\330B\220\243?Q\367\001Hm\342\244?\005\300x\006\r\375\223?\270@\202\342\307\230\253?VC\342\036K\037\252?\322\306\021k\361)\240?\322\251+\237\345y\270?\202[w\363T\207\214?\321\"\333\371~j\304?\372a\204\360h\343\260?\230\342\252\262\357\212\260?\347\005\330G\247\256\254?\237q\341@H\026\240?\001\331\353\335\037\357\205?\035\003\262\327\273?\266?=~o\323\237\375\260?t\230//\300>\232?\231\236\260\304\003\312\246?@\244\337\276\016\234\223?\230\342\252\262\357\212\260?\330\266(\263A&\231?\376\016E\201>\221\247?\235\014\216\222W\347\210?\230\335\223\207\205Z\243?\323\023\226x@\331\224?\034\266-\312l\220\261?\201\225C\213l\347\273?\232\231\231\231\231\231i?\306\305Q\271\211Zz?\266\204|\320\263Y\265?\212\032L\303\360\021\221?\'\210\272\017@j\223?&\344\203\236\315\252\277?iW!\345\'\325\256?o\273\320\\\247\221\246?\347Ws\200`\216\266?\'\245\240\333K\032\243?\214\020\036m\034\261\206?}\350\202\372\2269\235?\033G\254\305\247\000\230?\345,\354i\207\277\266?\217\344\362\037\322o\237?\376e\367\344a\241\206?8\370\302d\252`\244?aTR\'\240\211\220?t<f\2402\376\235?\370S\343\245\233\304\300?\344\275je\302/\225?\345a\241\3264\357\270?\030!<\3328b\265?u<f\2402\376\265?\007B\262\200\t\334\252?\014\223\251\202QI\275?z\307):\222\313\277?\252`TR\'\240\301?\377\3470_^\200\265?\206U\274\221y\344\267?>\005\300x\006\r\235?\362$\351\232\3117\263?\201!\253[=\'\235?\205\360h\343\210\265\260?R\203i\030>\"\266? ^\327/\330\r\233?\001\331\353\335\037\357\225?aTR\'\240\211\220?\007Z\201!\253[\235?\232\231\231\231\231\231y?K\352\0044\0216\234?_\007\316\031Q\332\273?pw\326n\273\320\214?\nc\013A\016J\250?\370\210\230\022I\364\262?\272\023\354\277\316Mk?B\3475v\211\352\255?_\357\376x\257Z\211?\344\210\265\370\024\000\243?\314E|\'f\275\270?\264\315\215\351\tK\234?|\270\344\270S:\270?\225H\242\227Q,\267?z6\253>W[\241?\251\276\363\213\022\364g?\360\371a\204\360h\243?A\016J\230i\373\207?\351>\000\251M\234\254?9J^\235c@\226?\203\305\341\314\257\346\260?\006\r\375\023\\\254\250?7\032\300[ A\241?\324+e\031\342X\227?\026\244\031\213\246\263\223?\032\335A\354L\241\223?\014\007B\262\200\t\214?\036\247\350H.\377\241?O#-\225\267#\214?333333\223?\253\317\325V\354/\273?\352\034\003\262\327\273\237?\374\251\361\322Mb\300?\265\246y\307):\222?l\220IF\316\302\216?O\227\305\304\346\343\212?`\256E\013\320\266j?\271lt\316Oql?9F\262G\250\031r?\016\023\rR\360\024\202?\245\362v\204\323\202\207?\rl\225`q8\223?\020\356\316\332m\027\232?\201\316\244M\325=\202?\000\000\000\000\000\000\000\000\263H\023\357\000Oz?`X\376|[\260t?\'1\010\254\034Z\264?\376}\306\205\003!\251?/\250o\231\323e\221?\005\243\222:\001M\244?H\371I\265O\307\263?\234\304 \260rh\241?U\301\250\244N@\303?2\341\227\372yS\221?\026\366\264\303_\223\225?\352x\314@e\374\233?\320_\350\021\243\347v?{\240\025\030\262\272\265?u\315\344\233mn\264?J\265O\307c\006\262?h\221\355|?5\236?x\316\026\020Z\017\177?BA)Z\271\027h?\227\213\370N\314z\201?\221D/\243Xn\271?A\366z\367\307{\225?\347\035\247\350H.\257?\223\030\004V\016-\222??5^\272I\014\302?\002\366\321\251+\237\245?\361\200\262)Wx\227?\t\376\267\222\035\033\241?[\261\277\354\236<\274?\244p=\n\327\243\240?@0G\217\337\333\224?b\200D\023(b\201?\343\337g\\8\020\242?\272\325s\322\373\306\227?\261mQf\203L\222?\225\016\326\3779\314\207?z\307):\222\313\277??\306\334\265\204|\310?I)\350\366\222\306\260?\377\255d\307F \216?\320I\357\033_{\246?\034\2240\323\366\257\254?\376\331\217\024\221a\225?\340bE\r\246a\230?\226>tA}\313\214?\325\005\274\314\260Qv?5)\005\335^\322\230?\"\303*\336\310<\222?o\360\205\311T\301\250?\265\037)\"\303*\216?\222\\\376C\372\355\263?\376\324x\351&1\300?\375\023\\\254\250\301\224?\010=\233U\237\253\265?\274\226\220\017z6\303?\331\311\340(yu\266?\205\0108\204*5\233?\252\361\322Mb\020\300?\301s\357\341\222\343\266?\261\205 \007%\314\224?6$\356\261\364\241\253?&X\034\316\374j\256?9\020\222\005L\340\206?=a\211\007\224M\231?x\177\274W\255L\260?\321\"\333\371~j\254?\006L\340\326\335<\225?X\255L\370\245~\236?\222\313\177H\277}\235?\300\004n\335\315S\235?[%X\034\316\374\252?\030`\037\235\272\362\231?g\354K6\036l\201?$#gaO;\234?\372\355\353\3009#\272?\327\206\212q\376&\224?\000\000\000\000\000\000\000\000\024:\257\261KT\267?<N\321\221\\\376\303?\327\250\207ht\007\241?\333\376\225\225&\245\240?\315@e\374\373\214\253?+0du\253\347\244?\234\326mP\373\255}?/\342;1\353\305\220?\227\220\017z6\253\276?\207m\2132\033d\222?\234\026\274\350+H\223?\267b\177\331=y\230?\177\023\n\021p\010\225?\274\221y\344\017\006\236?\002eS\256\360.\247?\312O\252}:\036\223?I\3642\212\345\226\266?\321\226s)\256*\233?\033/\335$\006\201\225?\023a\303\323+e\231?\347\303\263\004\031\001u?\0162\311\310Y\330\243?x#\363\310\037\014\234?\307\364\204%\036P\226?\221\'I\327L\276\211?\274\256_\260\033\266\265?\324\267\314\351\262\230\230?D\365\326\300V\t\206?X!\345\'\325>\215?T\343\245\233\304 \260?f,\232\316N\006\247?\210)\221D/\243\250?jj\331Z_$\224?d${\204\232!u?gI\200\232Z\266\226?\342\314\257\346\000\301\214?\346?\244\337\276\016\214?\'\302\206\247W\312\222?\316S\035r3\334\270?\013\315u\032i\251\234?\314\177H\277}\035\300?\303\273\\\304wb\266?Kvl\004\342u\235?\262)Wx\227\213\260?\327\022\362A\317f\225?\331\346\306\364\204%\236?_\235c@\366z\227?cz\302\022\017(\233?\001\030\317\240\241\177\242?uv28J^\255?O\256)\220\331Y\204?\033\273D\365\326\300\206?m\034\261\026\237\002\260?\340Jvl\004\342\245?\263v\333\205\346:\265?M\363\216St$\227?\301\312\241E\266\363\235?"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "q8\363\2539@\220?S\226!\216uq\213?4\205\316k\354\022\225?\312O\252}:\036\223?vO\036\026jM\223?E\201>\221\'I\207?\272\275\2441ZG\205?e\222\221\263\260\247\215?$EdX\305\033\211?\300\004n\335\315S\215?o)\347\213\275\027\177?\340\264\340E_A\212?\251\023\320D\330\360\244?\0221%\222\350e\224?\354\305PN\264\253\220?4\0216<\275R\206?gI\200\232Z\266\206?\252\t\242\356\003\220\212?\237\310\223\244k&\217?\003\t\212\037c\356\212?\206B\004\034B\225z?_\2235\352!\032\215?\344\017\006\236{\017\227?\340\204B\004\034B\205?M\363\216St$\207?\262)Wx\227\213\230?\215@\274\256_\260\213?\2132\033d\222\221\223?<\203\206\376\t.\206?B\262\200\t\334\272\213?,+MJA\267\207?\376\331\217\024\221a\205?\365\363\246\"\025\306\206?\331&\025\215\265\277\203?%\\\310#\270\221\202?\267b\177\331=y\210?\272\325s\322\373\306\207?J\200\232Z\266\326\207?\032\335A\354L\241\223?\325C4\272\203\330\211?b\240k_@/|?\006L\340\326\335<\205?l\354\022\325[\003\233?\370N\314z1\224\203?\002b\022.\344\021|?z6\253>W[\221?:\317\330\227l<x?\303\323+e\031\342\210?\002eS\256\360.w?V\361F\346\221?\210?X\255L\370\245~~?\325\257t><K\200?\374\251\361\322Mb\200?[\315:\343\373\342\202?[\315:\343\373\342\202?\032\213\246\263\223\301\201?\036\217\031\250\214\177\217?[|\n\200\361\014\212?\334\024\217\213j\021q?d\tkc\354\204w?=\363r\330}\307\200?\266\237\214\361a\366\202?\2613\205\316k\354\222?\336q\212\216\344\362\217?\263{\362\260Pk\212?V\361F\346\221?\210?kD0\016.\035\203?@\030x\356=\\\202?\374o%;6\002\241?\237]\276\365a\275\201?\346?\244\337\276\016\214?\275\030\312\211v\025\222?\277Hh\313\271\024\207?erjg\230\332\202?\000\343\0314\364O\200?\022\337\211Y/\206\222?\302\370i\334\233\337\200?Q\332\033|a2\225?>\355\360\327d\215\232?\245\243\034\314&\300\200?\362ba\210\234\276~?\373\"\241-\347R\214?Dio\360\205\311\224?\220\245\017]P\337\222?y\034\006\363W\310|?\206Z\323\274\343\024\215?\234\212T\030[\010\222?\372~j\274t\223\210?B&\0319\013{\212?\3127\333\334\230\236\220??\037e\304\005\240\201?v\303\266E\231\r\222?bJ$\321\313(\206?\010\000\216={.\203?\370\210\230\022I\364\222?\314\321\343\3676\375\211?\353V\317I\357\033\217?\033/\335$\006\201u?\177\302\331\255e2|?\357=\\r\334)\215?XSY\024vQ\204?\000\000\000\000\000\000\000\000C\345_\313+\327{?\365\363\246\"\025\306\206?\272LM\2027\244\201???\214\020\036m\214?\305wb\326\213\241\214?7\335\262C\374\303v?\023a\303\323+e\231?$\321\313(\226[z?\0260\201[w\363\204?9\326\305m4\200\227?\361\200\262)Wx\227?;\344f\270\001\237\217?\224\366\006_\230L\205?\345}\034\315\221\225\177?\303G\304\224H\242\227?\200C\250R\263\007\212?\362\260Pk\232w\214?\232\t\206s\r3\204?g\355\266\013\315uz?i\306\242\351\354d\220?\234P\210\200C\250\222?\372~j\274t\223\210?\340\204B\004\034B\205?\221\321\001I\330\267s?\003\225\361\3573.|?9@0G\217\337\213?t\272,&6\037\227?#\241-\347R\\\205?f\300YJ\226\223\200?\303\273\\\304wb\206?\206\000\340\330\263\347\202?\362\230\201\312\370\367\211?\246(\227\306/\274\202?j\030>\"\246D\202?0Bx\264q\304\212?\201\010q\345\354\235\201?\347\005\330G\247\256\234?\2201w-!\037\224?\000\000\000\000\000\000\000\000\330*\301\342p\346\207?\220kC\3058\177\203?\330\331\220\177f\020\177?9Cq\307\233\374v?A\202\342\307\230\273\206?\220\245\017]P\337\222?\274\035\341\264\340E\217?\301\220\325\255\236\223\216?@\333j\326\031\337w?\351\016bg\n\235\207?<\367\036.9\356\204?\017\227\034wJ\007\253?\366\320>V\360\333\200?\206\306\023A\234\207\203?\347\371\323Fu:\200?\265l\255/\022\332\222?A\202\342\307\230\273\206?\037\237\220\235\267\261y?\311\251\235ajKm?\017\326\3779\314\227\207?\351>\000\251M\234\234?\311^\357\376x\257\212?\221\017z6\253>\207?\3127\333\334\230\236\220?\007\257]\332pXz?\356[\255\023\227\343u?\261\033\266-\312l\220?\3058\177\023\n\021\220?B~6r\335\224\202?\355\231%\001jj\211?\314\265h\001\332V\203?F%u\002\232\010\213?\275\306.Q\2755\220?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\215(\355\r\2760\231?\306PN\264\253\220\222?\242\010\251\333\331W^?\242\010\251\333\331W~?\355\231%\001jj\211?\353\377\034\346\313\013\220?\321\347\243\214\270\000\204?\271\031n\300\347\207\221?P\345\264\247\344\234x?X\215%\254\215\261c?]n0\324a\205{?0*\251\023\320D\210?\345\'\325>\035\217y?f\272\327I}Yz?\035\376\232\254Q\017\221?\347\030\220\275\336\375\221?\000\000\000\000\000\000\000\000 ^\327/\330\r\213?\234\026\274\350+H\223?\312\375\016E\201>\201?\016\2760\231*\030\225?\373\256\010\376\267\222\215?\340(yu\216\001\211?\274^\232\"\300\351}?\324+e\031\342X\207?\226\262\014q\254\213\213?\256\266b\177\331=\231?\215\264T\336\216p\212?\006L\340\326\335<\205?&p\353n\236\352\200?\271Qd\255\241\324~?Ve\337\025\301\377\206?Mjh\003\260\001\201?\253z\371\235&3~?\216\006\360\026HP\234?\274\254\211\005\276\242{?pw\326n\273\320\214?\354\206m\2132\033\244?~\251\2377\025\251\220?O\257\224e\210c\215?\3274\3578EG\222?\001\331\353\335\037\357\205?\271\031n\300\347\207\221?\371f\233\033\323\023\206?\"\304\225\263wF{?\254\250\3014\014\037\201?\251\240\242\352W:\177?}\317H\204F\260\201?J#f\366y\214\202?J\230i\373WV\212?\033\326T\026\205]t?\235\200&\302\206\247\207?}\002(F\226\314\201?\336\345\"\276\023\263\216?\325[\003[%X\214?\232\231\231\231\231\231i?s\267\353\245)\002l?\016J\230i\373W\206?$\265P29\265\203?\344\3676\375\331\217\204?m\2132\033d\222\221??\214\020\036m\034\221?\333\205\346:\215\264\204?O#-\225\267#\214?I\3642\212\345\226\206?\234/\366^|\321n?)\320\'\362$\351\212?s\242]\205\224\237\204?\0059(a\246\355\217?\334\235\265\333.4\207?a\027E\017|\014v?\346?\244\337\276\016\214?\300`7l[\224y?\230i\373WV\232\204?\203\372\2269]\026\223?\'\302\206\247W\312\202?\036\334\235\265\333.\224?\325C4\272\203\330\211?\030`\037\235\272\362\211?\007\010\346\350\361{\213?\353V\317I\357\033\217?\234.\213\211\315\307\225?\362\310\037\014<\367\236?<\367\036.9\356\204?\301\305\212\032L\303\200?\022\267\nb\240k\177?\376\237\303|y\001\226?\362\316\241\014U1u?\323Mb\020X9\204?\032\027\016\204d\001\203?\243#\271\374\207\364\213?\371G\337\244iP\204?=\'\275o|\355y?\312\303B\255i\336\221?\177\201 @\206\216m?\302\204\321\254l\037\202?\270\252\354\273\"\370\217?\253Z\322Q\016f\203?\257A_z\373s\201?\036\026jM\363\216\223?\272\023\354\277\316Mk?.\347R\\U\366\215?\310\010\250p\004\251t?#\241-\347R\\\205?B&\0319\013{\212?\327\372\"\241-\347\222?\336\345\"\276\023\263\216?\246~\336T\244\302\210?\'\374R?o*\222?\251\276\363\213\022\364g?\rT\306\277\317\270\220?\307F ^\327/x?&\0319\013{\332\241?fd\220\273\010S\204?\035\261\026\237\002`\234?\345\233mnLO\210?\002eS\256\360.\207?\017\200\270\253W\221\201?\351,\263\010\305V\200?\037Q\241\272\271\370{?\211\231}\036\243<\203?\300\004n\335\315S\215?\203\337\206\030\257yu?\232\231\231\231\231\231\211?\255n\365\234\364\276\221?\010\224M\271\302\273\214?3\371f\233\033\323\223?\230J?\341\354\326\202?v\301\340\232;\372\177?\274\3222R\357\251|?\002\364\373\376\315\213c?\271lt\316Oql?L\376\'\177\367\216j?)!XU/\277s?\331?O\003\006I\177?\005\343\340\3221\347y?Mg\'\203\243\344\205?\033J\355E\264\035s?\000\000\000\000\000\000\000\000\366#EdX\305k?`X\376|[\260t?b\326\213\241\234h\207?\033\231G\376`\340\231?\307\272\270\215\006\360\206?;\344f\270\001\237\217?\013\357r\021\337\211\211?\333\205\346:\215\264\204?\014\007B\262\200\t\214?\027c`\035\307\017u?\227\214c${\204z?FXT\304\351${?\324|\225|\354.p?\246\"\025\306\026\202\214?\nc\013A\016J\210?\305\003\312\246\\\341\215?\370\341 !\312\027\204?A\235\362\350FXt?BA)Z\271\027h?`\256E\013\320\266z?]\247\221\226\312\333\221?.\347R\\U\366}?\r\246a\370\210\230\222?t\236\261/\331x\200?\023\355*\244\374\244\212?\242\013\352[\346t\211?v\375\202\335\260m\201?\001M\204\rO\257\204?\312\211v\025R~\222?\241\363\032\273D\365\206?\320\320?\301\305\212\212?\340\020\252\324\354\201v?\231\365b(\'\332\205?\256|\226\347\301\335y?\317\240\241\177\202\213\205?\245\244\207\241\325\311y?\033\201x]\277`\227?\213\345\226VC\342\216?7\340\363\303\010\341\221?\377\255d\307F \216?\375M(D\300!\224?\240O\344I\3225\223?\212\\p\006\177\277x?\325s\322\373\306\327\216?O\227\305\304\346\343z?+N\265\026f\241m?\3167\242{\3265z?m\003w\240Ny\204?\234hW!\345\'\205?\315\223k\ndvv?yu\216\001\331\353\215?\362\230\201\312\370\367\231?\265\306\240\023B\007}?k\324C4\272\203\210?\377\255d\307F \216?\332\341\257\311\032\365\220?rP\302L\333\277\202?\342@H\0260\201\213?B\232\261h:;\211?\030`\037\235\272\362y?\221\233\341\006|~\210?1 {\275\373\343\235?\314\007\004:\2236u?\357\221\315U\363\034\201?y]\277`7l\213?J\200\232Z\266\326\207?\246\"\025\306\026\202|?\212\032L\303\360\021\221?\365g?RD\206\205?\256\016\200\270\253W\201?\301\377V\262c#\220?\245f\017\264\002C\206?f\237\307(\317\274|?\203L2r\026\366\224?Y\213O\0010\236\241?+\302MF\225a|?\000\000\000\000\000\000\000\000\234\376\354G\212\310\220?\377\t.V\324`\212?\211\262\267\224\363\305~?rP\302L\333\277\202?V\225}W\004\377\213?\325[\003[%X\214?: \t\373v\022q?\360\301k\2276\034v?\365g?RD\206\205?\274\010S\224K\343w?\344\203\236\315\252\317\205?\226\227\374O\376\356}?\016\2760\231*\030\205?\235\200&\302\206\247\207?\335@\201w\362\351\201?-\317\203\273\263v\213?\254\255\330_vO\216?j\274t\223\030\004\206?\215\317d\377<\rx?l]j\204~\246~?\347\303\263\004\031\001u?\221\233\341\006|~\210?\331\315\214~4\234\202?]\000\032\245K\377\202?\327\241\232\222\254\303\201?\272\203\330\231B\347\225?G\313\201\036j\333\200?\343\2167\371-:y?\177h\346\3115\005\202?vq\033\r\340-\220?\243\227Q,\267\264\212?\020\356\316\332m\027\212?\317\240\241\177\202\213\205?{O\345\264\247\344l?\211\265\370\024\000\343\211?\327\022\362A\317f\205?\000\344\204\t\243Yy?L\300\257\221$\010w?9\020\222\005L\340\226?\330*\301\342p\346\207?\036\026jM\363\216\223?\272\245\325\220\270\307\222?\212\347l\001\241\365\200?\305v\367\000\335\227\203?\367\312\274U\327\241z?\301\344F\221\265\206\202?\354\244\276,\355\324|?D\365\326\300V\t\206?\230Q,\267\264\032\222?\202n/i\214\326\221?\345B\345_\313+w?\033\273D\365\326\300\206?9\230M\200a\371\203?\261\341\351\225\262\014\221?A\202\342\307\230\273\206?OV\014W\007@|?\023\177\024u\346\036\202?"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\007\360\026HP\374\320?\003+\207\026\331\316\307?\264\310v\276\237\032\317?{\024\256G\341z\320?\315\314\314\314\314\314\304?\233\346\035\247\350H\306?_)\313\020\307\272\310?\t\371\240g\263\352\303?\222\355|?5^\312?}?5^\272I\314?\360\247\306K7\211\271?_\272I\014\002+\307?u\002\232\010\033\236\306?h\"lxz\245\274?lxz\245,C\314?\'\240\211\260\341\351\305?F\224\366\006_\230\304?\177\373:p\316\210\312?Tt$\227\377\220\316??\306\334\265\204|\300?\023\355*\244\374\244\262?\0329\013{\332\341\257?\376e\367\344a\241\316?e\031\342X\027\267\311?7\211A`\345\320\312?R\270\036\205\353Q\320?\014\223\251\202QI\321?\337O\215\227n\022\303?c\356ZB>\350\311?\302\027&S\005\243\302?\235\200&\302\206\247\307?\265\025\373\313\356\311\303?\025\035\311\345?\244\307?\014\002+\207\026\331\306?$\271\374\207\364\333\307?\367\344a\241\3264\307?\366\227\335\223\207\205\302?_\322\030\255\243\252\251?\253\347\244\367\215\257\235?\020\351\267\257\003\347\314?\362\260Pk\232w\274?\265\246y\307):\302?EGr\371\017\351\317?\360\026HP\374\030\303?6\315;N\321\221\304?\000\221~\373:p\316?\340\264\340E_A\232?}\320\263Y\365\271\312?\301\305\212\032L\303\260?\rq\254\213\333h\300?\276\301\027&S\005\243?\355\330\010\304\353\372\265?\347\306\364\204%\036\260?\366(\\\217\302\365\300?/\335$\006\201\225\303?\tUj\366@+\260?\026\373\313\356\311\303\312?(\017\013\265\246y\307?\033\273D\365\326\300\206?\307\327\236Y\022\240\246?E_A\232\261h\232?\031x\356=\\r\234?\014\002+\207\026\331\306?$\356\261\364\241\013\252?I.\377!\375\366\305?\360\205\311T\301\250\304?t)\256*\373\256\260?\304|y\001\366\321\261?ffffff\306?\223\221\263\260\247\035\256?.\220\240\3701\346\306?\376\267\222\035\033\201\250?\312T\301\250\244N\310?\335\265\204|\320\263\301?\317f\325\347j+\266?\333\371~j\274t\303?K^\235c@\366\262?\362A\317f\325\347\312?\"\216uq\033\r\320?\230\206\341#bJ\264?\312\253s\014\310^\257?\006\022\024?\306\334\305?E\330\360\364JY\322?\343\307\230\273\226\220\307?D\335\007 \265\211\263?\334h\000o\201\004\305?\\\217\302\365(\\\277?(~\214\271k\t\311?\014\002+\207\026\331\276?R\'\240\211\260\341\301?+Ral!\310\261?j\336q\212\216\344\302?\252`TR\'\240\271?\377[\311\216\215@\264?\337O\215\227n\022\313?\030\225\324\th\"\304?\223\221\263\260\247\035\256?\340bE\r\246a\230?S\313\326\372\"\241\265?\325x\351&1\010\304?\254\255\330_vO\276?\000\000\000\000\000\000\000\000\331\010\304\353\372\005\263?\332\341\257\311\032\365\270?\240T\373t<f\240?$(~\214\271k\311?\347\035\247\350H.\277?\225\331 \223\214\234\265?:\264\310v\276\237\322?\032L\303\360\0211\265?\310$#gaO\253?}?5^\272I\274?\335$\006\201\225C\303?\265\253\220\362\223j\257?\341z\024\256G\341\272?>\355\360\327d\215\262?\251\207ht\007\261\243?\374\030s\327\022\362\311?\267\321\000\336\002\t\312?\274t\223\030\004V\276?\220,`\002\267\356\266?\350\331\254\372\\m\305?\274\005\022\024?\306\314?\031s\327\022\362A\277?\262\272\325s\322\373\266?\303_\2235\352!\252?\027\267\321\000\336\002\301?\347\035\247\350H.\277?-C\034\353\3426\302?\317f\325\347j+\306?h\005\206\254n\365\264?\251\244N@\023a\303?\t\033\236^)\313\300?\0216<\275R\226\301?\273\'\017\013\265\246\301?P\307c\006*\343\267?\202n/i\214\326\261?4K\002\324\324\262\265?-!\037\364lV\305?\227\312\333\021N\013\266?\000\000\000\000\000\000\000\000\305\2171w-!\277?38J^\235c\260?c\356ZB>\350\271?a\375\237\303|y\241?\254s\014\310^\357\256?\254\034Zd;\337\307?\243\222:\001M\204\265?\362\260Pk\232w\304?\305\254\027C9\321\256?\347\306\364\204%\036\260?\226x@\331\224+\264?\007\316\031Q\332\033\304?q\261\242\006\3230\254?\372a\204\360h\343\270?\367\257\2544)\005\265?1\010\254\034Zd\303?\361.\027\361\235\230\265?\226C\213l\347\373\261?w\370k\262F=\244?\310\315p\003>?\264?\311\345?\244\337\276\306?4\242\2647\370\302\314?\'\367;\024\005\372\264?\363\037\322o_\007\316?Kvl\004\342u\255?\376\016E\201>\221\247?Y\027\267\321\000\336\302?\363\037\322o_\007\306?)\313\020\307\272\270\265?\265q\304Z|\n\270?\030\004V\016-\262\275?mV}\256\266b\307?\262\021\210\327\365\013\246?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\232\010\033\236^\271??5^\272I\014\312?\266\237\214\361a\366\202?Y\2068\326\305m\244?\025\214J\352\0044\321?\334\327\201sF\224\322?\013$(~\214\271\303?\347\306\364\204%\036\260?mV}\256\266b\277?Ih\313\271\024W\205?\007\316\031Q\332\033\304?\030\225\324\th\"\274?\262\021\210\327\365\013\246?,\324\232\346\035\247\250?\037\364lV}\256\306?9\177\023\n\021p\250?\000\000\000\000\000\000\000\000[B>\350\331\254\302?%u\002\232\010\033\306?\206Z\323\274\343\024\265?`vO\036\026j\305?T\035r3\334\200\267?\006\022\024?\306\334\305?I\235\200&\302\206\307?\332\316\367S\343\245\273?\031\342X\027\267\321\310?\222\313\177H\277}\321?\207\247W\3122\304\311?\226C\213l\347\373\271?\021\307\272\270\215\006\300?\351>\000\251M\234\254?\346?\244\337\276\016\274?\336\223\207\205Z\323\274?\345\320\"\333\371~\272?\372~j\274t\223\310?\246\',\361\200\262\261?\321\"\333\371~j\304?\030\225\324\th\"\274?\037\364lV}\256\306?@\023a\303\323+\305?\247\350H.\377!\275?\016\303G\304\224H\242?\262\235\357\247\306K\307?\315\314\314\314\314\314\304?s\242]\205\224\237\264?\241\3264\3578E\267?%\006\201\225C\213\254?\003\t\212\037c\356\302?I)\350\366\222\306\270?O@\023a\303\323\273?^\327/\330\r\333\246?\273\'\017\013\265\246\301?i\221\355|?5\276?X\2505\315;N\311?\365\333\327\201sF\320?\334K\032\243uT\225?\222W\347\030\220\275\236?\304\261.n\243\001\304?\224\373\035\212\002}\262?\211\315\307\265\241b\264?F\224\366\006_\230\320?\345\320\"\333\371~\302?\321\350\016bg\n\265?\304B\255i\336q\312?\263\200\t\334\272\233\267?\220\367\252\225\t\277\244?\347\035\247\350H.\277?P\0010\236AC\257?M\025\214J\352\004\304?\312\375\016E\201>\261?5\3578EGr\251?\263\352s\265\025\373\303?\265\253\220\362\223j\257?\324\267\314\351\262\230\270?\213l\347\373\251\361\312?T\251\331\003\255\300\260?]\334F\003x\013\320?i\000o\201\004\305\307?\0216<\275R\226\311?\0216<\275R\226\301?*\251\023\320D\330\310?\234\242#\271\374\207\314?\3019#J{\203\317?\017\013\265\246y\307\311?)\313\020\307\272\270\305?\206Z\323\274\343\024\265?\036\026jM\363\216\303?\001\331\353\335\037\357\265?\023a\303\323+e\311?\352\0044\0216<\305?\230\206\341#bJ\264?\000\035\346\313\013\260\257?\325\347j+\366\227\255?j\274t\223\030\004\266?T\214\3637\241\020\241?ffffff\266?\343\307\230\273\226\220\307?|\355\231%\001j\252?\206Z\323\274\343\024\275?I\327L\276\331\346\266?\033\273D\365\326\300\206?q\033\r\340-\220\300?\007_\230L\025\214\252?\332\247\3431\003\225\271?g\325\347j+\366\307?b\241\3264\3578\265?\336\223\207\205Z\323\314?\317f\325\347j+\306?\267\321\000\336\002\t\272?\377\316\366\350\r\367\201?\305 \260rh\221\275?\232\3534\322Ry\253?\200\016\363\345\005\330\267?\373\343\275je\302\257?\372\355\353\3009#\272?W\354/\273\'\017\303?F%u\002\232\010\273?\365\271\332\212\375e\267?\351\324\225\317\362<\260?\206 \007%\314\264\255?\264T\336\216pZ\240?\370\302d\252`T\262?f\210c]\334F\263?\000\000\000\000\000\000\240?\362\322Mb\020X\311?\205\353Q\270\036\205\263?\223\251\202QI\235\310?\2377\025\2510\266\260?\024\\\254\250\3014\254?,\324\232\346\035\247\250?\232\231\231\231\231\231\231?\031x\356=\\r\214?\376e\367\344a\241\226?\275\030\312\211v\025\242?\206=\355\360\327d\255?\335<\325!7\303\255?G=D\243;\210\265?\334F\003x\013$\250?\000\000\000\000\000\000\000\000\246\"\025\306\026\202\234?e\245I)\350\366\222?A\202\342\307\230\273\306?\035Zd;\337O\275?\034wJ\007\353\377\234?R~R\355\323\361\270?=\n\327\243p=\302?\305 \260rh\221\275?\311v\276\237\032/\321?\031x\356=\\r\254?\347\005\330G\247\256\254?G\003x\013$(\256?\305wb\326\213\241\234?lxz\245,C\304?\257%\344\203\236\315\272?z6\253>W[\311?x(\n\364\211<\271?\333\205\346:\215\264\224?\212\032L\303\360\021\221?\334\242\314\006\231d\244?mV}\256\266b\307?\301\312\241E\266\363\255?-C\034\353\3426\312?\210)\221D/\243\260?\0054\0216<\275\312?a\303\323+e\031\302?Dio\360\205\311\264?\205\353Q\270\036\205\273?w\276\237\032/\335\314?\375M(D\300!\264?@0G\217\337\333\244?lC\3058\177\023\252?\210c]\334F\003\300?\301\305\212\032L\303\260?\273\233\247:\344f\250?Q\240O\344I\322\245?\207\026\331\316\367S\313?3\304\261.n\243\321?\016O\257\224e\210\303?\333\277\262\322\244\024\244?Gr\371\017\351\267\267?C\034\353\3426\032\300?\031x\356=\\r\254?\340bE\r\246a\250?\256|\226\347\301\335\251?\347\214(\355\r\276\220?t\260\376\317a\276\254?\272\275\2441ZG\265?%\001jj\331Z\267?\211\265\370\024\000\343\261?d;\337O\215\227\306?\226\262\014q\254\213\313?\321W\220f,\232\266?\262\235\357\247\306K\307?\305\2171w-!\317?\274\005\022\024?\306\314?r\205w\271\210\357\264?|a2U0*\311?F%u\002\232\010\313?\211\265\370\024\000\343\261?\210c]\334F\003\300?\215\227n\022\203\300\302?\014v\303\266E\231\255?$\227\377\220~\373\272?e\252`TR\'\320?;p\316\210\322\336\300?\265\375++MJ\261?\243#\271\374\207\364\273?\267(\263A&\031\271?y\344\017\006\236{\267?\023a\303\323+e\301?\365\271\332\212\375e\267?\355dp\224\274:\247?w\241\271N#-\265?\\\217\302\365(\\\307?\207\341#bJ$\261?\000\000\000\000\000\000\000\000\022\245\275\301\027&\313?q\254\213\333h\000\317?\265q\304Z|\n\260?\377[\311\216\215@\264?)\355\r\2760\231\302?\006L\340\326\335<\265?\031x\356=\\r\254?y]\277`7l\253?k\232w\234\242#\311?\265\340E_A\232\261?&p\353n\236\352\260?\323\331\311\340(y\265?|\233\376\354G\212\250?q\261\242\006\3230\264?\020\351\267\257\003\347\274?\260w\177\274W\255\254?\277}\0358gD\311?\273\233\247:\344f\270?\334\364g?RD\266?\331\010\304\353\372\005\263?\340\264\340E_A\232?\347\214(\355\r\276\300?\242E\266\363\375\324\260?\201!\253[=\'\265?vO\036\026jM\243?\377\262{\362\260P\313?YLl>\256\r\265?\262\021\210\327\365\013\246?\035\376\232\254Q\017\261?\257\224e\210c]\274?}?5^\272I\274?\246\nF%u\002\302?\002Hm\342\344~\247?E_A\232\261h\232?\023\362A\317f\325\267?\232\010\033\236^)\263?\333\205\346:\215\264\244?\312\211v\025R~\242?\256G\341z\024\256\317?Y\027\267\321\000\336\262?\306\334\265\204|\320\313?\006\022\024?\306\334\305?d\006*\343\337g\264?mV}\256\266b\307?G8-x\321W\260?1%\222\350e\024\263?G\003x\013$(\256?\177\023\n\021p\010\265?\201\225C\213l\347\303?\212\037c\356ZB\306?\332\341\257\311\032\365\240?\033\273D\365\326\300\226?\331\316\367S\343\245\303?\332\254\372\\m\305\276?\235\357\247\306K7\311?M\241\363\032\273D\265?V\324`\032\206\217\270?"
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\367\344a\241\3264\323?\002\274\005\022\024?\266?\277}\0358gD\311?.\220\240\3701\346\316?\362\322Mb\020X\311?\302\206\247W\3122\304?\356ZB>\350\331\274?\013\200\361\014\032\372\267?z\307):\222\313\307?\016\2760\231*\030\315?\025\2510\266\020\344\240?\263\322\244\024t{\271?;\337O\215\227n\312?\376`\340\271\367p\271?\314]K\310\007=\313?B>\350\331\254\372\304?\003\t\212\037c\356\262?{\203/L\246\n\306?\003\t\212\037c\356\302?\035\376\232\254Q\017\261?\210\235)t^c\247?\370;\024\005\372D\236?\240\211\260\341\351\225\312?\367\006_\230L\025\274?\205\353Q\270\036\205\303?\234\242#\271\374\207\314?=\n\327\243p=\302?\337O\215\227n\022\303?\264Y\365\271\332\212\305?H\341z\024\256G\271?\220\240\3701\346\256\315?\347\035\247\350H.\277?\307\272\270\215\006\360\316?\331=yX\2505\305?io\360\205\311T\301?7\032\300[ A\301?\303\323+e\031\342\300?\007|~\030!<\232? F\010\2176\216\230?\274\226\220\017z6\273?\233U\237\253\255\330\237?}\320\263Y\365\271\272?\2343\242\2647\370\312?L\032\243uT5\271?\024\005\372D\236$\265?\277}\0358gD\311?\337T\244\302\330B\220?mV}\256\266b\277?r\376&\024\"\340\260?\211Fw\020;S\250?G\376`\340\271\367\220?\2073\277\232\003\004\223?\213\370N\314z1\224?\037\364lV}\256\306?\204%\036P6\345\252?\021\036m\034\261\026\237?\345a\241\3264\357\300?\351\267\257\003\347\214\300?\021\3435\257\352\254F?{\332\341\257\311\032\225?\027\274\350+H3\206?\270\036\205\353Q\270\236?\207\026\331\316\367S\313?)t^c\227\250\256?\377!\375\366u\340\274?\017\2343\242\2647\300?\313-\255\206\304=\226?vl\004\342u\375\242?\325x\351&1\010\324?\207P\245f\017\264\242?\332\316\367S\343\245\273?\016g~5\007\010\266?\177\331=yX\250\305?\377x\257Z\231\360\263?\2446qr\277C\241?\374o%;6\002\271?\320\'\362$\351\232\261?<\275R\226!\216\305?\021\307\272\270\215\006\330?\323jH\334c\351\243?od\036\371\203\201\247?\260\003\347\214(\355\275?\002\232\010\033\236^\325?\t\033\236^)\313\310?\252\366\351x\314@\245?J\014\002+\207\026\301?\373:p\316\210\322\276?\'\302\206\247W\312\302?\353s\265\025\373\313\256?\372\'\270XQ\203\271?2r\026\366\264\303\237?\232w\234\242#\271\274?\374\214\013\007B\262\240?\360\242\257 \315X\244?\303\365(\\\217\302\305?\215\227n\022\203\300\302?V}\256\266b\177\231?\037Q\241\272\271\370{?A\366z\367\307{\245?b\234\277\t\205\010\270?\024\256G\341z\024\266?\000\000\000\000\000\000\000\000\273\233\247:\344f\230?\212\253\312\276+\202\257?\227\220\017z6\253\236?n4\200\267@\202\312?a\303\323+e\031\262?\216z\210Fw\020\233?\356\353\3009#J\333?\361{\233\376\354G\252?\251\2377\025\2510\246?\335$\006\201\225C\273?\200H\277}\0358\323?\025\306\026\202\034\224\260?\234hW!\345\'\245?D\3058\177\023\n\241?\020\344\240\204\231\266\267?n\022\203\300\312\241\305?vO\036\026jM\313?$\264\345\\\212\253\262?z\374\336\246?\373\241?J{\203/L\246\302?\377\262{\362\260P\333?4\364Op\261\242\266?I\242\227Q,\267\264?\206Z\323\274\343\024\215?W\354/\273\'\017\253?\353\034\003\262\327\273\267?\247\350H.\377!\275?}?5^\272I\320?\352\0044\0216<\235?\026\373\313\356\311\303\302?l\t\371\240g\263\272?N\321\221\\\376C\262?\243\222:\001M\204\275?\002\016\241J\315\036\250?\207m\2132\033d\242?\217\374\301\300s\357\241?\373\\m\305\376\262\303?\320\325V\354/\273\247?\000\000\000\000\000\000\000\000\254\377s\230//\270?\261\205 \007%\314\224?\002\267\356\346\251\016\251?w\363T\207\334\014\227?\255\372\\m\305\376\242?\352\0044\0216<\305?^\272I\014\002+\267?`YiR\n\272\265?\000\3500_^\200\235?X\034\316\374j\016\240?\324\232\346\035\247\350\300?_\230L\025\214J\332?\316\024:\257\261K\224?C9\321\256B\312\267?\3711\346\256%\344\243?X9\264\310v\276\307?\221\355|?5^\252?\213\370N\314z1\224?\252}:\0363Pi?0\266\020\344\240\204\261?C\255i\336q\212\276?\"\216uq\033\r\320?t$\227\377\220~\253?m\305\376\262{\362\300?\3431\003\225\361\357\223?\320\n\014Y\335\352\231?sK\253!q\217\265?Qk\232w\234\242\313?\023\355*\244\374\244\232?\265\333.4\327i\244?t<f\2402\376\255?\246\nF%u\002\312?5c\321tv2\230?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_)\313\020\307\272\300?O\036\026jM\363\306?\303_\2235\352!Z?}(\321\222\307\323\202?V\237\253\255\330_\322?\023\362A\317f\325\317?\214E\323\331\311\340\260?L\253!q\217\245\257?\205\353Q\270\036\205\253?\273\272c\261M*Z?}\005i\306\242\351\264?\306\371\233P\210\200\243?\362F\346\221?\030\230?;k\267]h\256\243?z6\253>W[\311?u\216\001\331\353\335\237?\000\000\000\000\000\000\000\000-\262\235\357\247\306\273?)\313\020\307\272\270\305?j\207\277&k\324\243?\356|?5^\272\301?[\261\277\354\236<\274?\024?\306\334\265\204\274?i\221\355|?5\276?U\366]\021\374o\245?\366\227\335\223\207\205\272?\007_\230L\025\214\326?\032\300[ A\361\303?\003x\013$(~\264?\207\026\331\316\367S\263?z\374\336\246?\373\221?\230n\022\203\300\312\261?\233\346\035\247\350H\266?\265\037)\"\303*\256?\312\241E\266\363\375\304?\242]\205\224\237T\233??\306\334\265\204|\324?+\366\227\335\223\207\305?%\006\201\225C\213\274?\r\032\372\'\270X\271?\"7\303\r\370\374\260?\216\222W\347\030\220\255?\271\215\006\360\026H\300?\035Zd;\337O\275?\234\334\357P\024\350\243?\2201w-!\037\264?\230Q,\267\264\032\222?>\350\331\254\372\\\275?mQf\203L2\242?\346\313\013\260\217N\255?5\016\365\273\2605{?,\324\232\346\035\247\260?\362\352\034\003\262\327\253?\031\004V\016-\262\305?\246\233\304 \260r\310?\rT\306\277\317\270\220?A\235\362\350FXt?\3711\346\256%\344\303?&p\353n\236\352\220?S\256\360.\027\361\215?\366(\\\217\302\365\310?\204\201\347\336\303%\267?[\261\277\354\236<\274?\372\355\353\3009#\302?\273\270\215\006\360\026\250?\251\331\003\255\300\220\205?\306\334\265\204|\320\303?\006G\311\253s\014\250?\265\246y\307):\312?\226\267#\234\026\274\250?\027\274\350+H3\246?\0216<\275R\226\301?\007*\343\337g\\\230?bJ$\321\313(\246?z6\253>W[\321?l\354\022\325[\003\233?\307\272\270\215\006\360\316?\2068\326\305m4\300?\273\'\017\013\265\246\301?\035\376\232\254Q\017\271?\204\236\315\252\317\325\306?K\310\007=\233U\317?\026jM\363\216S\324?\357\311\303B\255i\306?S\226!\216uq\303?C\004\034B\225\232\235?Pp\261\242\006\323\270?\005/\372\n\322\214\245?\212\310\260\21272\267?V}\256\266b\177\301?\232\r2\311\310Y\260?\323\023\226x@\331\244?+\207\026\331\316\367\243?8\204*5{\240\265?\031\004V\016-\262}?\326\305m4\200\267\240?\177j\274t\223\030\314?I\3642\212\345\226\206?\222\350e\024\313-\255?\226\255\365EB[\256?\265/\240\027\356\\X?\234\242#\271\374\207\264?3\277\232\003\004s\224?\220,`\002\267\356\246?\202\342\307\230\273\226\310?\351H.\377!\375\226?U0*\251\023\320\304?\345a\241\3264\357\310?%\006\201\225C\213\274?~t\352\312gy^?\206\376\t.V\324\260?M\363\216St$\227?=\362\007\003\317\275\267?\215b\271\245\325\220\230?\254\213\333h\000o\301?\357\311\303B\255i\256?\3019#J{\203\257?\274y\252Cn\206\233?\377\t.V\324`\212?0\022\332r.\305\205?\252}:\0363P\211?t$\227\377\220~\233?\362\322Mb\020X\231?x\013$(~\214\231?\2201w-!\037\314?\316\031Q\332\033|\261?b\241\3264\3578\315?\022\017(\233r\205\227?\254\250\3014\014\037\241?f1\261\371\2706\224?-\221\013\316\340\357W?\230\375\272\323\235\'n?\250\377\254\371\361\227f?\030~p>u\254r?\275\306.Q\2755\220?\211Y/\206r\242\215?\220\367\252\225\t\277\244?V\225}W\004\377\213?\000\000\000\000\000\000\000\000:\254p\313GRr?Ve\337\025\301\377\206?!\260rh\221\355\274?H\341z\024\256G\311?\007\010\346\350\361{\213?\2716T\214\3637\261?\305 \260rh\221\275?\333\371~j\274t\243?\321\"\333\371~j\320?\354i\207\277&k\224?~\306\205\003!Y\240?P\374\030s\327\022\222?&\253\"\334dTY?z\245,C\034\353\302?\202sF\224\366\006\307?\373:p\316\210\322\276?S\n\272\275\2441\262?\264X\212\344+\201t?7\225\373\323\374\347O?\221}\220e\301\304\177?vO\036\026jM\303?\245\210\014\253x#\243?\211A`\345\320\"\273?J\3225\223o\266\231?\264Y\365\271\332\212\315?:\006d\257w\177\264?sK\253!q\217\265?6$\356\261\364\241\253?\233U\237\253\255\330\307?\303i\301\213\276\202\244?/Q\2755\260U\242?l\220IF\316\302~?\017\326\3779\314\227\247?\256B\312O\252}\232?A\016J\230i\373\207?\254u\342r\274\002\201?J{\203/L\246\322?<\275R\226!\216\325?\004V\016-\262\235\277?\033\236^)\313\020\247?\222\355|?5^\272?KTo\rl\225\270?l\220IF\316\302\216?$\234\026\274\350+\250?\034\353\3426\032\300\233?}!\344\274\377\217S?\254\250\3014\014\037\241?\274y\252Cn\206\233?Pu\310\315p\003\256?\241-\347R\\U\226?.\305Ue\337\025\271?S\005\243\222:\001\305?\006\330G\247\256|\246?\237<,\324\232\346\275?K\310\007=\233U\317?\347\035\247\350H.\307?\036\341\264\340E_\241?_)\313\020\307\272\310?\226\262\014q\254\213\303?x\321W\220f,\232?\273a\333\242\314\006\261?\311v\276\237\032/\315?\200C\250R\263\007\212?\214g\320\320?\301\245?\346\256%\344\203\236\305?\323Mb\020X9\264?\272\337\241(\320\'\242?h?RD\206U\264?\265\037)\"\303*\256?\002`<\203\206\376\251?\nh\"lxz\265?\303\231_\315\001\202\261?\251\023\320D\330\360\224?\017\013\265\246y\307\271?\340\234\021\245\275\301\307?\251\207ht\007\261\223?\000\000\000\000\000\000\000\000\2068\326\305m4\310?\226C\213l\347\373\321?[\r\211{,}\250?\301\262\322\244\024t\233?I.\377!\375\366\265?z\245,C\034\353\262?\366#EdX\305\233?\020\314\321\343\3676\235?\rq\254\213\333h\324?\311^\357\376x\257\232?\241\276eN\227\305\244?r\376&\024\"\340\240?\361.\027\361\235\230\225?\252}:\0363P\251?)\\\217\302\365(\254?\223\035\033\201x]\257?\311\345?\244\337\276\276?T\306\277\317\270p\240?:\006d\257w\177\234?T:X\377\3470\237?\001\336\002\t\212\037\243?\345\'\325>\035\217\261?\256*\373\256\010\376\247?\013\265\246y\307)\232?\203L2r\026\366\224?\354\3009#J{\303?\355\r\2760\231*\230?e\337\025\301\377V\202?\367\006_\230L\025\254?\217\302\365(\\\217\302?BC\377\004\027+\262?\rT\306\277\317\270\270?\002h\224.\375K\202?@j\023\'\367;d?\017\2343\242\2647\260?7\246\',\361\200\242?\014\007B\262\200\t\214?-[\353\213\204\266\214?\222\313\177H\277}\321?\342#bJ$\321\263?vO\036\026jM\313?H\277}\0358g\304?\032\305rK\253!\241?\336\223\207\205Z\323\274?\364\211<I\272f\222?*5{\240\025\030\242?\007\010\346\350\361{\213?\220\275\336\375\361^\225?\275\306.Q\2755\270?\373:p\316\210\322\276?^K\310\007=\233\205?\177M\326\250\207h\224?\201\225C\213l\347\273?\226\225&\245\240\333\253?\262.n\243\001\274\305?/i\214\326Q\325\244?\212\002}\"O\222\266?"
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\027\317\240\241\177\202\253?\316\210\322\336\340\013\223?\255\300\220\325\255\236\243?y\314@e\374\373\254?9\314\227\027`\037\255?\223\3367\276\366\314\242?\277Hh\313\271\024\227?}DL\211$z\231?7\303\r\370\3740\242?\030\262\272\325s\322\263?\224\202n/i\214\206?\243\351\354dp\224\234?RI\235\200&\302\266?x\356=\\r\334\251?`\352\347ME*\254?g\270\001\237\037F\250?\241\333K\032\243u\224?m\377\312J\223R\240?\261\304\003\312\246\\\241?o\rl\225`q\230?\302\213\276\2024c\221?\026jM\363\216S\224?\343p\346Ws\200\260?\000o\201\004\305\217\221?T\\U\366]\021\234?]3\371f\233\033\243?\301\262\322\244\024t\233?\335\230\236\260\304\003\252?\036\212\002}\"O\242?\031\250\214\177\237q\241?_{fI\200\232\252?+\366\227\335\223\207\245?\215\356 v\246\320\251?H\247\256|\226\347\241?\200\317\017#\204G\233?z\245,C\034\353\242?,\324\232\346\035\247\250?\342@H\0260\201\213?\350\336\303%\307\235\222?\232\217kC\3058\237?\362\260Pk\232w\214?\030&S\005\243\222\232?\025\2510\266\020\344\270?V\237\253\255\330_\226?\314u\032i\251\274\215?\253[=\'\275o\254?\337T\244\302\330B\220?:\222\313\177H\277\235?\272\325s\322\373\306\227?\371\240g\263\352s\225?\262c#\020\257\353\207?\324\237\375H\021\031\206?\232%\001jj\331\212?\270\314\351\262\230\330\234?D\377\004\027+j\220?\377\225\225&\245\240\213?G\003x\013$(\236?J\230i\373WV\232?\021\3435\257\352\254F?a\370\210\230\022I\224?\333r.\305Ue\177?\270\036\205\353Q\270\236?(D\300!T\251\261?\371f\233\033\323\023\246?6\037\327\206\212q\236?\277\016\2343\242\264\227?\223R\320\355%\215\221?V\023D\335\007 \225?S\226!\216uq\323?\227\377\220~\373:\220?$\363\310\037\014<\227?\233Z\266\326\027\t\255?0\022\332r.\305\245?\302Q\362\352\034\003\222?P\302L\333\277\262\222?\354Q\270\036\205\353\241?\225\016\326\3779\314\207?\267\234KqU\331\247?\222\\\376C\372\355\273?\276\366\314\222\0005\225?B&\0319\013{\232?8\370\302d\252`\244?-!\037\364lV\255?\231\365b(\'\332\225?v\333\205\346:\215\224?\010\224M\271\302\273\234?\253\262\357\212\340\177\253?\255\372\\m\305\376\242?!$\013\230\300\255\233?gI\200\232Z\266\246?\241\363\032\273D\365\206?\246\017]P\3372\247?\254\225\t\277\324\317\213?\354\335\037\357U+\223?A\267\2274F\353\250?\354\365\356\217\367\252\245?\',\361\200\262)\207?\230\302\203f\327\275u?\240\375H\021\031V\221?\306\341\314\257\346\000\241?B\354L\241\363\032\233?\000\000\000\000\000\000\000\000Mg\'\203\243\344\205?\024W\225}W\004\237?\222\313\177H\277}\235?g\\8\020\222\005\254?G\003x\013$(\236?\330*\301\342p\346\207?:\264\310v\276\237\272?NE*\214-\004\231?9@0G\217\337\233? \265\211\223\373\035\252?\221\355|?5^\302?od\036\371\203\201\247?\217pZ\360\242\257\240?\'\302\206\247W\312\222?\020\344\240\204\231\266\267?iW!\345\'\325\236?\020X9\264\310v\256?\204d\001\023\270u\227?\250:\344f\270\001\217??\214\020\036m\034\241?\353\3426\032\300[\300?l\004\342u\375\202\235?o\266\2711=a\251?B\261\0254-\261\202?\207m\2132\033d\222?\001M\204\rO\257\244?\326\342S\000\214g\240?c\177\331=yX\250?\323\023\226x@\331\204?\004[%X\034\316\234?\324e1\261\371\270\226?;S\350\274\306.\221?\352\0044\0216<\235?\376\361^\2652\341\227?\246\226\255\365EB\233?uv28J^\215?\331\323\016\177M\326\260?0\330\r\333\026e\226?\000\000\000\000\000\000\000\000G\217\337\333\364g\237?,+MJA\267\207??W[\261\277\354\216?\'\024\"\340\020\252\224?\310\260\21272\217\234?\313\234.\213\211\315\247?,\354i\207\277&\253?O\307c\006*\343\237?\265\246y\307):\222?\276je\302/\365\223?)yu\216\001\331\263?\362\322Mb\020X\331?\221\233\341\006|~\210?\301V\t\026\2073\237?\354i\207\277&k\224?\201\t\334\272\233\247\252?\230VC\342\036K\237?WBwI\234\025\201?q\003>?\214\020^?\022\332r.\305U\245?\313-\255\206\304=\246?\2510\266\020\344\240\244?\000\000\000\000\000\000\240?\331Z_$\264\345\234?\242\235\323,\320\356\200?\340\020\252\324\354\201\206?O\227\305\304\346\343\232?\272\325s\322\373\306\247?\273+\273`p\315}?]\341].\342;\221?\327\330%\252\267\006\226?\016g~5\007\010\246?\250\256|\226\347\301\215?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\311T\301\250\244\276?\253\262\357\212\340\177\253?\303_\2235\352!Z?\252}:\0363Py?-9\356\224\016\326\237?3\371f\233\033\323\243?\340\370\3323K\002\224?\233\346\035\247\350H\256?\'\374R?o*\222?\273\272c\261M*Z?\263\223\301Q\362\352\214?\033\243uT5A\224?u\216\001\331\353\335\217?Y\022\240\246\226\255\225?}\256\266b\177\331\275?\177\237q\341@H\226?\000\000\000\000\000\000\000\000\371k\262F=D\243?\010\2613\205\316k\254?M\271\302\273\\\304\227?4\200\267@\202\342\247?*:\222\313\177H\257?hy\036\334\235\265\233?{\024\256G\341z\224?S\"\211^F\261\214?d@\366z\367\307\233?\220,`\002\267\356\266?u\216\001\331\353\335\237?G\353\250j\202\250\233?\033i\251\274\035\341\224?\332\033|a2U\200?v\025R~R\355\223?\256|\226\347\301\335\231?\265l\255/\022\332\222?\320?\301\305\212\032\254?\251\023\320D\330\360\224?\320\233\212T\030[\260?+\030\225\324\th\302?\375\301\300s\357\341\242?\026\2073\277\232\003\244?6\037\327\206\212q\256?\216\222W\347\030\220\255?jR\n\272\275\244\241?\200\317\017#\204G\233?&p\353n\236\352\220?[|\n\200\361\014\232?\350\205;\027Fz\201?(\270XQ\203i\230?\340\326\335<\325!\227?\355\r\2760\231*\230?`=\356[\255\023g?\234P\210\200C\250\242?\213\345\226VC\342\236?\013\200\361\014\032\372\247?*:\222\313\177H\237?\rT\306\277\317\270\220?7N\n\363\036gj?\301n\330\266(\263\241?\nc\013A\016J\210?\\S \263\263\350}?f,\232\316N\006\247?@\331\224+\274\313\245?\203\300\312\241E\266\243?\023\355*\244\374\244\232?\177\373:p\316\210\222?\242drjg\230z?A\202\342\307\230\273\266?n\250\030\347oB\241?]\334F\003x\013\244?\360\026HP\374\030\223?d\344,\354i\207\237?Q\367\001Hm\342\264?\210\021\302\243\215#\206?<\275R\226!\216\225?=\270;k\267]\270?V}\256\266b\177\211?\234\304 \260rh\261?\376\361^\2652\341\227?\273?\336\253V&\234?qU\331wE\360\237?H\371I\265O\307\243?\372\'\270XQ\203\251?4\205\316k\354\022\265?h\313\271\024W\225\235?Y\022\240\246\226\255\225?0\266\020\344\240\204\211?t\200`\216\036\277\247?\232%\001jj\331\212?\361h\343\210\265\370\224?o\365\234\364\276\361\225?\31667\246\',\241?\352\034\003\262\327\273\237?\210{,}\350\202\232?\013{\332\341\257\311\262?\003Z\272\202m\304s?\340\264\340E_A\212?k\361)\000\3063\260?\304^(`;\030\201?\\\033*\306\371\233\220?\030`\037\235\272\362\211?\265/\240\027\356\\X?\007B\262\200\t\334\232?\344\203\236\315\252\317\205?\020\222\005L\340\326\215?\354i\207\277&k\244?\250:\344f\270\001\217?\336\253V&\374R\237?3\371f\233\033\323\243?\264\315\215\351\tK\264?~t\352\312gy^?\365\020\215\356 v\246?&p\353n\236\352\220?\007\224M\271\302\273\264?\003\225\361\3573.\214?V}\256\266b\177\271?h\035UM\020u\217?EGr\371\017\351\227?\263\223\301Q\362\352\214?\360\213KU\332\342z?\302\276\235D\204\177q?\334\021N\013^\364\205?[|\n\200\361\014\212?\324\237\375H\021\031\206?;\245\203\365\177\016\223?\221\005L\340\326\335\254?9\234\371\325\034 \250?\024\226x@\331\224\263?\245\302\330B\220\203\222?\256\236\223\3367\276\226?G8-x\321W\220?\255g\010\307,{R?\230\375\272\323\235\'n?7T\214\3637\241`?\277{G\215\t1g?Ih\313\271\024W\205?\344\203\236\315\252\317u?\217\252&\210\272\017\240?\t\277\324\317\233\212\204?\000\000\000\000\000\000\000\000f\275\030\312\211ve?Ve\337\025\301\377\206?cb\363qm\250\230?_\230L\025\214J\272?c+hZbe\204?UM\020u\037\200\244?h\263\352s\265\025\233?\2652\341\227\372y\223?\332\033|a2U\240?\365g?RD\206\205?\362$\351\232\3117\213? \355\177\200\265jw?\253Z\322Q\016fS?7T\214\3637\241\240?h\256\323HK\345\255?\276\301\027&S\005\243?=f\2402\376}\246?\r\341\230eO\002k?7\225\373\323\374\347O?\365\026\017\3579\260|?w\363T\207\334\014\247?\343\252\262\357\212\340\237?\'N\356w(\n\244?X\2505\315;N\221?e\337\025\301\377V\242?a2U0*\251\243?\221\'I\327L\276\251?\222?\030x\356=\234?\002\274\005\022\024?\246?\271S:X\377\347\220?\352\354dp\224\274\232?\274\010S\224K\343w?\255\372\\m\305\376\222?U\301\250\244N@\203?\346\223\025\303\325\001\200?\025;\032\207\372]x?\227\213\370N\314z\271?,\331\261\021\210\327\245?\330\266(\263A&\251?\033\236^)\313\020\247?=\325!7\303\r\260?x\321W\220f,\252?\226\\\305\3427\205u?\367p\311q\247t\240?\320\270p $\013\230?\207\360\324\310S\373I?\032Q\332\033|a\222?q\217\245\017]P\217?\337lscz\302\222?\362<\270;k\267\215?R\270\036\205\353Q\230?B\312O\252}:\256?{\024\256G\341z\224?f\275\030\312\211v\225?\036\212\002}\"O\242?\021\036m\034\261\026\257?2r\026\366\264\303\217?~R\355\323\361\230\241?\301\262\322\244\024t\233?\215\234\205=\355\360\207?\230\243\307\357m\372\223?\331\316\367S\343\245\303?\257yUg\265\300~?NE*\214-\004\231?\314\271\024W\225}\247?\210K\216;\245\203\225?jR\n\272\275\244\221?{\203/L\246\n\246?\320\233\212T\030[\250?h\005\206\254n\365\234?C\250R\263\007Z\241?\313-\255\206\304=\246?^\277`7l[\224?V\361F\346\221?\270?\345\226VC\342\036\263?\336\255,\321Yf\201?\000\000\000\000\000\000\000\000\242\013\352[\346t\251?\200\361\014\032\372\'\250?\220\245\017]P\337\222?\002eS\256\360.\207?&p\353n\236\352\240?\241\3264\3578E\247?\350j+\366\227\335\223?\'\332UH\371I\225?\343\307\230\273\226\220\257?\003\225\361\3573.\214?\261\247\035\376\232\254\241?\207\033\360\371a\204\220?0Bx\264q\304\212?8\370\302d\252`\224?rP\302L\333\277\222?\345\320\"\333\371~\252?p\231\323e1\261\231?\241\241\177\202\213\025\225?oG8-x\321\207?8\204*5{\240\205?\001\336\002\t\212\037\243?\332\341\257\311\032\365\240?\351`\375\237\303|\231?\305\376\262{\362\260\220?V\225}W\004\377\213?\214\3637\241\020\001\247?\240\211\260\341\351\225\202?\031\253\315\377\253\216|?\276eN\227\305\304\246?\330\010\304\353\372\005\253?q%;6\002\361\232?\3603.\034\010\311\242?\302mm\341y\251x?\321<\200E~\375`?\246\263\223\301Q\362\252?\343\036K\037\272\240\236?\366\265.5B?\203?a\027E\017|\014v?\230\206\341#bJ\264?\372a\204\360h\343\250?\367\351x\314@e\254?\003\354\243SW>\253?yu\216\001\331\353\215?V\237\253\255\330_\226?\354\327\235\356<\361|?e\215z\210Fw\220?R%\312\336R\316w?0\232\225\355C\336\202?.\377!\375\366u\260?=a\211\007\224M\251?\002\323i\335\006\265\177?\177M\326\250\207h\224?\020X9\264\310v\236?\330*\301\342p\346\227?\347\301\335Y\273\355\242?U5A\324}\000\222?\"\032\335A\354L\241?"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\200\267@\202\342\307\346??W[\261\277\354\316?\336\223\207\205Z\323\334?\263\352s\265\025\373\345?\232\231\231\231\231\231\331?\211A`\345\320\"\341?\017\2343\242\2647\330?k\232w\234\242#\321?sh\221\355|?\341?\256G\341z\024\256\361?[B>\350\331\254\302?\307K7\211A`\331?\356\353\3009#J\327?)\313\020\307\272\270\315?\017\2343\242\2647\346?]m\305\376\262{\346?J{\203/L\246\322?u\002\232\010\033\236\336?\215(\355\r\2760\341?d;\337O\215\227\316?\375\324x\351&1\310?\336\345\"\276\023\263\266?\223\030\004V\016-\344?\376\324x\351&1\324??5^\272I\014\336?\360\205\311T\301\250\330?\013$(~\214\271\341?\004\347\214(\355\r\326?\022\203\300\312\241E\344?$\271\374\207\364\333\317?\252`TR\'\240\343?\212\037c\356ZB\346?R\'\240\211\260\341\341?\222\313\177H\277}\343?\377!\375\366u\340\340?;\001M\204\rO\341?F\224\366\006_\230\340?\002\324\324\262\265\276\250? F\010\2176\216\230?\177j\274t\223\030\340?\343\245\233\304 \260\312?:\222\313\177H\277\331?\"lxz\245,\347?\027HP\374\030s\327?$\271\374\207\364\333\327?\033/\335$\006\201\347?\"\375\366u\340\234\261?M\025\214J\352\004\340?\205\353Q\270\036\205\323?\331=yX\2505\315?\017#\204G\033G\254?\341z\024\256G\341\272?\2549@0G\217\267?Dio\360\205\311\320?z6\253>W[\321?$\363\310\037\014<\267?\336\223\207\205Z\323\330?\024\320D\330\360\364\326?B\312O\252}:^?\237<,\324\232\346\275?\027\274\350+H3\226?&\036P6\345\n\267?\203QI\235\200&\346?R\'\240\211\260\341\301?\376C\372\355\353\300\331?\230\335\223\207\205Z\323?\362F\346\221?\030\270?]m\305\376\262{\302?\325x\351&1\010\364?)\355\r\2760\231\272?Q\332\033|a2\321?\t\212\037c\356Z\302?\027\267\321\000\336\002\345?\323\274\343\024\035\311\321?\\ A\361c\314\305?%u\002\232\010\033\322?\352\312gy\036\334\265?\227\377\220~\373:\330?\334\327\201sF\224\350?G\003x\013$(\306?\020X9\264\310v\306?,e\031\342X\027\337?\232w\234\242#\271\344?\305\2171w-!\317?\334h\000o\201\004\315?\2068\326\305m4\324?\254\213\333h\000o\325?\321\"\333\371~j\342?\326V\354/\273\'\317?\2657\370\302d\252\320?.V\324`\032\206\267?-C\034\353\3426\322?H\341z\024\256G\301?\314\356\311\303B\255\301?J{\203/L\246\340?\265\246y\307):\332?V}\256\266b\177\251?^\205\224\237T\373\224?\013F%u\002\232\310?\342\351\225\262\014q\324?\271\215\006\360\026H\324?\000\000\000\000\000\000\000\000\035Zd;\337O\275?]\376C\372\355\353\320?\031x\356=\\r\264?H\277}\0358g\344?\336\002\t\212\037c\322?\t\033\236^)\313\310?\311\345?\244\337\276\356?+\207\026\331\316\367\323?\244p=\n\327\243\300?\257\224e\210c]\314?\277\016\2343\242\264\345?\372~j\274t\223\300?\217\344\362\037\322o\317?\314]K\310\007=\303?\245N@\023a\303\303?%u\002\232\010\033\336?\322\000\336\002\t\212\347?Dio\360\205\311\314?\362A\317f\325\347\312?\251\023\320D\330\360\324?6\315;N\321\221\342?\374\251\361\322Mb\320?@\023a\303\323+\325?\274\005\022\024?\306\264?A\361c\314]K\330?\330\360\364JY\206\324?J\014\002+\207\026\311?e\252`TR\'\342?\213\375e\367\344a\271?lxz\245,C\330?\022\245\275\301\027&\323?\216uq\033\r\340\305?\307K7\211A`\331?\350j+\366\227\335\313?\236^)\313\020\307\272?c\356ZB>\350\301?F\266\363\375\324x\325?\305\346\343\332P1\266?\000\000\000\000\000\000\000\000t\265\025\373\313\356\321?]\371,\317\203\273\263?\215\227n\022\203\300\312?~\214\271k\t\371\270?\314\177H\277}\035\270?\336\223\207\205Z\323\334?\000\000\000\000\000\000\320?$\271\374\207\364\333\323?M\025\214J\352\004\304?j0\r\303G\304\264?\200H\277}\0358\341?_\230L\025\214J\352?H\212\310\260\2127\262?\031s\327\022\362A\323?;p\316\210\322\336\310?\003\t\212\037c\356\326?\273\270\215\006\360\026\310?A\274\256_\260\033\266?@\336\253V&\374\222?(~\214\271k\t\311?B>\350\331\254\372\314?\227n\022\203\300\312\345?^K\310\007=\233\305?\277}\0358gD\331?\327\243p=\n\327\263?\257%\344\203\236\315\272?\010=\233U\237\253\315?\262\235\357\247\306K\337?i\214\326Q\325\004\261?z\307):\222\313\277?]\376C\372\355\353\320?\016-\262\235\357\247\342?D\243;\210\235)\244?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\255\330_vO\326?RI\235\200&\302\342?9\'\366\320>V\200?\222?\030x\356=\234?J\014\002+\207\026\341?\030\004V\016-\262\345?\030&S\005\243\222\322?\016\2760\231*\030\305?\010\254\034Zd;\327?\325[\003[%X|?\206\311T\301\250\244\326?d]\334F\003x\303?\014\037\021S\"\211\266?-C\034\353\3426\302?\232\010\033\236^)\353?>\355\360\327d\215\252?\000\000\000\000\000\000\000\000R\270\036\205\353Q\334?\002\232\010\033\236^\335?\334\327\201sF\224\306?8\370\302d\252`\330?\323Mb\020X9\320?#\333\371~j\274\330?\265\025\373\313\356\311\337?\252`TR\'\240\301?\210\364\333\327\201s\326?7\032\300[ A\351?\262.n\243\001\274\335?\016\2760\231*\030\321?\320D\330\360\364J\325?\035r3\334\200\317\257?_)\313\020\307\272\310?[\261\277\354\236<\324?\024\320D\330\360\364\322?\022\024?\306\334\265\330?\300\354\236<,\324\302??\306\334\265\204|\324?8gDio\360\321?g\325\347j+\366\327?\010=\233U\237\253\335?\205|\320\263Y\365\321?\244p=\n\327\243\310?\022\245\275\301\027&\327?\305 \260rh\221\331?2\346\256%\344\203\306?\003x\013$(~\320?Pp\261\242\006\323\260?5\3578EGr\331?\225e\210c]\334\306?\210\205Z\323\274\343\304?\330\010\304\353\372\005\233?KY\2068\326\305\325?d\314]K\310\007\331?C\034\353\3426\032\344?\346?\244\337\276\016\340?p\316\210\322\336\340\273?\007d\257w\177\274\227?\177\373:p\316\210\332?\024\n\021p\010U\262?\364qm\250\030\347\257?:\264\310v\276\237\342?K\352\0044\0216\324?@\244\337\276\016\234\323?\347\214(\355\r\276\324?\310\007=\233U\237\303?\201\034\2240\323\366\257?z\307):\222\313\347?\023a\303\323+e\301?6<\275R\226!\326?yX\2505\315;\276?`vO\036\026j\315?}\320\263Y\365\271\350?\315\314\314\314\314\314\274?,e\031\342X\027\307?tF\224\366\006_\346?\253>W[\261\277\264?|a2U0*\353?\346\256%\344\203\236\325?\214\271k\t\371\240\333?aTR\'\240\211\324?\367\344a\241\3264\333?c\177\331=yX\334?\017\013\265\246y\307\343?\344\024\035\311\345?\342? c\356ZB>\330?q\254\213\333h\000\277?`vO\036\026j\315?!\260rh\221\355\314?\210\205Z\323\274\343\330?\363\037\322o_\007\326?\330\360\364JY\206\310?)\355\r\2760\231\302?V}\256\266b\177\311?\017\2343\242\2647\320?\354\243SW>\313\243?R\270\036\205\353Q\300?\2760\231*\030\225\342?\245\367\215\257=\263\244?:\264\310v\276\237\312?9\321\256B\312O\262?\316\024:\257\261Kt?}?5^\272I\314?\211A`\345\320\"\273?\302\027&S\005\243\302?\357\311\303B\255i\342?\256\266b\177\331=\261?\310\007=\233U\237\333?\367\006_\230L\025\340?\327\022\362A\317f\325?\377\313\265h\001\332v?\022\203\300\312\241E\316?\315;N\321\221\\\276?\265\025\373\313\356\311\303?JA\267\2274F\263?\321\"\333\371~j\314?,e\031\342X\027\307?\001M\204\rO\257\314?*\251\023\320D\330\300?A\t3m\377\312\252?]3\371f\233\033\243?F=D\243;\210\235?K\310\007=\233U\257?\325x\351&1\010\304?\'\332UH\371I\245?\0216<\275R\226\343?tF\224\366\006_\310?\343\307\230\273\226\220\337?\216\222W\347\030\220\265?mV}\256\266b\277?c\264\216\252&\210\262?\307\272\270\215\006\360\206?\331\346\306\364\204%\216?\222?\030x\356=\214?v\211\352\255\201\255\222?lxz\245,C\264?x\177\274W\255L\250?\206\311T\301\250\244\306?\001\023\270u7O\265?\000\000\000\000\000\000\000\000\0162\311\310Y\330\223?4\205\316k\354\022\245?\360\205\311T\301\250\330?V}\256\266b\177\335?\177e\245I)\350\226?A\361c\314]K\310?=\233U\237\253\255\320??W[\261\277\354\306?\322o_\007\316\031\341?\216uq\033\r\340\275?\351&1\010\254\034\272?\010%\314\264\375+\253?\254l\037\362\226\253\177?\276\301\027&S\005\327?\327\022\362A\317f\325?Gr\371\017\351\267\337?\246\nF%u\002\326?\020z6\253>W\213?f\026\241\330\n\232v?Hm\342\344~\207\242?J\014\002+\207\026\331?\217\302\365(\\\217\302?\177\331=yX\250\335?5^\272I\014\002\273?HP\374\030s\327\336?\325x\351&1\010\330?\361c\314]K\310\333?\350\331\254\372\\m\315?#J{\203/L\336?O@\023a\303\323\273?/Q\2755\260U\262?R,\267\264\032\022\247?\016O\257\224e\210\313?\275o|\355\231%\271?\270\252\354\273\"\370\237?T:X\377\3470\237?Z\365\271\332\212\375\345?\206\311T\301\250\244\344?\323\274\343\024\035\311\331?\311\345?\244\337\276\276?Tt$\227\377\220\316?\362\260Pk\232w\320?W\354/\273\'\017\253?\tUj\366@+\270?\014\223\251\202QI\275?\177\033b\274\346Um?\202sF\224\366\006\277?\252\361\322Mb\020\300?\014\223\251\202QI\305?\275R\226!\216u\301?\320D\330\360\364J\321?\373\\m\305\376\262\327?\245,C\034\353\342\316?\254\255\330_vO\322?\000\221~\373:p\336?=\233U\237\253\255\346?\254\213\333h\000o\301?\376C\372\355\353\300\331?u\002\232\010\033\236\332?&S\005\243\222:\301?W\354/\273\'\017\313?\262\235\357\247\306K\343?r\277CQ\240O\264?\342\351\225\262\014q\320?\245,C\034\353\342\352?4\242\2647\370\302\314?p\316\210\322\336\340\303?\302\027&S\005\243\322?\024?\306\334\265\204\324?\201&\302\206\247W\322?\037\205\353Q\270\036\321?r\371\017\351\267\257\323?\222\\\376C\372\355\273?K\310\007=\233U\323?\214\333h\000o\201\330?\004\347\214(\355\r\266?\000\000\000\000\000\000\000\000i\000o\201\004\305\341?6\315;N\321\221\346?\024?\306\334\265\204\304?\177\331=yX\250\265?\342X\027\267\321\000\326?\332\033|a2U\310?\261Pk\232w\234\312?\007_\230L\025\214\302?\324\232\346\035\247\350\354?\251\244N@\023a\303?\234\242#\271\374\207\304?_\272I\014\002+\307?\304\266E\231\r2\251?P\374\030s\327\022\302?\305 \260rh\221\315?I\235\200&\302\206\307?\3436\032\300[ \325?\252`TR\'\240\301?\347\035\247\350H.\307?\377\262{\362\260P\273?EGr\371\017\351\307?\222\\\376C\372\355\323?>yX\2505\315\303?\\ A\361c\314\275?\305rK\253!q\257?O\036\026jM\363\332?\021\307\272\270\215\006\270?e\337\025\301\377V\242?\374\251\361\322Mb\320?\013F%u\002\232\324?\201\004\305\2171w\315?\006\201\225C\213l\327?\266\204|\320\263Y\225?\320D\330\360\364J\211?s\327\022\362A\317\322?\2657\370\302d\252\310?\027HP\374\030s\247?P\031\377>\343\302\241?\225e\210c]\334\354?RI\235\200&\302\316?\007\360\026HP\374\340?(~\214\271k\t\331?\010\254\034Zd;\277?{\203/L\246\n\332?t\230//\300>\262?F\224\366\006_\230\274?\366b(\'\332U\250?\021\307\272\270\215\006\260?\240\211\260\341\351\225\336?\314\177H\277}\035\340?\213\303\231_\315\001\242?\177M\326\250\207h\244?\333\371~j\274t\333?F\224\366\006_\230\304?\231\273\226\220\017z\344?\222\355|?5^\312?:#J{\203/\330?"
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\274?\336\253V&\264?\301!T\251\331\003\255?\201\220,`\002\267\256?R~R\355\323\361\270?\310\037\014<\367\036\256?=\226>tA}\263?\275\313E|\'f\255?\373\2269]\026\023\263?_^\200}t\352\262?_\2235\352!\032\265?&\314\264\375++\255?3\254\342\215\314#\257?+\207\026\331\316\367\263?\242]\205\224\237T\253?\230\300\255\273y\252\263? \265\211\223\373\035\262?\031\312\211v\025R\256?\3333K\002\324\324\262?\310\007=\233U\237\253?\332 \223\214\234\205\255?\310\322\207.\250o\261?\314\356\311\303B\255\261?U5A\324}\000\262?\330\010\304\353\372\005\253?\2068\326\305m4\260?\356\010\247\005/\372\262?\3225\223o\266\271\261?\222\350e\024\313-\255?\347\214(\355\r\276\260?y\344\017\006\236{\257?\265\216\252&\210\272\257?\020@j\023\'\367\263?\021\252\324\354\201V\260?,\016g~5\007\260?=\233U\237\253\255\260?h\005\206\254n\365\254?\\\217\302\365(\\\257?\205\003!Y\300\004\256?\003\225\361\3573.\254?\002\361\272~\301n\260?\264\260\247\035\376\232\254?\0216<\275R\226\261?\351\324\225\317\362<\260?\261\304\003\312\246\\\261?rr\277CQ\240\257?)Wx\227\213\370\256?\365EB[\316\245\260?)a\246\355_Y\261?\342\001eS\256\360\256?\236v\370k\262F\255?\331\346\306\364\204%\256?\263\002CV\267z\256?*:\222\313\177H\257?e\252`TR\'\260?_\2235\352!\032\255?\347tYLl>\256?it\007\2613\205\256?\"\032\335A\354L\261?`\352\347ME*\254?\331B\220\203\022f\262?\2505\315;N\321\261?\007\3230|DL\261?\tm9\227\342\252\262?\372\n\322\214E\323\261?;p\316\210\322\336\260?\r7\340\363\303\010\261?(D\300!T\251\261?\301!T\251\331\003\255?b\333\242\314\006\231\264?\304Z|\n\200\361\254?\331\261\021\210\327\365\253?\351H.\377!\375\266?B\324}\000R\233\260?\254\305\247\000\030\317\260?dX\305\033\231G\256?\356\316\332m\027\232\253?\252\232 \352>\000\261?\023~\251\2377\025\261?\235\205=\355\360\327\264?\025t{Ic\264\256?t\265\025\373\313\356\261?z\031\305rK\253\261?\261\304\003\312\246\\\261?\312\211v\025R~\262?\346Ws\200`\216\256?iW!\345\'\325\256?%\351\232\3117\333\254?\247\005/\372\n\322\254?i\306\242\351\354d\260?;\252\232 \352>\260?*\256*\373\256\010\256?e\001\023\270u7\257?_A\232\261h:\253?\352\0044\0216<\255?\237q\341@H\026\260?\352!\032\335A\354\254?\007\360\026HP\374\260?3\304\261.n\243\261?a7l[\224\331\260?\353\3426\032\300[\260?;u\345\263<\017\256?\026\2073\277\232\003\264?\343\257\311\032\365\020\255?\254\377s\230//\260?\236)t^c\227\260?\251\207ht\007\261\263?\305\376\262{\362\260\260?\312\310Y\330\323\016\257?\023\'\367;\024\005\262?\273~\301n\330\266\260?\331_vO\036\026\262?a\303\323+e\031\262?\335\3529\351}\343\263?@\207\371\362\002\354\263?_$\264\345\\\212\263?\020\344\240\204\231\266\257?J\230i\373WV\262?2\341\227\372yS\261?1Bx\264q\304\262?\356|?5^\272\251?\315\344\233mnL\257?\035r3\334\200\317\257?\320\'\362$\351\232\261?38J^\235c\260?\377\312J\223R\320\255?G\003x\013$(\256?mV}\256\266b\257?\372\n\322\214E\323\251? F\010\2176\216\260?\315\344\233mnL\257?\215b\271\245\325\220\260??\313\363\340\356\254\255?~\221\320\226s)\256?\257=\263$@M\255?\212v\025R~R\255?\223:\001M\204\r\257?\000\221~\373:p\256?\363\037\322o_\007\256?\301\034=~o\323\257?\021\036m\034\261\026\257?T\306\277\317\270p\260?\222\343N\351`\375\257??\251\366\351x\314\260?\316\252\317\325V\354\257?9\314\227\027`\037\255?S\\U\366]\021\264?t^c\227\250\336\262?\345~\207\242@\237\260?\374\035\212\002}\"\257?6\315;N\321\221\254?Ds\235FZ*\257?K\223R\320\355%\265?\225\016\326\3779\314\267?\031s\327\022\362A\257?\327\034 \230\243\307\257?O\307c\006*\343\257?\031V\361F\346\221\257?\267zNz\337\370\252?\347tYLl>\256?\362Y\236\007wg\255?\241b\234\277\t\205\260?\034_{fI\200\252?3\254\342\215\314#\257?t\357\341\222\343N\261?t\315\344\233mn\254?K^\235c@\366\252?\374\251\361\322Mb\260?h?RD\206U\254?A\361c\314]K\260?!\260rh\221\355\254?!\037\364lV}\256?\233Z\266\326\027\t\255?F|\'f\275\030\262?\246a\370\210\230\022\261?d;\337O\215\227\256?\202\250\373\000\2446\261?\327L\276\331\346\306\264?\307F ^\327/\260?x\227\213\370N\314\252?\020\001\207P\245f\257?\264Y\365\271\332\212\255?T\336\216pZ\360\262?\232\224\202n/i\254?\370\252\225\t\277\324\257?$\234\026\274\350+\260?\362\310\037\014<\367\256?-\262\235\357\247\306\253?\367\344a\241\3264\257?\325\347j+\366\227\255?\236\352\220\233\341\006\254?\255\335v\241\271N\263?\362F\346\221?\030\260?\376\267\222\035\033\201\260?5\322Ry;\302\261?\3706\375\331\217\024\261?\301!T\251\331\003\255?\320\'\362$\351\232\261?\020z6\253>W\253?Wx\227\213\370N\254?\005\377[\311\216\215\260?}W\004\377[\311\256?>\\r\334)\035\254?\206U\274\221y\344\257?\310A\t3m\377\262?\033*\306\371\233P\260?\275W\255L\370\245\256?\273\270\215\006\360\026\260? {\275\373\343\275\252?\364lV}\256\266\262?\264\315\215\351\tK\254?\267\356\346\251\016\271\251?\337\310<\362\007\003\257?}?5^\272I\254?*\256*\373\256\010\256?\200\324&N\356w\260?\370\3740Bx\264\261?\322\306\021k\361)\260?\355\r\2760\231*\260?m[\224\331 \223\254?Nz\337\370\3323\253?\004\034B\225\232=\260?\245\270\252\354\273\"\260?\035\304\316\024:\257\261?\245\270\252\354\273\"\260?>\005\300x\006\r\255?\023y\222t\315\344\253?P\215\227n\022\203\260?\347tYLl>\256?\305\254\027C9\321\256?\374\336\246?\373\221\262?\376\324x\351&1\260?pw\326n\273\320\254?\020\222\005L\340\326\255?\305wb\326\213\241\254?M\177\366#Ed\260?\216uq\033\r\340\255?Ic\264\216\252&\260?S\355\323\361\230\201\252?6\310$#ga\257?z;\302i\301\213\256?B>\350\331\254\372\254?Kvl\004\342u\255?5$\356\261\364\241\263?\007\353\377\034\346\313\253?\270\036\205\353Q\270\256??\306\334\265\204|\260?\356ZB>\350\331\254?\361)\000\3063h\260?k\361)\000\3063\260?\206r\242]\205\224\257?\373t<f\2402\256?\247t\260\376\317a\256?\242(\320\'\362$\261?=\"\246D\022\275\254?~\005i\306\242\351\254?mV}\256\266b\257?+\000\3063h\350\257?n\335\315S\035r\263?\220\367\252\225\t\277\264?\240\032/\335$\006\261?\202[w\363T\207\254?\010%\314\264\375+\253?}\\\033*\306\371\253?\002\262\327\273?\336\253?6\315;N\321\221\254?>\005\300x\006\r\255?\256\360.\027\361\235\260?\253\312\276+\202\377\255?}\313\234.\213\211\255?7\375\331\217\024\221\261?\274y\252Cn\206\253?\"\216uq\033\r\260?\020\344\240\204\231\266\257?\2348\271\337\241(\260?K\352\0044\0216\254?\024\256G\341z\024\256?\223\256\231|\263\315\255?\300`7l[\224\251?lxz\245,C\254?du\253\347\244\367\255?\233U\237\253\255\330\257?\315\344\233mnL\257?\265\037)\"\303*\256??\214\020\036m\034\261?\336\002\t\212\037c\256?\321\221\\\376C\372\255?\374R?o*R\261?m[\224\331 \223\254?`\216\036\277\267\351\257?!\037\364lV}\256?a\246\355_Yi\262?.\347R\\U\366\255?q\033\r\340-\220\260?\373\313\356\311\303B\255?\010\254\034Zd;\257?\370;\024\005\372D\256?TW>\313\363\340\256?\362F\346\221?\030\260?}\"O\222\256\231\254?\234\376\354G\212\310\260?/\342;1\353\305\260?\311q\247t\260\376\257?\345\226VC\342\036\263?L7\211A`\345\260?\201\034\2240\323\366\257?\270XQ\203i\030\256?!<\3328b-\256? \357U+\023~\261?\377\262{\362\260P\253?\376[\311\216\215@\254?\3779\314\227\027`\257?\362A\317f\325\347\252?\217\344\362\037\322o\257?\010\254\034Zd;\257?-\tPS\313\326\262?\007wg\355\266\013\255?\352!\032\335A\354\254?\034wJ\007\353\377\254?\247t\260\376\317a\266?)?\251\366\351x\254?\246\320y\215]\242\262?\020\356\316\332m\027\252?\025\306\026\202\034\224\260?\301\250\244N@\023\261?6\310$#ga\257?O;\3745Y\243\256?\311v\276\237\032/\255?\243\001\274\005\022\024\257?\341\177+\331\261\021\260?\rT\306\277\317\270\260?\233\3117\333\334\230\256?\347\214(\355\r\276\260?\257\2544)\005\335\256?\374\035\212\002}\"\257?\000\221~\373:p\256?\332\217\024\221a\025\257?Hm\342\344~\207\262?h:;\031\034%\257?\242\177\202\213\0255\260?q\261\242\006\3230\254?D\377\004\027+j\260?=\n\327\243p=\262?\003}\"O\222\256\261?\373\313\356\311\303B\255?H\033G\254\305\247\260?t\265\025\373\313\356\261?\362\310\037\014<\367\256?\370;\024\005\372D\256?\000\343\0314\364O\260?F\360\277\225\354\330\260?d\257w\177\274W\255?-\317\203\273\263v\263?\202V`\310\352V\257?\316p\003>?\214\260?h:;\031\034%\257?\357U+\023~\251\257?\277\267\351\317~\244\260?\310\037\014<\367\036\256?\211\014\253x#\363\260?\215\356 v\246\320\261?\007_\230L\025\214\252?\357=\\r\334)\255?\270\307\322\207.\250\257?\372\005\273a\333\242\254?\000\005\027+j0\255?O\006G\311\253s\254?\373:p\316\210\322\256?\322tv28J\256?\033\231G\376`\340\251?\217\344\362\037\322o\257?-9\356\224\016\326\257?\211\315\307\265\241b\254?\270\307\322\207.\250\257?x#\363\310\037\014\254?->\005\300x\006\255?Pp\261\242\006\323\260?o\022\203\300\312\241\265?5v\211\352\255\201\255?\305\346\343\332P1\256?\'1\010\254\034Z\264?\301n\330\266(\263\261?&\307\235\322\301\372\257?\225\232=\320\n\014\261?\004\342u\375\202\335\260?1\224\023\355*\244\254?B\262\200\t\334\272\253?\212\253\312\276+\202\257?\236\352\220\233\341\006\254?\306PN\264\253\220\262?\377\255d\307F \256?\376\232\254Q\017\321\260?]\212\253\312\276+\262?\2446qr\277C\261?\360\341\222\343N\351\260?\t\2176\216X\213\257?l\004\342u\375\202\255?\216\001\331\353\335\037\257?q=\n\327\243p\255?T\000\214g\320\320\257?\305\254\027C9\321\256?-C\034\353\3426\262?\346\"\276\023\263^\254?2\003\225\361\3573\256?X9\264\310v\276\257?}\350\202\372\2269\255?\345a\241\3264\357\260?\024\256G\341z\024\256?\004s\364\370\275M\257?mscz\302\022\257?\326>\035\217\031\250\254?-\312l\220IF\256?\227\377\220~\373:\260?\202\250\373\000\2446\261?-\312l\220IF\256?B\354L\241\363\032\253?C\034\353\3426\032\260?g~5\007\010\346\260?m\2132\033d\222\261?\252\361\322Mb\020\260?h\035UM\020u\257?\320\270p $\013\260?/\027\361\235\230\365\262?vq\033\r\340-\260?L\253!q\217\245\257?\002`<\203\206\376\261?$\1770\360\334{\260?\335\265\204|\320\263\261?\322W\220f,\232\256?BV\267zNz\257?\211\315\307\265\241b\254?\r\375\023\\\254\250\261?\312\246\\\341].\262?\003\220\332\304\311\375\256?\333r.\305Ue\257?l!\310A\t3\255?T\251\331\003\255\300\260?V\361F\346\221?\260?\373t<f\2402\256?\007wg\355\266\013\255?}\"O\222\256\231\254?\217St$\227\377\260?X\262c#\020\257\253?S\256\360.\027\361\255?F=D\243;\210\255?\325\347j+\366\227\255?\360\247\306K7\211\261?\322tv28J\256?m\312\025\336\345\"\256?\227\004\250\251ek\255?"
      }
    }
  }
}
node {
  name: "tensors/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "{\021m\307\324]y?/\301\251\017$\357l?\212\006)x\n\271r?\303}\344\326\244\333\202?\0260\201[w\363t?\334\270\305\374\334\320t?\237\220\235\267\261\331a? a\030\260\344*v?\373\007\221\0149\266n?M\333\277\262\322\244\204?\031:vP\211\353h?V\017\230\207L\371p?\226&\245\240\333K\212?u\254Rz\246\227h?\267\272\234\022\020\223\200?!\307\3263\204cv?\3706\375\331\217\024a?\230\370\243\2503\367p?\303e\0256\003\\`?HP\374\030s\327b?\350j+\366\227\335c?D\247\347\335XPh?\365)\307dq\377q?Z\202\214\200\nG`?\205\321\254l\037\362f?\371\241\322\210\231}~?\322\247U\364\207fn?bMeQ\330Eq?\206\220\363\376?Nh?\313h\344\363\212\247n?v\211\352\255\201\255r?\232\264\251\272G6w?\310[\256~l\222o?\350\026\272\022\201\352o?^\022gE\324Do?\276\274\000\373\350\324e?\"\244ng_yp?|\265\2438G\035]?f\237\307(\317\274\\?\213\033\267\230\237\033j?\325yT\374\337\021U?\235\014\216\222W\347h?\317\232\037\177iQ\177?\337\247\252\320@,k?\003\225\361\3573.\\?h\005\206\254n\365l?>]\335\261\330&e?o\235\177\273\354\327m?\256&OYM\327c?a\301\375\200\007\006`?\242IbI\271\373\\?F\234N\262\325\345d?\204\022f\332\376\225e?)\255\277%\000\377t?\'jin\205\260Z?\002\364\373\376\315\213c?\201\254\247V_]e?\377un\332\214\323p?\221\233\341\006|~h?\343\251G\032\334\326f?\220h\002E,bx?\213\302.\212\036\370h?\330\203I\361\361\ty?\007\227\2169\317\330w?O\342s\'\330\177m?\366d\376\3217ij?\3120\356\006\321Zq?+\242&\372|\224a?II\017C\253\223\203?\251\240\242\352W:_?i\254\375\235\355\321[?\277\2024c\321t\226?\301\306\365\357\372\314y?N\013^\364\025\244i??\253\314\224\326\337b?\350\026\272\022\201\352_?\275\307\231&l?y?{O\345\264\247\344|?)\3537\023\323\205x?X\376|[\260Tg?\027\231\200_#Ip?erjg\230\332r?U\276g$B#x?\272\275\2441ZG\205?\304\225\263wF[e?l\220IF\316\302n?|\235\324\227\245\235j?\260n\274;2Vk?\206:\254p\313Gr?\222\004\341\n(\324s?\261\375d\214\017\263g?5GV~\031\214a?\245\362v\204\323\202W?\305\320\352\344\014\305]?K\2608\234\371\325l?B\353\341\313D\021r?M\275n\021\030\353k?\232\264\251\272G6w?F\234N\262\325\345d?s\275m\246B<r?\t3m\377\312Jc?\t\033\236^)\313p?f.py\254\031Y?X!\345\'\325>m?)\217n\204EEl?\310C\337\335\312\022}?h\035UM\020uo?\222\351\320\351y7V?0\271Qd\255\241t?p\t\300?\245Jd?]\000\032\245K\377r?\227\247sE)!x?\206B\004\034B\225\212?i\254\375\235\355\321{?8\030\352\260\302-o?D\211\226<\236\226o?&\3062\375\022\361v?\004\006I\237V\321o?\r\311\311\304\255\202x?\274\352\001\363\220)_?\241\366[;Q\022b?+\373\256\010\376\267r?\323Mb\020X9\204?\264pY\205\315\000g?$\n-\353\376\261p?:s\017\t\337\373[?\033G\254\305\247\000X?N\232\006E\363\000f?\216^\rP\032jt?\366d\376\3217ij?\367\003\036\030@\370p?\225\235~P\027)d?`\314\226\254\212pc?\203\372\2269]\026c?\343\337g\\8\020b?\021\212\255\240i\211e?\334L\205x$^n?d!:\004\216\004Z??u\254Rz\246g?\177\302\331\255e2l?\377\t.V\324`j?\222\0149\266\236!l?\2748\361\325\216\342l?\201@g\322\246\352^?\276\2441ZGUc?\030D\244\246]L\203?@\336\253V&\374r?h\013\010\255\207/\203?;\221`\252\231\265d?4\210\017\354\370/`?\342[X7\336\035Y?9\234\371\325\034 \210?\346Ws\200`\216\236?V\243W\003\224\206Z?\351\013!\347\375\177l?\240\250lXSYd?\240\250lXSYt?\"\337\245\324%\343X?\266\276Hh\313\271d?\276\274\000\373\350\324e?\024\312\302\327\327\272t?6\247\222\001\240\212k?\234\276\236\257Y.k?i\211\225\321\310\347u?O;\3745Y\243n?\235\014\216\222W\347X?\347R\\U\366]a?IJz\030Z\235l?\361h\343\210\265\370t?C\030?\215{\363[?\300\261g\317ejb?X\340+\272\365\232^?: \t\373v\022q?\323\207.\250o\231s?\362\004\302N\261jP?\242\360\331:8\330k?\322\373\306\327\236Y\222?[\232[!\254\306r?\317v\226j\260\272O?\020\255\025m\216sk?\201\0050e\340\200f?\307.Q\2755\260u?\234\334\357P\024\350c?t|\2648c\230s?\016\2760\231*\030e???\214\020\036ml?\352\036\331\\5\317Q?f\340\200\226\256`[?\027\231\200_#I`?lxz\245,C\\?\033G\254\305\247\000\210?\252\361\322Mb\020x?\226\345\3532\374\247[?t\355\013\350\205;w?\224\205\257\257u\251q?\235*\3373\022\241a?[A\323\022+\243q?\321\255\327\364\240\240t?&\303\361|\006\324k?4\210\017\354\370/`?o\205\260\032KXk?\216\035T\342:\306e?\272\275\2441ZGu?u#,*\342tr?2\215&\027c`m?\314\354\363\030\345\231g?\273\227\373\344(@d?\200F\351\322\277$e?WuV\013\3541q?*6\346u\304![?r\026\366\264\303_c?-\221\013\316\340\357g?W\316\336\031mUr?\267\356\346\251\016\271\211?\206\306\023A\234\207s?v\211\352\255\201\255r?\036\026jM\363\216s?\031\344.\302\024\345r?\250\251ek}\221p?\255g\010\307,{b?\235\364\276\361\265gf?76;R}\347g?\337\030\002\200c\317n?\013\"R\323.\246i?\204\271\335\313}rd?%\354\333ID\370W?W\230\276\327\020\034g?#\236\354fF?j?\217\246z2\377\350k?\024|\323\364\331\001w?\365\202Os\362\"c?\204H\206\034[\317`?\254\031\031\344.\302d??u\254Rz\246g?\034wJ\007\353\377l?g\325\347j+\366g?@4\363\344\232\002i?)\260\000\246\014\034p?l\321\002\264\255fm?f\026\241\330\n\232f?\256\272\016\325\224d]?\177\237q\341@HV?\207\247W\3122\304\201?q9^\201\350Ii?\027f\241\235\323,p?\357=\\r\334)m?;\337O\215\227nb?\031\220\275\336\375\361~?\251\246$\353pte?\354Nw\236x\316f?9+\242&\372|t?-\221\013\316\340\357W?oj\240\371\234\273}?9\322\031\030yYc?\210\205Z\323\274\343d?\371f\233\033\323\023f?\331E\321\003\037\203u??RD\206U\274\201?\212\\p\006\177\277x?\377b\266dU\204k?\353#\360\207\237\377^?\222Z(\231\234\332Y?\365L/1\226\351w?D\365\326\300V\tV? \322o_\007\316Y?\2129\010:Z\325b?\234\276\236\257Y.k?\245K\377\222T\246h?R\234\243\216\216\253a?y\001\366\321\251+\177?\237Z}uU\240V?`=\356[\255\023g?x\357\2501!\346r?\257A_z\373sq?x`\000\341C\211f?u\254Rz\246\227h?0\017\231\362!\250Z?\317\303\tL\247u[?\267\0148K\311rR?\315\004\303\271\206\031Z?v\035\252)\311:l?\261\033\266-\312l`?\014\216\222W\347\030`?\377B\217\030=\267p?\265R\010\344\022Gn?\031\377>\343\302\201`?D\377\004\027+j\200?\001\334,^,\014a?\206u\343\335\221\261z?\240\031\304\007v\374g?b\326\213\241\234h\227?\344\017\006\236{\017g?\367\350\r\367\221[s?\334\363\374i\243:]?\354Nw\236x\316V?\211&P\304\"\206]?\037\204\200|\t\025l?\250\377\254\371\361\227f?\037\330\361_ \010`?\177\026K\221|%`?\220\236\"\207\210\233s?-\224LN\355\014s?ML\027b\365Gx?\337\247\252\320@,k?\206\001K\256b\361k?Uh \226\315\034b?w\241\271N#-e?[A\323\022+\243a?\3128F\262G\250Y?F\352=\225\323\236b?\223\031o+\2756[?\366XD^ RM?8\023\323\205X\375q?\325\314Z\nH\373_?\311\352V\317I\357{?\311\307\356\002%\005V?\221;[\366\332\"O?,\272\365\232\036\024d?\263\356\037\013\321!\200?\024\010;\305\252Ah?IbI\271\373\034\177?\340N\"\302\277\010Z?C\000p\354\331si?\237$]3\371fk?&p\353n\236\352`?\334\363\374i\243:]?\263\362\313`\214Hd?\342\314\257\346\000\301\\?\241\300;\371\364\330f?B\315\220*\212Wy?\243>\311\0356\221i?\350\021\243\347\026\272r?\221`\252\231\265\024`?7T\214\3637\241`?|b\235*\3373b?\037\234O\035\253\224n?27\337\210\356Yw?\333m\027\232\3534r?z\306\276d\343\301f?j\372\354\200\353\212i?]\241\017\226\261\241k?x\n\271R\317\202p?z\037Gsd\345g?b\024\004\217o\357j?\023a\303\323+ei?\320)\310\317F\256{?\261\244\334}\216\217f?.8\203\277_\314f?\245K\377\222T\246h?s\237\034\005\210\202i?\367\000\335\2273\333e?\274\221y\344\017\006~?B\262\200\t\334\272k?4,F]k\357s?\336\222\034\260\253\311s?\357\304\254\027C9q?b\326\213\241\234hw?td\345\227\301\030a?td\345\227\301\030q?O\000\305\310\2229f?\360\367\213\331\222UQ?a\301\375\200\007\006`?\211z\301\2479ya?\272\300\345\261fd`?\321<\200E~\375`?\251\240\242\352W:_?\362]J]2\216q?X\034\316\374j\016`?\005T8\202T\212]?\3164a\373\311\030o?zpw\326n\273p?\253\356\221\315U\363\\?\365\366\347\242!\343q?\254\373\307Bt\010\\?$c\265\371\177\325a?\265R\010\344\022Gn?\007\360\026HP\374\210?\251/K;5\227[?\2237\300\314w\360s?\'\374R?o*r?;\213\336\251\200{n?\210\330`\341$\315_?\034\320\322\025l#~?\177\302\331\255e2|?6\036l\261\333ge?d\tkc\354\204g?oJy\255\204\356r?\301\377V\262c#`?\033\323\023\226x@\211?\345\'\325>\035\217y?\345\236\256\356Xlc?\251/K;5\227{?\360\367\213\331\222Uq?\\\350J\004\252\177p?\234p\257\314[u]?\374\213\2401\223\250W?\316\341Z\355a/d?\317\243\342\377\216\250p?\3432nj\240\371l?\226\315\034\222Z(i?)z\340c\260\342t?\013\3541\221\322l^?_\037\235\272\362Yn?<-?p\225\'`?4j\276J>vW?l\357SUh f?L\376\'\177\367\216Z?Na\245\202\212\252\177?\363W\310\\\031Tk?\325a\205[>\222b?\234\276\236\257Y.[?\263@\273C\212\001b?\373\216\341\261\237\305r?\212T\030[\010rp?y\351&1\010\254\\?\210\323I\266\272\234b?\223\3367\276\366\314r?oG8-x\321w?_\rP\032j\024r?r\376&\024\"\340`?,\234\244\371cZk?\373\314Y\237rLv?\245\020\310%\216<`?\257\265\367\251*4p?X\2505\315;Nq?\210,\322\304;\300c?\177\207\242@\237\310s?D\365\326\300V\tf?V\'g(\356xc?\276\2441ZGUS?\363\346p\255\366\260w?\324\267\314\351\262\230x?\326\342S\000\214gp?\312\211v\025R~r?x\226 #\240\302a?\335\320\224\235~Pg?\024>[\007\007{c?\002eS\256\360.g?\214\237\306\275\371\rc?\014\347\032fh<a?\226\003=\324\266at?\222$\010W@\241n?\347\303\263\004\031\001e?E\204\177\0214fr?\016e\250\212\251\364c?h^\016\273\357\030n?\371\r\023\rR\360d?\177\026K\221|%`?J\266\272\234\022\020c?"
      }
    }
  }
}
node {
  name: "tensors/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\000\221~\373:p\276?\231\236\260\304\003\312\266?@\237\310\223\244k\266?\277\237\032/\335$\306?+\244\374\244\332\247\263?\233U\237\253\255\330\277?\261KTo\rl\265?\201\004\305\2171w\275?S\226!\216uq\273?\217\302\365(\\\217\312?\245\240\333K\032\243\265?\300\354\236<,\324\272?\034|a2U0\272?\362F\346\221?\030\260?p_\007\316\031Q\302?|a2U0*\301?\177\023\n\021p\010\265?\352\0044\0216<\275?t$\227\377\220~\263?\205B\004\034B\225\262?\373\350\324\225\317\362\264?J\007\353\377\034\346\263?\331\231B\3475v\271?\371k\262F=D\263?$\1770\360\334{\270?xz\245,C\034\273?R\270\036\205\353Q\300?\310A\t3m\377\262?c(\'\332UH\271?\331\224+\274\313E\264?_\014\345D\273\n\271?\374\030s\327\022\362\301?\330\365\013v\303\266\265?\253>W[\261\277\274?\343\307\230\273\226\220\277?\356\346\251\016\271\031\266?\205|\320\263Y\365\271?\274\000\373\350\324\225\257?\003\225\361\3573.\254?B\317f\325\347j\273?z\337\370\3323K\262?\236)t^c\227\270?\030&S\005\243\222\272?_\230L\025\214J\272?\345~\207\242@\237\270?\3019#J{\203\267?\201\354\365\356\217\367\262?X\3122\304\261.\276?\216\257=\263$@\265?\024D\335\007 \265\261?Z\360\242\257 \315\260?%\006\201\225C\213\264?e\245I)\350\366\262?\031x\356=\\r\264?\362\31567\246\'\264?\302Q\362\352\034\003\262?\317\275\207K\216;\265?\304\261.n\243\001\274?(\325>\035\217\031\260?\320\017#\204G\033\267?\234\242#\271\374\207\264?\313\025\336\345\"\276\263?B>\350\331\254\372\274?\262.n\243\001\274\265?\242\2647\370\302d\272?\217\036\277\267\351\317\266?\206r\242]\205\224\267?\252\232 \352>\000\261?\024\256G\341z\024\276?\rq\254\213\333h\260? )\"\303*\336\260?\034\353\3426\032\300\273?k\232w\234\242#\301?\222\355|?5^\272?\320y\215]\242z\263?\232\r2\311\310Y\260?F_A\232\261h\262?\257\224e\210c]\274?\303\231_\315\001\202\271?\276M\177\366#E\264?*t^c\227\250\266?\246\nF%u\002\272?\362A\317f\325\347\272?\2549@0G\217\267?a\370\210\230\022I\264?-\347R\\U\366\265?\203\213\0255\230\206\261?\272\325s\322\373\306\267?\332UH\371I\265\267?\342u\375\202\335\260\265?\"\246D\022\275\214\262?\227\213\370N\314z\261?\240\216\307\014T\306\257?\235\014\216\222W\347\260?j\023\'\367;\024\265?\261KTo\rl\265?\375\301\300s\357\341\262?\303\201\220,`\002\267?\n\021p\010Uj\266?\250\3431\003\225\361\267?:\227\342\252\262\357\262?\277\361\265g\226\004\270?\353n\236\352\220\233\261?\262.n\243\001\274\265?\276\2441ZGU\263?\226C\213l\347\373\301?a\310\352V\317I\267?\242\2647\370\302d\262?\035\376\232\254Q\017\271?$-\225\267#\234\266?Y\022\240\246\226\255\265?E\022\275\214b\271\265?\373\\m\305\376\262\273?\320\017#\204G\033\267?\267\321\000\336\002\t\272?!Y\300\004n\335\265?\334\334\230\236\260\304\263?\335$\006\201\225C\273?\021\307\272\270\215\006\300?a\310\352V\317I\257?6Y\243\036\242\321\265?\022\275\214b\271\245\265?p\224\274:\307\200\264?\037\277\267\351\317~\264?\327\300V\t\026\207\263?Q\3372\247\313b\262?\323Mb\020X9\264?\002\324\324\262\265\276\260?\356\261\364\241\013\352\263?\010=\233U\237\253\265?\271\307\322\207.\250\267?\201[w\363T\207\264?\341@H\0260\201\263?}\n\200\361\014\032\262?\354\3009#J{\263?\237\260\304\003\312\246\264?x\227\213\370N\314\262?\341\013\223\251\202Q\261?\226&\245\240\333K\262?\347R\\U\366]\261?\222\005L\340\326\335\264?Q\367\001Hm\342\264?\266\276Hh\313\271\264?\016\333\026e6\310\264?N(D\300!T\261?\366\227\335\223\207\205\272?\222\355|?5^\272?EdX\305\033\231\267?\263\007Z\201!\253\263?i5$\356\261\364\261?\267b\177\331=y\260?\276\301\027&S\005\303?\314\177H\277}\035\300?\240\375H\021\031V\261?\356\346\251\016\271\031\266?\214\276\2024c\321\264?\217N]\371,\317\263?\301\220\325\255\236\223\256?\234\277\t\205\0108\264?\352\225\262\014q\254\263?\031x\356=\\r\264?\033G\254\305\247\000\260?\315\307\265\241b\234\267?\307\235\322\301\372?\267?\370\307{\325\312\204\267?\326V\354/\273\'\257?hy\036\334\235\265\263?7\246\',\361\200\262?\003+\207\026\331\316\267?\367p\311q\247t\260?\205\266\234KqU\261?t^c\227\250\336\262?A`\345\320\"\333\271?FB[\316\245\270\262?\2549@0G\217\257?H\334c\351C\027\264?:\222\313\177H\277\275?X\377\3470_^\270?B\3475v\211\352\255?\351\354dp\224\274\262?8\333\334\230\236\260\264?\0358gDio\300?\270XQ\203i\030\266?l\354\022\325[\003\263?NE*\214-\004\271?2\353\305PN\264\263?P\031\377>\343\302\261?BC\377\004\027+\262?\275\214b\271\245\325\260?\370\215\257=\263$\260?n4\200\267@\202\302?-}\350\202\372\226\261?\355\323\361\230\201\312\260?\014\002+\207\026\331\276?.\312l\220IF\266?|\'f\275\030\312\261?\206U\274\221y\344\267?\322\214E\323\331\311\260?\2279]\026\023\233\267?t\265\025\373\313\356\271?\005i\306\242\351\354\264?O#-\225\267#\264?\256\273y\252Cn\266?>yX\2505\315\273?ffffff\266?\345a\241\3264\357\270?j\336q\212\216\344\262?V\324`\032\206\217\260?\226\262\014q\254\213\273?n\372\263\037)\"\263?\363\037\322o_\007\256?\274\"\370\337Jv\264?}?5^\272I\254?\206\304=\226>t\261?N\321\221\\\376C\272?xz\245,C\034\273?`vO\036\026j\265? \007%\314\264\375\263?\247\350H.\377!\265?r\026\366\264\303_\263?\375\202\335\260mQ\266?X>\313\363\340\356\264?it\007\2613\205\266?\314]K\310\007=\273?N]\371,\317\203\263?\021\036m\034\261\026\257?%\314\264\375++\265?\016\241J\315\036h\265?aTR\'\240\211\270?\212\216\344\362\037\322\277?\212\310\260\21272\267?1|DL\211$\262?\243\227Q,\267\264\262?n/i\214\326Q\265?r\205w\271\210\357\264?\253\262\357\212\340\177\263?\237\037F\010\2176\266?t\230//\300>\262?\276je\302/\365\263?V\331wE\360\277\265?\2657\370\302d\252\260?\314\013\260\217N]\261?\013F%u\002\232\300?\221\270\307\322\207.\260?Y\335\3529\351}\263?\240\025\030\262\272\325\263?\005Q\367\001Hm\262?G\003x\013$(\276?%\351\232\3117\333\264? \007%\314\264\375\263?d#\020\257\353\027\264?B\324}\000R\233\260?\013F%u\002\232\300?\205w\271\210\357\304\264?\266\363\375\324x\351\266?\346\"\276\023\263^\264?\356|?5^\272\271?!\037\364lV}\276?\331_vO\036\026\272?\373:p\316\210\322\276?_\315\001\2029z\264?=\233U\237\253\255\260?\177\301n\330\266(\263?\263\322\244\024t{\261?\251\244N@\023a\263?\265\241b\234\277\t\265?y]\277`7l\263?z\374\336\246?\373\261?\207\212q\376&\024\262?.\312l\220IF\266?K\310\007=\233U\257?\3230|DL\211\264?\350e\024\313-\255\266?!\260rh\221\355\264?\360\242\257 \315X\264?\300s\357\341\222\343\256?~\306\205\003!Y\260?\254\004\213\303\231_\255?b\234\277\t\205\010\260?\213\340\177+\331\261\261?\303\323+e\031\342\270?\254\250\3014\014\037\261?\311\352V\317I\357\263?\274\226\220\017z6\273?t\230//\300>\262?JF\316\302\236v\260?\223R\320\355%\215\271?\335\265\204|\320\263\261?\341\321\306\021k\361\261?H\247\256|\226\347\261?\237\002`<\203\206\266?\307.Q\2755\260\265?E\r\246a\370\210\270?\253Cn\206\033\360\261?\234\247:\344f\270\261?\370\031\027\016\204d\261?\340(yu\216\001\261?\335\265\204|\320\263\261?\365\025\244\031\213\246\263?)a\246\355_Y\261?\t\341\321\306\021k\271?U\207\334\0147\340\263?\004\034B\225\232=\270?\2451ZGU\023\264?\347\207\021\302\243\215\263?\277}\0358gD\261?\201\004\305\2171w\265?\230\243\307\357m\372\263?\244\307\357m\372\263\257?*\251\023\320D\330\260?q\247t\260\376\317\261?\270\257\003\347\214(\255?pZ\360\242\257 \265?+\336\310<\362\007\263?\327L\276\331\346\306\264?\315\307\265\241b\234\257?\234\254Q\017\321\350\256?\224\023\355*\244\374\264?5^\272I\014\002\273?;X\377\3470_\256?\331\323\016\177M\326\270?p\346Ws\200`\256?h\256\323HK\345\265?-C\034\353\3426\272?S?o*Ra\264?\3745Y\243\036\242\261?\303_\2235\352!\262?\335\230\236\260\304\003\262?\312\241E\266\363\375\264?x\006\r\375\023\\\264?AH\0260\201[\267?\273\362Y\236\007w\267?\374\214\013\007B\262\260?vl\004\342u\375\262?\373\320\005\365-s\262?\300\262\322\244\024t\263?1\231*\030\225\324\271?\277}\0358gD\271?\255\300\220\325\255\236\263?\217N]\371,\317\263?\344I\3225\223o\266?\364\375\324x\351&\271?\221\017z6\253>\267?\276M\177\366#E\264?\3171 {\275\373\263?{\240\025\030\262\272\265?S\"\211^F\261\264?h\005\206\254n\365\264?\311\002&p\353n\266?\3122\304\261.n\263?F\266\363\375\324x\261?\341z\024\256G\341\272?Tt$\227\377\220\266?\266\177e\245I)\270?\326Q\325\004Q\367\261?\364\211<I\272f\262?C!\002\016\241J\265?\366\264\303_\2235\262?\331\010\304\353\372\005\263?\371\3323K\002\324\264?\243\006\3230|D\254?zS\221\nc\013\261?Hm\342\344~\207\262?V\324`\032\206\217\260?\360\371a\204\360h\263?\256\266b\177\331=\261?D\335\007 \265\211\263?\001\336\002\t\212\037\263?\000\3063h\350\237\260?\245\203\365\177\016\363\265?xb\326\213\241\234\270?\374R?o*R\261?s\021\337\211Y/\266?\310\230\273\226\220\017\262?\237\007wg\355\266\263?\307\272\270\215\006\360\266?\270\036\205\353Q\270\276?lC\3058\177\023\262?\006\r\375\023\\\254\270?\205|\320\263Y\365\301?\363\216St$\227\267?\201\t\334\272\233\247\262?;\307\200\354\365\356\267?W[\261\277\354\236\274?\0054\0216<\275\262?r\304Z|\n\200\261?I\3642\212\345\226\266?\277\232\003\004s\364\260?l\t\371\240g\263\272?\022\210\327\365\013v\263?\334\334\230\236\260\304\263?\250W\3122\304\261\266?\331_vO\036\026\272?\017\013\265\246y\307\271?\215\321:\252\232 \262?A\267\2274F\353\260?\005\335^\322\030\255\263?\221\nc\013A\016\262?\340\271\367p\311q\267?`\260\033\266-\312\264?\227\220\017z6\253\276?\327\027\tm9\227\262?>\355\360\327d\215\262?\312\370\367\031\027\016\264?-\255\206\304=\226\256?\354\243SW>\313\263?3\247\313bb\363\261?\222\005L\340\326\335\264?\024\313-\255\206\304\265?\327n\273\320\\\247\261?O@\023a\303\323\263?\315\006\231d\344,\264?\376\016E\201>\221\267?\312\216\215@\274\256\267?\343\307\230\273\226\220\257?S\320\355%\215\321\262?\340\204B\004\034B\265?\300\354\236<,\324\272?|\270\344\270S:\270?\007|~\030!<\262?\276\366\314\222\0005\265?4\235\235\014\216\222\267?l\354\022\325[\003\263?\342\036K\037\272\240\266?p\224\274:\307\200\264?\373\005\273a\333\242\264?\341E_A\232\261\270?w28J^\235\263?\303_\2235\352!\262?\014\002+\207\026\331\256?\305 \260rh\221\275?K\216;\245\203\365\267?y\351&1\010\254\264?\360K\375\274\251H\265?}DL\211$z\261?5^\272I\014\002\273?>yX\2505\315\263?\333P1\316\337\204\262?p\231\323e1\261\261?\005\305\2171w-\261?\273\233\247:\344f\270?\203\206\376\t.V\264?\254\213\333h\000o\261?\312\375\016E\201>\261?u\223\030\004V\016\265?:\314\227\027`\037\265?\010\254\034Zd;\267?J{\203/L\246\262?B\354L\241\363\032\263?"
      }
    }
  }
}
node {
  name: "tensors/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "33333\263^@\315\314\314\314\314\234`@\000\000\000\000\000@`@\205\353Q\270\036eS@33333\343`@\024\256G\341z\244T@fffff\346]@\315\314\314\314\314\214V@\000\000\000\000\000\340U@\256G\341z\024\376T@\315\314\314\314\314\254Y@fffff\346Y@\315\314\314\314\314\214`@\315\314\314\314\314\354Y@ffffffW@\037\205\353Q\270.X@\217\302\365(\\\257W@fffff\006[@\000\000\000\000\000@`@=\n\327\243p\335U@\270\036\205\353QhU@\354Q\270\036\205+N@\000\000\000\000\000\240Y@fffff&a@\000\000\000\000\000\200[@\000\000\000\000\000\000]@\n\327\243p=ZX@fffff\206^@\232\231\231\231\231\231Y@\000\000\000\000\000\300\\@333333_@\354Q\270\036\205{S@333333\\@\232\231\231\231\231\371_@\000\000\000\000\000\300Z@fffff\206[@\270\036\205\353QhW@\327\243p=\n\247T@\303\365(\\\217\342W@\232\231\231\231\231\031V@\354Q\270\036\205\213U@\232\231\231\231\231\371Q@\232\231\231\231\231\t`@\024\256G\341z\324U@{\024\256G\341ZU@\315\314\314\314\314\354^@{\024\256G\341\332I@\037\205\353Q\270~U@\303\365(\\\217\202S@\n\327\243p=\272U@\256G\341z\024\256R@=\n\327\243p\315U@=\n\327\243p\355R@33333\023^@q=\n\327\243PX@\366(\\\217\302UR@\000\000\000\000\000`_@33333\343W@\327\243p=\n\247T@\354Q\270\036\205+K@33333#P@\024\256G\341zTK@{\024\256G\341\032X@\232\231\231\231\231\231M@\\\217\302\365(\254T@\232\231\231\231\231YX@\256G\341z\024\016N@33333\363Q@\205\353Q\270\036eM@H\341z\024\256WT@fffff\346^@\205\353Q\270\036eM@\315\314\314\314\314\214\\@\354Q\270\036\205\233V@\\\217\302\365(\314S@fffff\006Z@\n\327\243p=\372U@\315\314\314\314\314\014^@fffff\366a@\\\217\302\365(\314T@\244p=\n\327sR@\217\302\365(\\\237U@\000\000\000\000\000pe@33333#`@\315\314\314\314\314<S@fffffF^@\000\000\000\000\000\220W@\000\000\000\000\000\200^@R\270\036\205\353\361S@\341z\024\256G\361W@\024\256G\341z\244W@\315\314\314\314\314\014Y@\217\302\365(\\/U@fffff\246U@33333\023Y@\315\314\314\314\314\214`@\303\365(\\\217rS@\256G\341z\024\016O@\366(\\\217\302\225R@\037\205\353Q\270\236W@33333\003V@\205\353Q\270\036\345E@\256G\341z\024NS@\232\231\231\231\231\371O@\n\327\243p=\332P@=\n\327\243p\315U@{\024\256G\341\312R@q=\n\327\243\300S@\232\231\231\231\231\031c@\037\205\353Q\270\036R@\000\000\000\000\000@O@\232\231\231\231\231\211T@\205\353Q\270\036uX@)\\\217\302\365(Q@\354Q\270\036\205\353K@R\270\036\205\353!S@\037\205\353Q\270^M@)\\\217\302\365\250X@\315\314\314\314\314lZ@\315\314\314\314\314\214\\@\366(\\\217\302UR@\232\231\231\231\231Y^@fffff\306d@R\270\036\205\353\221W@fffff\206U@\\\217\302\365(\034V@q=\n\327\243\360U@\232\231\231\231\231\331^@\205\353Q\270\036\345X@\315\314\314\314\314L`@\205\353Q\270\036\305S@\315\314\314\314\314lY@\315\314\314\314\314\214Z@\000\000\000\000\000\200Y@\315\314\314\314\314\014^@\256G\341z\024nT@\256G\341z\024\256R@\244p=\n\327CR@fffff6X@\000\000\000\000\000@R@\037\205\353Q\270\236N@fffffFZ@\n\327\243p=jR@\217\302\365(\\\357T@q=\n\327\243\020Q@\327\243p=\n\207S@\217\302\365(\\\277S@\366(\\\217\302uX@\256G\341z\024~W@H\341z\024\256\007V@q=\n\327\243\340T@\303\365(\\\217\242J@\244p=\n\327\343O@H\341z\024\256\267Q@\244p=\n\327SU@\341z\024\256G\221S@\232\231\231\231\231Y]@\232\231\231\231\231\031[@\366(\\\217\3025S@\\\217\302\365(,Q@fffff\006S@33333\223_@fffffV`@fffff\366S@33333\003c@\000\000\000\000\000\340W@\341z\024\256G1Q@33333S[@fffff\006]@\256G\341z\024\016X@fffff\266S@\366(\\\217\302uU@\000\000\000\000\000\240Y@=\n\327\243p\215Q@\217\302\365(\\\337P@\366(\\\217\3025K@fffff&P@33333S[@q=\n\327\243\200T@\303\365(\\\217RT@33333\303f@fffff\326a@\315\314\314\314\314LY@R\270\036\205\353aR@{\024\256G\341\272X@\341z\024\256G\341O@fffff\246]@\354Q\270\036\205\253R@\341z\024\256G\321R@\205\353Q\270\036\265S@H\341z\024\256\227W@\341z\024\256G\201T@=\n\327\243p]N@\232\231\231\231\231IT@\232\231\231\231\231\031Y@R\270\036\205\353\241T@\270\036\205\353Q\250V@\232\231\231\231\231Y]@\000\000\000\000\000\340_@\217\302\365(\\\237W@\303\365(\\\217\242S@fffff\306\\@\315\314\314\314\314\334c@\244p=\n\327\343V@\366(\\\217\302ET@R\270\036\205\353\261X@\366(\\\217\302uO@\315\314\314\314\314l[@\341z\024\256G\301U@{\024\256G\341\212X@fffff\326`@q=\n\327\243\340R@\000\000\000\000\000\220g@\000\000\000\000\000\240\\@H\341z\024\2567W@=\n\327\243p\275V@\024\256G\341zTS@33333CP@fffff6`@\000\000\000\000\000\000`@\270\036\205\353Q\370U@\366(\\\217\302%V@H\341z\024\256GP@fffff\246Y@33333#U@q=\n\327\243 W@H\341z\024\256\247P@\315\314\314\314\314\\X@fffffVT@q=\n\327\243PU@\232\231\231\231\231Y\\@q=\n\327\243\360Q@\303\365(\\\217\262Q@\315\314\314\314\314\314`@{\024\256G\341\032N@\303\365(\\\217rV@\000\000\000\000\0000c@\000\000\000\000\000\220`@33333#W@\232\231\231\231\231Y\\@\270\036\205\353Q\330U@\327\243p=\n\247S@\354Q\270\036\205{R@\303\365(\\\217\"V@33333#`@\256G\341z\024\256P@\270\036\205\353Q\010U@\315\314\314\314\314<U@q=\n\327\243\000Q@H\341z\024\256wR@\315\314\314\314\314\\a@R\270\036\205\353QR@fffffV`@\000\000\000\000\000@\\@\000\000\000\000\000\240_@\354Q\270\036\205\333V@33333\263`@\315\314\314\314\314\314Y@\315\314\314\314\314\214[@\315\314\314\314\314\354Y@\315\314\314\314\314\234`@\000\000\000\000\000\300[@\232\231\231\231\231\231\\@\000\000\000\000\000\000Y@fffff\346[@fffff\366`@R\270\036\205\353QQ@\n\327\243p=\312U@\270\036\205\353Q\230T@\000\000\000\000\000`Q@33333\223V@\037\205\353Q\270\016R@\232\231\231\231\231ib@\000\000\000\000\000\300N@\315\314\314\314\314\314\\@\315\314\314\314\314\014S@\303\365(\\\217\362Q@\232\231\231\231\2319^@\217\302\365(\\\217U@\217\302\365(\\?V@\315\314\314\314\314\214_@\217\302\365(\\\217R@\315\314\314\314\314\314_@333333[@\205\353Q\270\036\005U@\205\353Q\270\036\365S@H\341z\024\256wS@)\\\217\302\365xT@\256G\341z\024nR@{\024\256G\341\nR@R\270\036\205\353\001X@R\270\036\205\353AX@)\\\217\302\365\310T@\303\365(\\\217\342R@R\270\036\205\353qT@\244p=\n\327\003V@)\\\217\302\365HQ@\000\000\000\000\000\300R@\256G\341z\024\316V@fffff\266P@\000\000\000\000\0000`@\354Q\270\036\205\033T@fffff\326`@\327\243p=\n\267P@\366(\\\217\302eR@\037\205\353Q\270\216R@\024\256G\341z\004U@\256G\341z\024.L@\\\217\302\365(lU@=\n\327\243p\255T@\205\353Q\270\036\225R@\354Q\270\036\205+W@\303\365(\\\217\222T@\037\205\353Q\270nR@\354Q\270\036\205\013K@\\\217\302\365(\314S@\000\000\000\000\000PS@\315\314\314\314\314\254]@)\\\217\302\365\010N@fffff\246S@\341z\024\256G\241P@33333c`@\024\256G\341z\264T@\315\314\314\314\314\374`@q=\n\327\243\200S@\000\000\000\000\000PT@R\270\036\205\353\201V@\366(\\\217\302\005S@\232\231\231\231\231\271Z@\000\000\000\000\000\340Z@33333sZ@\341z\024\256G!U@\\\217\302\365(\374Q@\270\036\205\353Q\330Q@\270\036\205\353QxS@33333\363[@\205\353Q\270\036\005U@\232\231\231\231\231\271^@\n\327\243p=\032P@33333cc@\232\231\231\231\231\211W@R\270\036\205\353\321N@\217\302\365(\\\337Q@\315\314\314\314\314<`@R\270\036\205\353\301R@\315\314\314\314\314\214P@\n\327\243p=*S@H\341z\024\256\267W@\341z\024\256GAR@\037\205\353Q\270NS@\315\314\314\314\314lR@fffff\306Z@fffff\306e@\000\000\000\000\000\200X@\217\302\365(\\\317Q@{\024\256G\341zT@\366(\\\217\302EU@\341z\024\256G!V@\037\205\353Q\270^L@)\\\217\302\365\350M@{\024\256G\341\332S@\217\302\365(\\OU@H\341z\024\256wT@fffff\246Z@\037\205\353Q\270^U@\232\231\231\231\231\271`@fffff\266`@\244p=\n\327\223S@\315\314\314\314\314\234a@ffffffb@\000\000\000\000\000@[@\232\231\231\231\231iX@\232\231\231\231\231\251a@\232\231\231\231\231\331`@\366(\\\217\302\365U@33333\223Z@\232\231\231\231\231\211Q@)\\\217\302\365xU@\341z\024\256G\021V@33333SR@\n\327\243p=JR@{\024\256G\341\252Q@\000\000\000\000\000\260S@)\\\217\302\365(T@\303\365(\\\217rU@\256G\341z\024~W@R\270\036\205\353\261S@H\341z\024\256\027V@\270\036\205\353QXR@\315\314\314\314\314\034`@\000\000\000\000\000pP@\303\365(\\\217\242K@\232\231\231\231\231\231Y@\315\314\314\314\314\014b@\024\256G\341z\204S@\000\000\000\000\000pV@fffff\006V@33333\303T@\244p=\n\327\223Q@q=\n\327\243\320R@\232\231\231\231\231\031_@)\\\217\302\365\010S@\354Q\270\036\205\013U@\354Q\270\036\205\313T@\303\365(\\\217\222S@)\\\217\302\365\230Q@33333\023Z@\270\036\205\353Q\250T@33333s]@\n\327\243p=\232S@\217\302\365(\\\037R@{\024\256G\341\272Q@\000\000\000\000\000\340M@R\270\036\205\353aX@=\n\327\243p-X@)\\\217\302\365\030S@\315\314\314\314\314\314M@\232\231\231\231\231\271Y@\270\036\205\353Q8T@\315\314\314\314\314\274Q@\315\314\314\314\314\214R@\256G\341z\024\216X@=\n\327\243p\335R@=\n\327\243p]V@\327\243p=\n\367N@\270\036\205\353Q\230O@\217\302\365(\\\337P@\303\365(\\\2172Q@\256G\341z\024\236Q@\037\205\353Q\270>T@fffff\206Y@\256G\341z\024^T@\232\231\231\231\231\271`@\315\314\314\314\314\354^@)\\\217\302\365\270W@H\341z\024\256\307V@{\024\256G\341\252T@R\270\036\205\353qV@\354Q\270\036\205+V@\366(\\\217\302eV@\037\205\353Q\270\356Q@\232\231\231\231\231\031\\@H\341z\024\256\027V@\024\256G\341z\264P@\000\000\000\000\000`]@\327\243p=\ngS@33333S]@\270\036\205\353Q\370W@\000\000\000\000\000\220W@"
      }
    }
  }
}
node {
  name: "tensors/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "!\260rh\221-!@\311v\276\237\032/\013@\327\243p=\nW\022@\217\302\365(\\\217\013@\215\227n\022\203\300\025@#\333\371~j\274\001@q=\n\327\243p\t@\r\002+\207\026\331\016@sh\221\355|?\003@\035Zd;\337O\000@\355|?5^\272\003@O\215\227n\022\203\014@\244p=\n\327#&@\323Mb\020X9\007@\260rh\221\355|\000@\324x\351&1\010\007@\217\302\365(\\\217\t@\241E\266\363\375\324\016@\366(\\\217\302u\027@\021X9\264\310v\000@T\343\245\233\304 \366?%\006\201\225C\213\376?\337O\215\227n\022\013@\203\300\312\241E6\021@R\270\036\205\353\321\025@\264\310v\276\237\032\035@\341z\024\256G\341\000@\273I\014\002+\207\026@\226C\213l\347\373\013@\037\205\353Q\270\236\022@\262\235\357\247\306K\026@\315\314\314\314\314\314\013@\312\241E\266\363\375\017@\323Mb\020X9\014@\021X9\264\310v\001@\252\361\322Mb\020\010@\250\306K7\211A\005@\270\036\205\353Q\270\362?\201\225C\213l\' @\270\036\205\353Q\270\370?\363\375\324x\351&\371?\363\375\324x\351&\375?)\\\217\302\365\250!@\321\"\333\371~j\003@\362\322Mb\020X\365?y\351&1\010,\021@\033/\335$\006\201\361?&1\010\254\034Z\376?\305 \260rh\221\375?\303\365(\\\217\302\373?\024\256G\341z\024\005@\311v\276\237\032/\367?R\270\036\205\353Q\370?5^\272I\014\202\023@-\262\235\357\247\306\000@\021X9\264\310v\001@\014\002+\207\026Y\023@\341z\024\256G\341\005@\303\365(\\\217\302\004@#\333\371~j\274\360?\345\320\"\333\371~\n@\214l\347\373\251\361\003@\312\241E\266\363}\025@w\276\237\032/\335\004@\321\"\333\371~j\007@\232\231\231\231\231\231\003@\217\302\365(\\\217\372?\262\235\357\247\306K\375?)\\\217\302\365(\376?\357\247\306K7\211\367?\214l\347\373\251\361\025@\362\322Mb\020X\t@\244p=\n\327\243\r@\034Zd;\337O\377?\327\243p=\n\327\373?\004V\016-\262\035\024@\235\357\247\306K7\005@X9\264\310v>\031@?5^\272IL!@\246\233\304 \260r\374?\004V\016-\262\235\000@\217\302\365(\\\217\370?\273I\014\002+\207\035@Nb\020X94\027@t\223\030\004V\016\367?T\343\245\233\304 \023@\234\304 \260rh\n@q=\n\327\243p\010@:\264\310v\276\237\001@O\215\227n\022\203\016@\010\254\034Zd;\002@\232\231\231\231\231\231\000@\317\367S\343\245\233\005@\230n\022\203\300\312\000@\332\316\367S\343\245\r@\235\357\247\306K7\022@H\341z\024\256G\003@t\223\030\004V\016\001@\232\231\231\231\231\231\367?5^\272I\014\002\003@\027\331\316\367S\343\006@\r\002+\207\026\331\370?!\260rh\221\355\362?\246\233\304 \260r\370?\321\"\333\371~j\002@H\341z\024\256G\003@=\n\327\243p=\001@\022\245\275\301\027&\353?\232\231\231\231\231\031$@Zd;\337O\215\371?`\345\320\"\333\371\005@\344\245\233\304 \260\005@\375\324x\351&1\013@\207\026\331\316\367S\000@D\213l\347\373\251\365?\000\000\000\000\000\000\000@=\n\327\243p=\n@\266\363\375\324x\351\007@c\020X9\264\310\014@A`\345\320\"\333\n@\331\316\367S\343\245\361?\024\256G\341z\224\023@w\276\237\032/\235#@\r\002+\207\026\331\376?\304 \260rh\221\363?\354Q\270\036\205\353\367?\324x\351&1\010\374?w\276\237\032/\335\024@\222\355|?5^\006@\037\205\353Q\270\036\006@\305 \260rh\221\377?\215\227n\022\203\300\010@\215\227n\022\203\300\006@Zd;\337O\215\377?T\343\245\233\304 \016@\034Zd;\337O\367?\252\361\322Mb\020\n@}?5^\272I\362?J\014\002+\207\326 @\004V\016-\262\235\375?\260rh\221\355|\363?o\022\203\300\312!\022@\312\241E\266\363\375\376?\240\032/\335$\006\373?L7\211A`\345\374?_\272I\014\002+\010@sh\221\355|?\002@_\272I\014\002+\n@\366(\\\217\302\365\000@_\272I\014\002+\371?\226C\213l\347\373\006@\026\331\316\367S\343\363?\230n\022\203\300J\020@w\276\237\032/\335\366?\264\310v\276\237\032\375?X9\264\310v\276\367?)\\\217\302\365(\026@\241E\266\363\375\324\013@#\333\371~j\274\362?!\260rh\221\355\374?\234\304 \260rh\017@\374\251\361\322M\342\033@^\272I\014\002+\023@H\341z\024\256G\377?\266\363\375\324xi\022@\372~j\274t\223\364?j\274t\223\030\004\362?j\274t\223\030\204\020@\r\002+\207\026Y\035@}?5^\272I\376?\270\036\205\353Q\270\372?\211A`\345\320\"\t@q=\n\327\243p\006@\324x\351&1\010\366?=\n\327\243p=\001@\366(\\\217\302\365\366?t\223\030\004V\016\t@A`\345\320\"\333\003@\004V\016-\262\235\361?\246\233\304 \260r\374?H\341z\024\256G\027@\016-\262\235\357\247\021@sh\221\355|?\003@;\337O\215\227n\376?\033/\335$\006\201\365?q=\n\327\243p\005@\337O\215\227n\022\375?\254\034Zd;\337\373?\223\030\004V\016-\360?\312\241E\266\363\375\372?L7\211A`\345\000@F\266\363\375\324x\024@\327\243p=\n\327\001@\211A`\345\320\"\005@\356|?5^\272\014@\027\331\316\367S\343\367?:\264\310v\276\237\023@sh\221\355|?\021@D\213l\347\373\251\016@\211A`\345\320\"\367?\021X9\264\310v\002@Nb\020X9\264\010@^\272I\014\002\253\022@\022\203\300\312\241E\017@`\345\320\"\333\371\003@/\335$\006\201\225\377?\022\203\300\312\241E\370?\006\201\225C\213l\020@A`\345\320\"\333\367?ffffff\370?\004V\016-\262\035\034@\264\310v\276\237\032\367?{\024\256G\341\3725@\211A`\345\320\"\016@\022\203\300\312\241E\014@!\260rh\221\355\376?\030\004V\016-\262\000@`\345\320\"\333\371\005@\246\233\304 \260\362\031@\026\331\316\367S\343\022@\250\306K7\211A\366?J\014\002+\207\026\000@\250\306K7\211A\372?\301\312\241E\266\363\001@\'1\010\254\034Z\000@\264\310v\276\237\032\016@\207\026\331\316\367S\363?h\221\355|?5\002@\037\205\353Q\270\036\367?t\223\030\004V\016\002@\323Mb\020X9\001@\214l\347\373\251\361\360?m\347\373\251\361\322\367?\211A`\345\320\"\016@q=\n\327\243p\363?x\351&1\010\254\372?\261rh\221\355\374\034@\372~j\274t\223\024@\327\243p=\n\327\000@j\274t\223\030\004\010@V\016-\262\235\357\377?\323Mb\020X9\350?\301\312\241E\266\363\002@n\022\203\300\312\241\006@\331\316\367S\343%\020@\211A`\345\320\"\004@V\016-\262\235\357\353?\277\237\032/\335$\003@\300\312\241E\266\363\367?`\345\320\"\333\371\372?\261rh\221\355|\031@E\266\363\375\324x\005@\366(\\\217\302u\020@%\006\201\225C\213\001@\306K7\211A`\016@\033/\335$\006\201\004@n\022\203\300\312\241\034@X9\264\310v>\020@=\n\327\243p=$@\246\233\304 \260r\376?\030\004V\016-\262\004@\004V\016-\262\235\004@/\335$\006\201\225\030@%\006\201\225C\213\370?Zd;\337O\215\006@\345\320\"\333\371\376\036@q=\n\327\243p\013@\356|?5^\272\004@#\333\371~j\274\370?\327\243p=\n\327\001@S\005\243\222:\001\353?:\264\310v\276\237\362?\226C\213l\347\273!@\000\000\000\000\000\000\374?\037\205\353Q\270\036\006@/\335$\006\201\025\020@\n\327\243p=\n\371?\201\225C\213l\347\002@!\260rh\221\355\372?H\341z\024\256G\375?c\020X9\264H\021@#\333\371~j\274\r@\323Mb\020X9\007@\203\300\312\241E\266\003@-\262\235\357\247\306\002@\357\247\306K7\211\373?/\335$\006\201\225\t@\327\243p=\n\327\361?j\274t\223\030\004\007@\335$\006\201\225C\377?q=\n\327\243p\021@\221\355|?5^\001@\030\004V\016-\262\363?X9\264\310v\276\363?q=\n\327\243p\365?D\213l\347\373\251\367?\023\203\300\312\241E\364?Zd;\337O\215\020@\372~j\274t\223\372?\035Zd;\337O\002@\246\233\304 \260\362\034@n\022\203\300\312\241\004@\235\357\247\306K7\037@\217\302\365(\\\217\360?\315\314\314\314\314\314\003@\306K7\211A`\377?\335$\006\201\225C\363?\350\373\251\361\322M\362?\277\237\032/\335$\370?\357\247\306K7\211\004@X9\264\310v\276\361?\335$\006\201\225C\377?\370S\343\245\233\304\002@\203\300\312\241E\266\361?-\262\235\357\247\306\001@\215\227n\022\203\300\360?6^\272I\014\002\367?\306K7\211A`\004@\363\375\324x\351&\016@L7\211A`\345\003@Zd;\337O\215\371?\214l\347\373\251\361\016@m\347\373\251\361\322\371??5^\272I\014\020@\362\322Mb\020X\377?t\223\030\004V\016\371?!\260rh\221\355\370?\333\371~j\274t\367?)\\\217\302\365(\n@\344\245\233\304 \260\007@\324x\351&1\010\005@\270\036\205\353Q\270\003@\362\322Mb\020X\377?\021X9\264\310v\370?\311v\276\237\032/\363?\350\373\251\361\322M\030@9\326\305m4\200\355?`\345\320\"\333y\021@\246\233\304 \260r\374?\r\002+\207\026\331\031@\321\"\333\371~j\005@w\276\237\032/\335\366?\256G\341z\024\256\365?\375\324x\351&\261\024@\327\243p=\n\327\002@\364\375\324x\351&\003@\214l\347\373\251\361\370?\262\235\357\247\306K\004@q=\n\327\243p\361?\244p=\n\327\243\003@\315\314\314\314\314\314\001@7\211A`\345\320\013@\027\331\316\367S\343\034@\030\004V\016-\262\020@\244p=\n\327\243\n@\030\004V\016-\262\t@\270\036\205\353Q\270\004@\227n\022\203\300\312\373?\317\367S\343\245\033\021@\211A`\345\320\"\n@o\022\203\300\312\241\002@\323Mb\020X9\000@\217\302\365(\\\217\370?\215\227n\022\203\300\002@\372~j\274t\223\360?\254\034Zd;\337\020@O\215\227n\022\203\034@\226C\213l\347\373\375?;\337O\215\227\356\036@X9\264\310v>\036@-\262\235\357\247\306\007@\234\304 \260rh\365?\250\306K7\211A\003@`\345\320\"\333y\020@\300\312\241E\266\363\365?/\335$\006\201\225\365?\201\225C\213l\347\002@ffffff\366?\004V\016-\262\235\361?\033/\335$\006\201\373?\214l\347\373\251\361\374?\345\320\"\333\371~\364?\246\233\304 \260r\374?V\016-\262\235\357\000@E\266\363\375\324x\371?\034Zd;\337O\007@-\262\235\357\247\306\000@\362\322Mb\020X\373?Zd;\337O\215\004@\324x\351&1\210\025@\305 \260rh\221\365?\274t\223\030\004V\t@33333\263\022@o\022\203\300\312\241\020@\201\225C\213l\347\375?\230n\022\203\300\312\363?i\221\355|?5\370?\362\322Mb\020X\005@h\221\355|?5\364?\315\314\314\314\314\314\001@\226C\213l\347\373\010@\374\251\361\322Mb\372?\223\030\004V\016-\003@\354Q\270\036\205\353\357?7\211A`\345\320\004@\277\237\032/\335$\010@D\213l\347\373\251\373?\321\"\333\371~j\004@\261rh\221\355|\010@o\022\203\300\312\241\000@X9\264\310v\276\365?E\266\363\375\324x\365?c\020X9\264\310\362?{\024\256G\341z\002@\362\322Mb\020X\010@\341z\024\256G\341\376?\337O\215\227n\022\006@\014\002+\207\026\331\"@;\337O\215\227n\370?\261rh\221\355|\377?\331\316\367S\343\245\001@\256G\341z\024.\023@x\351&1\010\254\372?w\276\237\032/\335\374?!\260rh\221m\022@\214l\347\373\251\361\362?O\215\227n\022\203\004@\354Q\270\036\205\353\001@`\345\320\"\333\371\356?\254\034Zd;\337\000@\356|?5^\272\013@o\022\203\300\312\241\001@\252\361\322Mb\020\010@F\266\363\375\324\370\021@\227n\022\203\300\312\371?n\022\203\300\312\241\371?-\262\235\357\247\306\004@\363\375\324x\351&\005@\331\316\367S\343\245\002@\030\004V\016-\262\371?\246\233\304 \260r\006@\335$\006\201\225C\n@\341z\024\256G\341\001@<\337O\215\227n\364?#\333\371~j\274\376?\327\243p=\n\327\375?\226C\213l\347\373\006@\203\300\312\241E\266\367?\201\225C\213l\347\377?"
      }
    }
  }
}
node {
  name: "tensors/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "33333\023g@\232\231\231\231\231\331c@\000\000\000\000\000\020c@H\341z\024\256\267X@fffff\006c@\232\231\231\231\231\331Y@fffff&c@fffff\246[@\315\314\314\314\314\214Z@\232\231\231\231\231iX@33333\363^@\000\000\000\000\000\020a@fffff\366b@\000\000\000\000\000\000\\@333333[@fffff\006_@\232\231\231\231\231\331^@\232\231\231\231\231\031a@\232\231\231\231\231Yg@\315\314\314\314\314\354X@\366(\\\217\302\005X@\270\036\205\353QHP@fffffF_@\000\000\000\000\000\200g@\000\000\000\000\000 f@\315\314\314\314\314\014c@\232\231\231\231\231\231^@\315\314\314\314\314|a@\232\231\231\231\231\251b@\315\314\314\314\314\334`@\000\000\000\000\000\020d@\232\231\231\231\231\331]@33333\003a@\315\314\314\314\314,d@fffff\226`@\000\000\000\000\000\260`@\315\314\314\314\314\014]@=\n\327\243p\035U@\303\365(\\\217\342W@33333\323Z@\000\000\000\000\000\240Y@\256G\341z\024\316U@\315\314\314\314\314,f@fffffF\\@\000\000\000\000\000`Z@33333\323b@\341z\024\256G\241L@33333\263Y@\270\036\205\353QxV@\000\000\000\000\000\300X@\037\205\353Q\270\276T@\205\353Q\270\036\005X@{\024\256G\341\352T@33333\343`@\315\314\314\314\314l]@\244p=\n\327sT@33333Ce@\315\314\314\314\314\354\\@\217\302\365(\\\217V@33333\363M@\327\243p=\nwQ@H\341z\024\256\007O@fffff\306]@\366(\\\217\302eP@33333\363[@fffff\246\\@R\270\036\205\353\301P@\000\000\000\000\000\200S@\000\000\000\000\000`P@{\024\256G\341jU@\315\314\314\314\314\274d@H\341z\024\256GO@33333\363b@33333\223[@=\n\327\243pmV@\232\231\231\231\231\031`@\327\243p=\n\327V@33333\303b@\232\231\231\231\231Ie@\270\036\205\353Q\370V@R\270\036\205\353!U@\n\327\243p=*X@fffffvj@\232\231\231\231\231\251a@R\270\036\205\353\361U@fffff\006c@\232\231\231\231\231\031[@\315\314\314\314\314\034c@=\n\327\243p\335V@\232\231\231\231\231Y[@\232\231\231\231\231\271Y@\000\000\000\000\000\340Z@\000\000\000\000\000 Z@\366(\\\217\302eX@\000\000\000\000\000\340^@33333\203c@)\\\217\302\365\210T@\244p=\n\3273Q@=\n\327\243p\275T@\000\000\000\000\000`[@fffff&[@\024\256G\341z4I@\205\353Q\270\036%U@\256G\341z\024\016R@\256G\341z\024\216R@\232\231\231\231\231\231Z@q=\n\327\243`U@\244p=\n\327cU@\232\231\231\231\231\331i@\217\302\365(\\\377T@\354Q\270\036\205\353Q@\000\000\000\000\000@V@\000\000\000\000\000\300Z@H\341z\024\256\'R@\037\205\353Q\270\036P@\303\365(\\\217\342U@\354Q\270\036\205\253O@fffff\306_@\232\231\231\231\231I`@fffff&`@\217\302\365(\\\357T@\315\314\314\314\314,b@\315\314\314\314\314\234f@33333\263Y@\217\302\365(\\\377V@33333\023Y@\315\314\314\314\314L\\@fffff\206b@\232\231\231\231\231yZ@fffff\226b@\270\036\205\353Q\330V@\232\231\231\231\2319_@fffff6`@33333\223\\@333333b@\303\365(\\\217\002W@\n\327\243p=\212U@\354Q\270\036\205\373S@\232\231\231\231\231Y^@R\270\036\205\353!S@R\270\036\205\353\241P@\000\000\000\000\000 `@\n\327\243p=\252T@{\024\256G\341JX@\303\365(\\\217rS@q=\n\327\243\220U@\354Q\270\036\205\373V@fffff\306Z@fffff&[@\\\217\302\365(LX@\024\256G\341z\264V@\n\327\243p=\nM@\303\365(\\\217\302Q@\000\000\000\000\000\020S@{\024\256G\341jX@fffff\246U@\315\314\314\314\314\234`@33333\023^@\205\353Q\270\036\005U@\024\256G\341z\204S@\n\327\243p=:V@33333Sb@\315\314\314\314\314\334e@\327\243p=\n\327U@fffff\006g@33333\223Y@\n\327\243p=jR@fffffV`@\232\231\231\231\231ic@fffff&Z@\256G\341z\024\276U@fffff&]@\000\000\000\000\000@_@q=\n\327\243\000R@\315\314\314\314\314LR@\256G\341z\024.M@\024\256G\341zDR@\000\000\000\000\000\340^@\354Q\270\036\205\013V@\315\314\314\314\314\254U@\232\231\231\231\231\231k@\000\000\000\000\000\020f@\232\231\231\231\231)`@H\341z\024\256\307S@33333s\\@)\\\217\302\365\330R@ffffffa@{\024\256G\341\032U@\024\256G\341z\344S@\232\231\231\231\231\251U@\232\231\231\231\231\231Z@\303\365(\\\217BV@\000\000\000\000\000 O@\315\314\314\314\314lY@fffff\246]@\244p=\n\327\263V@fffff\346[@33333#`@\315\314\314\314\314\314d@\232\231\231\231\231y]@\232\231\231\231\231\tW@\000\000\000\000\000pa@\000\000\000\000\000 f@\000\000\000\000\000\020`@33333\003X@\315\314\314\314\314l]@\205\353Q\270\036\305P@\000\000\000\000\000@`@\037\205\353Q\270\336X@\315\314\314\314\314l\\@\232\231\231\231\231\311c@\256G\341z\024NU@\000\000\000\000\000\220g@\232\231\231\231\231\031^@\000\000\000\000\000\300\\@\232\231\231\231\231\031Z@\315\314\314\314\314\214U@\232\231\231\231\231\331R@\232\231\231\231\231Ie@fffff\206f@=\n\327\243p\355X@fffffFY@\\\217\302\365(\374Q@\232\231\231\231\231y_@\366(\\\217\302\265X@\232\231\231\231\231\231[@\256G\341z\024^R@\315\314\314\314\314\214\\@{\024\256G\341\252V@33333SZ@\000\000\000\000\000\260`@\024\256G\341z\364S@\\\217\302\365(\234S@fffffVd@\217\302\365(\\oP@\341z\024\256G\221X@\000\000\000\000\000\300i@fffff6d@\000\000\000\000\000\240Y@fffff\246a@\327\243p=\n\207W@fffff\366T@\n\327\243p=\312U@\000\000\000\000\000\200X@\315\314\314\314\314\034b@\354Q\270\036\205kR@R\270\036\205\353\021V@\000\000\000\000\000@Z@\037\205\353Q\270~S@\270\036\205\353Q8T@\232\231\231\231\231\251d@H\341z\024\256\307T@\232\231\231\231\231\371c@\315\314\314\314\314\\`@33333cd@fffff\006[@33333Sf@33333\363]@fffff\366a@33333\223_@\232\231\231\231\231Id@fffff\006`@\315\314\314\314\314<a@\232\231\231\231\231\371\\@\000\000\000\000\000\220a@\000\000\000\000\000\300j@R\270\036\205\353\221S@\n\327\243p=jX@\341z\024\256GQV@q=\n\327\243 S@\\\217\302\365(\234W@\341z\024\256G\221S@\315\314\314\314\314|h@\366(\\\217\302\005Q@33333\343`@=\n\327\243p\335S@H\341z\024\256WS@\000\000\000\000\000 `@\n\327\243p=\272X@H\341z\024\256\227X@\232\231\231\231\231\371c@\315\314\314\314\314,U@\315\314\314\314\314\014c@\232\231\231\231\231\271_@H\341z\024\256\007W@\244p=\n\327cU@\315\314\314\314\314\014W@\232\231\231\231\231\331U@\341z\024\256G\221S@\303\365(\\\217\322S@\315\314\314\314\314lY@fffffF[@\244p=\n\3273V@fffff\026U@\303\365(\\\217\"V@{\024\256G\341\212W@{\024\256G\341\032R@fffffFU@33333sZ@fffff\206Q@33333ce@\270\036\205\353Q\010V@\232\231\231\231\231\331c@q=\n\327\243\260Q@\\\217\302\365(\254T@)\\\217\302\365XT@\000\000\000\000\000\000W@33333sN@\037\205\353Q\270\336W@=\n\327\243p}W@{\024\256G\341:T@\315\314\314\314\314\354Y@\303\365(\\\217\002W@\037\205\353Q\270NT@33333SL@\037\205\353Q\270\036U@ffffffT@\315\314\314\314\314\234a@H\341z\024\256\'Q@q=\n\327\243pT@R\270\036\205\353\341Q@fffff\306b@333333W@33333ce@\327\243p=\n\307V@\315\314\314\314\314,V@\232\231\231\231\231\231X@\217\302\365(\\\257T@\232\231\231\231\2319`@\315\314\314\314\314l\\@33333\023_@=\n\327\243p\315X@\n\327\243p=:S@\205\353Q\270\036\205T@R\270\036\205\353!U@fffff\346a@\270\036\205\353Q\330U@33333#d@\037\205\353Q\270\376Q@\315\314\314\314\314Li@\232\231\231\231\231\331[@\000\000\000\000\000\320Q@q=\n\327\243\360S@33333\263c@\n\327\243p=\nU@)\\\217\302\365\270Q@\303\365(\\\217\242U@\315\314\314\314\314\214\\@{\024\256G\341\352S@\366(\\\217\302\305T@\327\243p=\n\347T@\232\231\231\231\231\331]@\232\231\231\231\231\251l@\315\314\314\314\314L^@H\341z\024\256\347S@\341z\024\256GAV@\256G\341z\024\216W@\217\302\365(\\/X@\341z\024\256GQP@\303\365(\\\217\362R@\024\256G\341z\264U@\\\217\302\365(<W@\024\256G\341z\364U@\315\314\314\314\314L]@q=\n\327\243pW@fffff&d@\000\000\000\000\000\000d@fffffvW@\000\000\000\000\000\360h@\000\000\000\000\000`h@\232\231\231\231\231)`@\000\000\000\000\000 Z@33333\003c@\232\231\231\231\231\331d@\n\327\243p=\312X@fffffF\\@q=\n\327\243 S@\327\243p=\nGX@=\n\327\243p}X@q=\n\327\243\360V@\354Q\270\036\205;U@\037\205\353Q\270\356S@\327\243p=\n\327U@\037\205\353Q\270\316W@\366(\\\217\302%X@\315\314\314\314\314\214Y@\232\231\231\231\231\351U@\n\327\243p=\352X@\037\205\353Q\270\356S@\000\000\000\000\000\300a@\037\205\353Q\270NR@q=\n\327\243\000P@33333\303a@\000\000\000\000\000\200e@\205\353Q\270\036\025V@{\024\256G\341\032X@\205\353Q\270\036UX@\256G\341z\024\256V@\303\365(\\\2172T@\000\000\000\000\000\200U@33333\263b@)\\\217\302\365\350U@\244p=\n\327\023X@\\\217\302\365(lV@\327\243p=\n\007U@q=\n\327\243\260T@\232\231\231\231\231\371\\@\270\036\205\353Q\350V@33333Ca@\000\000\000\000\000@V@\024\256G\341zDU@\354Q\270\036\205\373S@\327\243p=\n\247P@\315\314\314\314\314\214[@fffff\206[@\366(\\\217\302EU@\037\205\353Q\270.Q@33333\243c@H\341z\024\256\007V@q=\n\327\243\320S@\354Q\270\036\205\233U@fffff\206\\@\354Q\270\036\205{T@\232\231\231\231\231YY@\303\365(\\\217\362Q@{\024\256G\341zQ@\n\327\243p=ZT@\\\217\302\365(\354T@fffff\226R@H\341z\024\2567V@\232\231\231\231\231Y_@\327\243p=\ngV@\000\000\000\000\000@b@\232\231\231\231\231)b@33333\223Y@\232\231\231\231\231y\\@)\\\217\302\365\310W@\315\314\314\314\314LY@\232\231\231\231\2319Y@R\270\036\205\353!X@)\\\217\302\365\210V@\232\231\231\231\231\231`@\232\231\231\231\231yX@fffffVQ@\232\231\231\231\231\251`@\037\205\353Q\270\036U@\315\314\314\314\314,b@\232\231\231\231\231yZ@fffff\006[@"
      }
    }
  }
}
node {
  name: "tensors/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "=\n\327\243p\3751@R\270\036\205\353\2214@q=\n\327\243\2603@\327\243p=\n\327&@\n\327\243p=J4@fffff\346(@\000\000\000\000\000@2@\354Q\270\036\205k+@\000\000\000\000\000\000*@\354Q\270\036\205\353(@\205\353Q\270\036\0050@\217\302\365(\\\217/@\354Q\270\036\205+3@33333\263/@\366(\\\217\302u+@\024\256G\341z\024-@\\\217\302\365(\\-@\341z\024\256G!0@\217\302\365(\\\3173@\024\256G\341z\024+@)\\\217\302\365(*@5^\272I\014\002#@\256G\341z\024\256.@)\\\217\302\365(5@fffff\2460@\244p=\n\327#1@)\\\217\302\365(-@\\\217\302\365(\2342@\232\231\231\231\231\231.@R\270\036\205\353\2211@\341z\024\256G\2412@\256G\341z\024\256\'@\205\353Q\270\036\0051@\205\353Q\270\036E3@\341z\024\256G!0@=\n\327\243p\2750@\000\000\000\000\000\200,@\217\302\365(\\\017*@{\024\256G\341\372-@\366(\\\217\302\365*@\341z\024\256G\341*@fffff\346%@R\270\036\205\353\0213@\217\302\365(\\\217*@\327\243p=\nW*@fffff\2462@1\010\254\034Zd @\327\243p=\nW*@\232\231\231\231\231\031(@{\024\256G\341\372*@\205\353Q\270\036\205\'@H\341z\024\256G+@\341z\024\256G\341\'@\270\036\205\353Q82@333333.@\n\327\243p=\n\'@\366(\\\217\30253@\354Q\270\036\205k-@\232\231\231\231\231\031*@#\333\371~j<!@\327\243p=\nW$@\030\004V\016-2!@\000\000\000\000\000\200,@\177j\274t\223X\"@\\\217\302\365(\\)@\217\302\365(\\\217-@\256G\341z\024\356\"@\037\205\353Q\270\236&@\002+\207\026\331\016\"@\217\302\365(\\\217)@q=\n\327\243\3602@-\262\235\357\247\306!@3333331@\232\231\231\231\231\231+@\037\205\353Q\270\236(@R\270\036\205\353\0210@\217\302\365(\\\017+@\315\314\314\314\314\0142@\256G\341z\024.4@\270\036\205\353Q\270)@fffff\346&@\256G\341z\024\256*@\270\036\205\353Q89@\232\231\231\231\231\0313@\000\000\000\000\000\000(@\366(\\\217\302u2@\366(\\\217\302\365,@\205\353Q\270\036\0053@\270\036\205\353Q\270(@H\341z\024\256G-@=\n\327\243p=-@=\n\327\243p\275.@\n\327\243p=\212*@fffff\346*@\037\205\353Q\270\036.@\303\365(\\\217B4@\\\217\302\365(\\(@m\347\373\251\361\222#@333333\'@\327\243p=\n\327,@\270\036\205\353Q8+@\006\201\225C\213\354\033@\\\217\302\365(\\(@\215\227n\022\203\300#@{\024\256G\341\372$@\270\036\205\353Q8*@H\341z\024\256G\'@\270\036\205\353Q\270(@\205\353Q\270\036E6@\256G\341z\024\256&@\350\373\251\361\322\215#@\303\365(\\\217B)@\205\353Q\270\036\205,@\205\353Q\270\036\005%@\301\312\241E\266s!@\\\217\302\365(\334\'@fffff\346!@=\n\327\243p\275-@\217\302\365(\\\217/@33333\3631@R\270\036\205\353\321&@)\\\217\302\365\2502@\000\000\000\000\000@8@\000\000\000\000\000\000-@=\n\327\243p\275*@33333\263+@\270\036\205\353Q8+@\000\000\000\000\000\0003@333333.@\n\327\243p=\3123@\341z\024\256Ga(@\354Q\270\036\205\353.@)\\\217\302\365(0@\354Q\270\036\205k/@33333s2@\n\327\243p=\212)@\354Q\270\036\205k\'@\\\217\302\365(\334&@fffff\346-@\217\302\365(\\\217&@`\345\320\"\333y#@\\\217\302\365(\0340@\\\217\302\365(\334&@\315\314\314\314\314\314)@\000\000\000\000\000\200%@\315\314\314\314\314\314\'@\232\231\231\231\231\231\'@fffff\346-@\341z\024\256G\341,@{\024\256G\341z+@\000\000\000\000\000\000*@\343\245\233\304 p @\203\300\312\241Ev#@\315\314\314\314\314L&@\315\314\314\314\314L*@\000\000\000\000\000\200(@\256G\341z\024\2561@\327\243p=\n\3270@\037\205\353Q\270\036(@\315\314\314\314\314\314%@\000\000\000\000\000\200\'@q=\n\327\24303@\327\243p=\n\2273@\256G\341z\024\256(@\205\353Q\270\036E7@q=\n\327\243\360-@\232\231\231\231\231\231%@H\341z\024\256\3070@\270\036\205\353Qx1@q=\n\327\243\360-@\244p=\n\327\243(@\\\217\302\365(\334*@\354Q\270\036\205\353.@)\\\217\302\365(&@R\270\036\205\353Q%@d;\337O\215W!@\002+\207\026\331\316#@\366(\\\217\302u0@\205\353Q\270\036\005*@\037\205\353Q\270\236)@\270\036\205\353Q8;@\327\243p=\n\0275@ffffff/@R\270\036\205\353\321&@\217\302\365(\\\217.@)\\\217\302\365($@\217\302\365(\\O2@\354Q\270\036\205k\'@\037\205\353Q\270\236\'@\232\231\231\231\231\231(@q=\n\327\243p,@\n\327\243p=\212)@q=\n\327\243p#@\256G\341z\024\256(@\270\036\205\353Q\270-@R\270\036\205\353\321)@\n\327\243p=\212+@\024\256G\341z\0242@\256G\341z\024.3@fffff\346,@\366(\\\217\302u(@\n\327\243p=\2121@\n\327\243p=J7@\037\205\353Q\270\236+@q=\n\327\243\360(@=\n\327\243p=.@\215\227n\022\203\300#@\303\365(\\\217\0021@\270\036\205\353Q8*@\n\327\243p=\212.@\024\256G\341z\2244@\256G\341z\024\256\'@\\\217\302\365(\034<@\354Q\270\036\205k1@\341z\024\256Ga,@\270\036\205\353Q\270+@H\341z\024\256\307\'@ffffff$@\315\314\314\314\314\3143@H\341z\024\256\2073@\315\314\314\314\314L+@\037\205\353Q\270\036+@\\\217\302\365(\\$@\000\000\000\000\000\200/@\n\327\243p=\212*@\256G\341z\024\256,@\341z\024\256G\341$@\000\000\000\000\000\000.@=\n\327\243p=)@)\\\217\302\365\250)@\315\314\314\314\314\0141@\244p=\n\327\243&@q=\n\327\243p&@\303\365(\\\217\2024@\374\251\361\322M\"#@\217\302\365(\\\017,@\366(\\\217\30257@{\024\256G\341z4@q=\n\327\243p,@\366(\\\217\302u1@H\341z\024\256G+@\327\243p=\n\327(@\232\231\231\231\231\231&@\000\000\000\000\000\200+@ffffff3@\366(\\\217\302\365$@ffffff*@H\341z\024\256\307)@\315\314\314\314\314L%@\n\327\243p=\n\'@q=\n\327\243\3604@\000\000\000\000\000\000\'@{\024\256G\341\2723@\315\314\314\314\314L1@33333s3@\354Q\270\036\205\353+@\315\314\314\314\314\2143@\244p=\n\327\243.@R\270\036\205\353Q/@\217\302\365(\\\017/@\217\302\365(\\O4@\232\231\231\231\231Y1@\n\327\243p=J1@\270\036\205\353Q8/@q=\n\327\24301@{\024\256G\341\2724@333333%@\256G\341z\024.+@=\n\327\243p\275)@\354Q\270\036\205k%@\024\256G\341z\224,@\024\256G\341z\224&@\000\000\000\000\000\3005@\226C\213l\347{#@\256G\341z\024\3561@H\341z\024\256\307\'@)\\\217\302\365\250&@\217\302\365(\\\3172@\256G\341z\024.+@33333\263+@)\\\217\302\365(3@{\024\256G\341z\'@ffffff3@=\n\327\243p=0@H\341z\024\256\307)@)\\\217\302\365()@\341z\024\256G\341\'@H\341z\024\256\307)@\205\353Q\270\036\205&@=\n\327\243p\275&@R\270\036\205\353\321,@\354Q\270\036\205\353-@fffff\346)@33333\263\'@q=\n\327\243p)@\n\327\243p=\212+@R\270\036\205\353\321%@\205\353Q\270\036\205\'@\205\353Q\270\036\205,@\205\353Q\270\036\005%@H\341z\024\256\2073@\354Q\270\036\205\353(@\327\243p=\n\0274@{\024\256G\341\372$@\354Q\270\036\205\353&@333333\'@ffffff*@\000\000\000\000\000\000\"@\000\000\000\000\000\000+@\232\231\231\231\231\031*@ffffff\'@\270\036\205\353Q8-@\205\353Q\270\036\205)@\024\256G\341z\024\'@\214l\347\373\2511!@{\024\256G\341\372(@\\\217\302\365(\\(@\270\036\205\353Q82@/\335$\006\201\025\"@\\\217\302\365(\334(@\000\000\000\000\000\200$@)\\\217\302\365(4@\270\036\205\353Q\270)@\327\243p=\nW4@ffffff(@\327\243p=\nW)@\270\036\205\353Q8,@\217\302\365(\\\017(@\205\353Q\270\036E0@\303\365(\\\217B0@H\341z\024\256\0070@\366(\\\217\302\365)@q=\n\327\243p&@\000\000\000\000\000\200&@\232\231\231\231\231\231(@\217\302\365(\\\0171@{\024\256G\341\372)@\205\353Q\270\036\3052@\232\231\231\231\231\031$@\303\365(\\\217\2027@\327\243p=\n\327,@\203\300\312\241E6#@\037\205\353Q\270\036&@\256G\341z\024\2563@\354Q\270\036\205k\'@\205\353Q\270\036\205$@\037\205\353Q\270\036(@\205\353Q\270\036\205-@q=\n\327\243\360&@fffff\346\'@R\270\036\205\353Q\'@\000\000\000\000\000\200/@{\024\256G\341\2729@)\\\217\302\365(.@H\341z\024\256G&@\037\205\353Q\270\036)@\232\231\231\231\231\031*@=\n\327\243p\275+@\250\306K7\211\301!@\254\034Zd;\337\"@\024\256G\341z\024)@\232\231\231\231\231\231*@\205\353Q\270\036\205)@\000\000\000\000\000\2000@\315\314\314\314\314\314*@q=\n\327\243p4@3333334@\354Q\270\036\205k(@\366(\\\217\302\2655@\303\365(\\\217\0026@\232\231\231\231\231Y0@\341z\024\256Ga.@\037\205\353Q\270^5@\244p=\n\327\2434@\341z\024\256Ga+@\354Q\270\036\205+0@\244p=\n\327#%@\354Q\270\036\205\353*@R\270\036\205\353Q+@)\\\217\302\365(&@\n\327\243p=\212&@\024\256G\341z\024&@\232\231\231\231\231\031(@H\341z\024\256\307(@\217\302\365(\\\217*@333333-@\354Q\270\036\205k(@\303\365(\\\217\302+@\n\327\243p=\212&@\315\314\314\314\314\2143@\205\353Q\270\036\205$@+\207\026\331\316w!@{\024\256G\341\372.@\\\217\302\365(\2345@333333(@\037\205\353Q\270\036,@\205\353Q\270\036\005+@\232\231\231\231\231\231)@\037\205\353Q\270\036&@\232\231\231\231\231\231\'@)\\\217\302\365\3501@\\\217\302\365(\334\'@\354Q\270\036\205\353)@\341z\024\256G\341)@\256G\341z\024\256(@\341z\024\256G\341%@\244p=\n\327#0@33333\263)@=\n\327\243p\3751@\n\327\243p=\212(@\270\036\205\353Q\270&@\024\256G\341z\024&@%\006\201\225C\313\"@{\024\256G\341\372-@\303\365(\\\217B.@H\341z\024\256\307\'@\217\302\365(\\\317\"@\000\000\000\000\000\000/@ffffff)@R\270\036\205\353Q&@\244p=\n\327#\'@\341z\024\256Ga-@\270\036\205\353Q8\'@R\270\036\205\353Q+@\226C\213l\347{#@\217\302\365(\\\017$@\366(\\\217\302\365$@\232\231\231\231\231\231%@\303\365(\\\217B&@q=\n\327\243p)@\315\314\314\314\314\314-@\315\314\314\314\314\314(@\256G\341z\024.4@R\270\036\205\353\3212@\270\036\205\353Q\270-@\366(\\\217\302\365+@=\n\327\243p\275)@\024\256G\341z\024,@33333\263+@\n\327\243p=\n,@q=\n\327\243\360%@\205\353Q\270\036E1@\217\302\365(\\\217+@\244p=\n\327#%@H\341z\024\256\0072@{\024\256G\341\372\'@\000\000\000\000\000\3001@\232\231\231\231\231\231-@\217\302\365(\\\017-@"
      }
    }
  }
}
node {
  name: "tensors/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\205\353Q\270\036\205\361?1\010\254\034Zd\341?$\271\374\207\364\333\347?Gr\371\017\351\267\337?\227\377\220~\373:\350?\234\304 \260rh\325?\202\342\307\230\273\226\334?y\351&1\010\254\342?|\362\260Pk\232\323?\316\210\322\336\340\013\323?}?5^\272I\330?:#J{\203/\340?\372~j\274t\223\356?\344\203\236\315\252\317\331?\022\245\275\301\027&\313?\256G\341z\024\256\327?\306m4\200\267@\336?-C\034\353\3426\342?lxz\245,C\350?\203/L\246\nF\321?\277\016\2343\242\264\307?:\222\313\177H\277\321?\367\006_\230L\025\334?\030\225\324\th\"\346?\2505\315;N\321\351?#\333\371~j\274\360?}?5^\272I\320?\320D\330\360\364J\353?\177j\274t\223\030\334?\331=yX\2505\343?\2760\231*\030\225\352?\341z\024\256G\341\336?&S\005\243\222:\343?\323\274\343\024\035\311\341?\306K7\211A`\325?\360\247\306K7\211\335?\350\373\251\361\322M\322?\322\000\336\002\t\212\307?\006\201\225C\213l\363?\335$\006\201\225C\313?\272I\014\002+\207\316?\233\346\035\247\350H\316?\023a\303\323+e\357?\277\016\2343\242\264\327?\221~\373:p\316\310?r\212\216\344\362\037\344?\304\261.n\243\001\304?V\237\253\255\330_\322?;p\316\210\322\336\320?\260\003\347\214(\355\315?\036\247\350H.\377\331?g\325\347j+\366\307?\016\2760\231*\030\315?=\233U\237\253\255\352?\254\034Zd;\337\323?\t\033\236^)\313\324?H\341z\024\256G\347?\316\210\322\336\340\013\333?A`\345\320\"\333\331?\243#\271\374\207\364\303?\214\333h\000o\201\340??W[\261\277\354\326?2\346\256%\344\203\346?\265\246y\307):\332?\010\254\034Zd;\333?j\336q\212\216\344\326?\235\021\245\275\301\027\316?\371\240g\263\352s\321?2w-!\037\364\324?\254\255\330_vO\316?\256\266b\177\331=\351?f\367\344a\241\326\340?\020\351\267\257\003\347\342?\365JY\2068\326\321?\325x\351&1\010\320?\t\371\240g\263\352\347?\002\274\005\022\024?\332?\251\244N@\023a\357?\306\334\265\204|\320\355?\313\241E\266\363\375\320?\221~\373:p\316\324?\350\373\251\361\322M\322?\364lV}\256\266\354?\317\367S\343\245\233\340?\375\366u\340\234\021\315?\300[ A\361c\346?\362A\317f\325\347\332?/\335$\006\201\225\341?W\354/\273\'\017\323?\221\355|?5^\340?\306\334\265\204|\320\327?\021\307\272\270\215\006\324?I.\377!\375\366\331?\341z\024\256G\341\322?2\346\256%\344\203\336? c\356ZB>\350?\3122\304\261.n\327?q=\n\327\243p\325?o\022\203\300\312\241\315?\272I\014\002+\207\322?\236\357\247\306K7\335?\001M\204\rO\257\314?\033\r\340-\220\240\310?\243\001\274\005\022\024\307?\270\036\205\353Q\270\326?\027\267\321\000\336\002\331?/\335$\006\201\225\323?\250W\3122\304\261\276?q=\n\327\243p\363?\342X\027\267\321\000\316?\227n\022\203\300\312\331?\'\240\211\260\341\351\325?\200H\277}\0358\327?\266\204|\320\263Y\325?\035Zd;\337O\305?\243#\271\374\207\364\323?]\334F\003x\013\324?vO\036\026jM\333?D\213l\347\373\251\341?\346\256%\344\203\236\341?/n\243\001\274\005\302?s\327\022\362A\317\346?\277\237\032/\335$\370?\311\345?\244\337\276\322?B>\350\331\254\372\304?+\207\026\331\316\367\313?\305 \260rh\221\315?\214J\352\0044\021\346?k+\366\227\335\223\333?\373\\m\305\376\262\337?D\213l\347\373\251\311?\t\212\037c\356Z\336?\013$(~\214\271\333?\336q\212\216\344\362\323?\375\366u\340\234\021\343?#J{\203/L\316?_)\313\020\307\272\334?2\346\256%\344\203\306?#\333\371~j\274\364?\177\331=yX\250\325?5\3578EGr\311?\255i\336q\212\216\346?\340-\220\240\3701\322?\3122\304\261.n\313?)\\\217\302\365(\320?z6\253>W[\331?.\377!\375\366u\324?6^\272I\014\002\333?\353s\265\025\373\313\316?\000\000\000\000\000\000\320?j\336q\212\216\344\332?\370S\343\245\233\304\310?\374\251\361\322Mb\352?U0*\251\023\320\314?\362\322Mb\020X\321?)\\\217\302\365(\314?g\325\347j+\366\351?J{\203/L\246\336?\303d\252`TR\307?\267\321\000\336\002\t\322?\346?\244\337\276\016\340?\000\000\000\000\000\000\360?\343\307\230\273\226\220\347?\035\311\345?\244\337\322?7\032\300[ A\345?Zd;\337O\215\307?\256\330_vO\036\306?^\272I\014\002+\343?\234\304 \260rh\361?>\350\331\254\372\\\321?i\221\355|?5\316?\310\230\273\226\220\017\336?\307\272\270\215\006\360\332?\177\373:p\316\210\312?\005\305\2171w-\325?K\352\0044\0216\314?\363\216St$\227\333?\217\344\362\037\322o\323?G\003x\013$(\306?!\037\364lV}\322?o\360\205\311T\301\352?e\252`TR\'\344?\352\225\262\014q\254\327?\327\022\362A\317f\325?_\230L\025\214J\312?^\272I\014\002+\333?\003x\013$(~\320?\345\362\037\322o_\317?z\307):\222\313\307?!\037\364lV}\316?\350\373\251\361\322M\322?\023a\303\323+e\347?J{\203/L\246\326?8gDio\360\331?\333\212\375e\367\344\321?\263\014q\254\213\333\310?\344\203\236\315\252\317\343?\353\3426\032\300[\344?4\200\267@\202\342\333?\236^)\313\020\307\312?u\002\232\010\033\236\326?`vO\036\026j\331?\013$(~\214\271\341?P\374\030s\327\022\342?\266\204|\320\263Y\331?\266\204|\320\263Y\321?\230\335\223\207\205Z\313?\311\345?\244\337\276\342?\326\305m4\200\267\310?\377\262{\362\260P\313?gDio\360\205\353?\342\351\225\262\014q\314?\226C\213l\347\373\006@m\305\376\262{\362\340??W[\261\277\354\332?H\277}\0358g\320?\330\201sF\224\366\322?\300\354\236<,\324\326?6\315;N\321\221\356?\235\200&\302\206\247\347?\362A\317f\325\347\312?\342\351\225\262\014q\320?k+\366\227\335\223\317?\265\246y\307):\326?A\202\342\307\230\273\322?Nb\020X9\264\340??\306\334\265\204|\310?\010=\233U\237\253\315?\324+e\031\342X\317?\363\216St$\227\323?\307\272\270\215\006\360\322?`\345\320\"\333\371\276?\360\205\311T\301\250\314?\370S\343\245\233\304\340?\226\262\014q\254\213\313?6\315;N\321\221\320?!\260rh\221\355\360?\036\247\350H.\377\345?\201\004\305\2171w\325?@\023a\303\323+\341?\253>W[\261\277\324?\243\222:\001M\204\275?\243\001\274\005\022\024\317?\212\216\344\362\037\322\333?\236^)\313\020\307\340?>yX\2505\315\327?w\276\237\032/\335\304?\354Q\270\036\205\353\311?g\325\347j+\366\317?\204\rO\257\224e\320?\252\361\322Mb\020\360?\247\350H.\377!\331?2\346\256%\344\203\350?z\307):\222\313\323?\375\366u\340\234\021\343?333333\333?\330\201sF\224\366\352?\016\2760\231*\030\345?x\351&1\010\254\364?\330\201sF\224\366\316?\371\240g\263\352s\331?\367u\340\234\021\245\331?\364lV}\256\266\352?`vO\036\026j\315?.\220\240\3701\346\332?\215\227n\022\203\300\362?\242E\266\363\375\324\334?n\022\203\300\312\241\325?j\274t\223\030\004\316?\362\260Pk\232w\324?\2657\370\302d\252\300?tF\224\366\006_\310?y\351&1\010\254\362?\005\305\2171w-\321?\024\320D\330\360\364\332?\024?\306\334\265\204\344?ffffff\316?\027\267\321\000\336\002\325?P\215\227n\022\203\320?\320\325V\354/\273\317?\t\212\037c\356Z\344?\263\352s\265\025\373\341?\372\355\353\3009#\336?\336\002\t\212\037c\322?\206\311T\301\250\244\322?\327\022\362A\317f\321?x\013$(~\214\321?@\244\337\276\016\234\303?M\363\216St$\337?\217St$\227\377\320?\340-\220\240\3701\354?\357\311\303B\255i\322?\257%\344\203\236\315\312?\345\320\"\333\371~\312?\305\2171w-!\307?]\334F\003x\013\314?\000\221~\373:p\306?\244p=\n\327\243\344?q=\n\327\243p\315?\t\212\037c\356Z\322?-\262\235\357\247\306\361?;\001M\204\rO\327?\364\375\324x\351&\361?5^\272I\014\002\303?B>\350\331\254\372\324?2U0*\251\023\320?\353\3426\032\300[\310?E\330\360\364JY\306?\232w\234\242#\271\314?q=\n\327\243p\331?\003x\013$(~\304?\323Mb\020X9\324?L7\211A`\345\324?\t\033\236^)\313\300?<\275R\226!\216\325?I.\377!\375\366\305?\316\210\322\336\340\013\313?\006\022\024?\306\334\331?\017\013\265\246y\307\335?vq\033\r\340-\330?\016O\257\224e\210\327?\366(\\\217\302\365\342?\216\006\360\026HP\314?\002\274\005\022\024?\342?{\024\256G\341z\320?\341z\024\256G\341\312?jM\363\216St\320?\027\331\316\367S\343\315?\000\000\000\000\000\000\334?\212\037c\356ZB\342?\211\322\336\340\013\223\325?\005\305\2171w-\321?\316\210\322\336\340\013\323?S\226!\216uq\313?Zd;\337O\215\307?\314\177H\277}\035\352?\200H\277}\0358\307?\351\267\257\003\347\214\344?4\242\2647\370\302\320?\277\237\032/\335$\360?\201&\302\206\247W\326?|\362\260Pk\232\307?\003x\013$(~\304?\316\252\317\325V\354\343?\004\347\214(\355\r\326?n\022\203\300\312\241\325?\264\310v\276\237\032\317?8gDio\360\325?}\256\266b\177\331\305?\264\310v\276\237\032\327?u\002\232\010\033\236\326?,\324\232\346\035\247\340?\023\362A\317f\325\357?\324\232\346\035\247\350\344?\276\301\027&S\005\333?\223:\001M\204\r\327?p\316\210\322\336\340\323?\365\333\327\201sF\320?\200H\277}\0358\341?\306m4\200\267@\340?\325\th\"lx\326?\274\005\022\024?\306\320?\026jM\363\216S\314?TR\'\240\211\260\325?\365\333\327\201sF\304?\307):\222\313\177\342?\352\0044\0216<\357?\261\277\354\236<,\320?\035Zd;\337O\363?T\343\245\233\304 \360?\270@\202\342\307\230\333?\373:p\316\210\322\306?}\256\266b\177\331\325?3\304\261.n\243\343?m\347\373\251\361\322\305?\274t\223\030\004V\306?%\006\201\225C\213\274?\346\256%\344\203\236\305?\374\030s\327\022\362\301?W\354/\273\'\017\313?\204\rO\257\224e\320?\334h\000o\201\004\305?Tt$\227\377\220\276?\305\376\262{\362\260\320?\237\253\255\330_v\307?\355\236<,\324\232\332?9EGr\371\017\321?lxz\245,C\320?\364\375\324x\351&\325?\264Y\365\271\332\212\343?.\377!\375\366u\310?C\255i\336q\212\340?Nb\020X9\264\344?\3578EGr\371\343?X\3122\304\261.\322?U\301\250\244N@\303?\020z6\253>W\313?\356\353\3009#J\327?X9\264\310v\276\307?\342X\027\267\321\000\326?\227n\022\203\300\312\331?\334F\003x\013$\320?\317f\325\347j+\316?\323\336\340\013\223\251\302?\234\242#\271\374\207\330?A\361c\314]K\330?\313\020\307\272\270\215\316?\243#\271\374\207\364\337?(~\214\271k\t\335?O\257\224e\210c\325?\330\360\364JY\206\310?\005\305\2171w-\311?\315;N\321\221\\\276?\300[ A\361c\324?\205|\320\263Y\365\335?M\204\rO\257\224\321?\016O\257\224e\210\333?\354Q\270\036\205\353\365?f\367\344a\241\326\314?\274t\223\030\004V\322?\370\302d\252`T\322?\nh\"lxz\341?\217\344\362\037\322o\317?\232w\234\242#\271\314?}?5^\272I\346?6\253>W[\261\307?\272\332\212\375e\367\324?6\253>W[\261\323?\351&1\010\254\034\302?\362A\317f\325\347\322?\376\324x\351&1\320?u\002\232\010\033\236\306?Gr\371\017\351\267\333?K\352\0044\0216\352?\251\244N@\023a\323?lxz\245,C\314?\333\371~j\274t\327?\324\232\346\035\247\350\330?R\'\240\211\260\341\325?B\317f\325\347j\313?\267b\177\331=y\320?R\270\036\205\353Q\340?\257%\344\203\236\315\326?\241\3264\3578E\307?xz\245,C\034\323?Dio\360\205\311\320?\251\023\320D\330\360\330?K\352\0044\0216\314?\323Mb\020X9\320?"
      }
    }
  }
}
node {
  name: "tensors/component_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\341z\024\256Ga9@=\n\327\243p\3758@R\270\036\205\353\2217@R\270\036\205\353\321-@\n\327\243p=\2126@q=\n\327\243\360.@\341z\024\256G\3416@\217\302\365(\\\0171@{\024\256G\341\372.@\256G\341z\024..@q=\n\327\24303@\354Q\270\036\205k4@\366(\\\217\302\3654@\327\243p=\n\3270@\217\302\365(\\\017.@\366(\\\217\302u1@R\270\036\205\353\0213@\366(\\\217\302\3654@R\270\036\205\353Q;@\270\036\205\353Q8.@\000\000\000\000\000\000-@\366(\\\217\302u$@R\270\036\205\353\0212@\354Q\270\036\205+=@\366(\\\217\302u:@\000\000\000\000\000@6@\037\205\353Q\270\2361@\217\302\365(\\O5@\205\353Q\270\036E4@\303\365(\\\217\0024@fffff&7@R\270\036\205\353\3210@\341z\024\256G\3414@fffff&8@\366(\\\217\30254@\303\365(\\\217\0024@H\341z\024\256\307/@\232\231\231\231\231\231*@{\024\256G\341\372-@\217\302\365(\\\017/@\\\217\302\365(\334/@\256G\341z\024\256)@\327\243p=\n\0278@\341z\024\256Ga1@{\024\256G\341:0@R\270\036\205\353\3216@!\260rh\221\355!@\327\243p=\nW/@\205\353Q\270\036\205+@\315\314\314\314\314L.@\366(\\\217\302\365)@\327\243p=\nW-@333333*@\232\231\231\231\231\2314@\232\231\231\231\231\0312@\256G\341z\024\256)@\244p=\n\327#:@\037\205\353Q\270\3361@\366(\\\217\302u,@\335$\006\201\225\003#@\n\327\243p=\n&@\341z\024\256G!#@\354Q\270\036\205\2531@\205\353Q\270\036\005$@\327\243p=\n\0271@\217\302\365(\\O1@R\270\036\205\353\321$@)\\\217\302\365\250(@\037\205\353Q\270\236$@\354Q\270\036\205\353*@\\\217\302\365(\3348@\235\357\247\306Kw#@R\270\036\205\353Q7@R\270\036\205\353\2210@\270\036\205\353Q8,@\205\353Q\270\036\3053@)\\\217\302\365(,@\244p=\n\327c6@\037\205\353Q\270^7@{\024\256G\341z,@\270\036\205\353Q8*@\217\302\365(\\\017/@\000\000\000\000\000\000>@\024\256G\341zT4@\327\243p=\nW+@\256G\341z\024\3566@\366(\\\217\30250@\217\302\365(\\\2178@)\\\217\302\365\250+@\327\243p=\nW0@\\\217\302\365(\0340@\256G\341z\024n0@\\\217\302\365(\\0@333333.@{\024\256G\341:2@\270\036\205\353Q88@)\\\217\302\365\250)@\327\243p=\n\327%@\037\205\353Q\270\036*@\024\256G\341zT0@=\n\327\243p\3750@\270\036\205\353Q\270\037@\256G\341z\024\256*@\205\353Q\270\036\205%@\024\256G\341z\024\'@\217\302\365(\\O0@H\341z\024\256G*@\024\256G\341z\224*@ffffff<@\205\353Q\270\036\005*@\232\231\231\231\231\031&@)\\\217\302\365\250*@\232\231\231\231\231\231.@R\270\036\205\353Q&@\250\306K7\211A#@\327\243p=\nW+@\207\026\331\316\367\323\"@\217\302\365(\\\3172@q=\n\327\24304@\024\256G\341z\2244@\244p=\n\327\243)@\000\000\000\000\000@6@\205\353Q\270\036\005:@ffffff/@\205\353Q\270\036\205,@{\024\256G\341\372.@\244p=\n\327\3430@R\270\036\205\353Q6@\\\217\302\365(\0340@\341z\024\256G\2416@\256G\341z\024\256*@\303\365(\\\217B3@\270\036\205\353Qx3@\000\000\000\000\000\2001@\205\353Q\270\036\2056@{\024\256G\341\372,@)\\\217\302\365\250*@\244p=\n\327\243(@\315\314\314\314\314\2142@\327\243p=\n\327\'@=\n\327\243p=%@\354Q\270\036\205\3533@\217\302\365(\\\217)@\366(\\\217\302\365,@fffff\346\'@\315\314\314\314\314L*@{\024\256G\341z+@\000\000\000\000\000@0@33333\263/@\256G\341z\024\256.@R\270\036\205\353Q,@\311v\276\237\032/\"@\n\327\243p=\n&@{\024\256G\341\372\'@\n\327\243p=\212-@\256G\341z\024.+@\270\036\205\353Qx4@\270\036\205\353Q82@H\341z\024\256G*@\270\036\205\353Q\270(@\244p=\n\327\243*@H\341z\024\256\0076@{\024\256G\341\272:@)\\\217\302\365(+@\303\365(\\\217\002<@\366(\\\217\302\365/@333333\'@\315\314\314\314\314\0144@\244p=\n\327#7@\\\217\302\365(\0340@\000\000\000\000\000\000+@{\024\256G\341\3721@\n\327\243p=\3122@33333\263&@\024\256G\341z\024\'@\240\032/\335$\206\"@\205\353Q\270\036\205&@\n\327\243p=\3121@\000\000\000\000\000\000,@\303\365(\\\217B+@\217\302\365(\\\217@@\256G\341z\024\256:@\\\217\302\365(\0344@=\n\327\243p\275(@\315\314\314\314\314\3141@=\n\327\243p\275\'@\217\302\365(\\O5@\205\353Q\270\036\005*@\244p=\n\327#)@33333\263*@{\024\256G\341z/@\000\000\000\000\000\200+@V\016-\262\235\357#@\315\314\314\314\314L/@\024\256G\341z\0240@\303\365(\\\217\302+@\244p=\n\327c0@\303\365(\\\217\3023@\\\217\302\365(\\7@\024\256G\341zT2@\341z\024\256G\341,@\354Q\270\036\205k4@\037\205\353Q\270\0369@3333333@q=\n\327\243\360-@\205\353Q\270\036\3051@\327\243p=\n\327$@\315\314\314\314\314\3143@\232\231\231\231\231\031-@\341z\024\256Ga1@=\n\327\243p=7@\232\231\231\231\231\231*@\\\217\302\365(\034<@R\270\036\205\353\0212@\\\217\302\365(\3340@\000\000\000\000\000\200/@\000\000\000\000\000\200*@\366(\\\217\302\365&@{\024\256G\341\2729@fffff\346;@\256G\341z\024\256.@\366(\\\217\302\365-@\327\243p=\nW&@\217\302\365(\\\2173@H\341z\024\256G.@\205\353Q\270\036\3050@\n\327\243p=\n\'@)\\\217\302\365h0@ffffff,@ffffff.@\327\243p=\n\2273@)\\\217\302\365((@\270\036\205\353Q\270(@\270\036\205\353Qx8@\205\353Q\270\036\005%@)\\\217\302\365\250.@\303\365(\\\217\002?@\270\036\205\353Q88@\000\000\000\000\000\200/@\303\365(\\\217\2026@33333\263-@ffffff*@)\\\217\302\365()@\205\353Q\270\036\005.@fffff\2465@\366(\\\217\302\365&@\341z\024\256G\341+@H\341z\024\256\307,@\000\000\000\000\000\200(@\315\314\314\314\314L)@\024\256G\341z\2249@q=\n\327\243\360)@H\341z\024\256G9@\232\231\231\231\231\3313@33333\2639@\244p=\n\327c0@\315\314\314\314\314\0149@{\024\256G\341\2721@\232\231\231\231\231\3313@=\n\327\243p}2@\024\256G\341zT8@\232\231\231\231\231\3313@\244p=\n\327c4@)\\\217\302\365\3501@\024\256G\341z\2245@\037\205\353Q\270>@@\303\365(\\\217\302\'@\232\231\231\231\231\231-@\315\314\314\314\314\314+@\341z\024\256Ga\'@R\270\036\205\353\321-@\244p=\n\327\243(@q=\n\327\2430<@\000\000\000\000\000\200%@\354Q\270\036\205\3534@\315\314\314\314\314\314(@ffffff(@\366(\\\217\302\3653@\000\000\000\000\000\000/@\366(\\\217\302\365-@\270\036\205\353Q\2707@\037\205\353Q\270\236*@\n\327\243p=\3127@\315\314\314\314\314\2142@\315\314\314\314\314\314+@\000\000\000\000\000\000+@{\024\256G\341z*@=\n\327\243p=+@\270\036\205\353Q\270\'@\270\036\205\353Q\270(@\n\327\243p=\212/@\000\000\000\000\000@0@{\024\256G\341z+@\037\205\353Q\270\036*@\000\000\000\000\000\000+@\327\243p=\nW-@=\n\327\243p\275&@\270\036\205\353Q\270*@\270\036\205\353Q80@\\\217\302\365(\334%@\256G\341z\024\3569@\354Q\270\036\205\353*@\256G\341z\024\2567@\037\205\353Q\270\036&@\\\217\302\365(\\)@\341z\024\256G\341(@R\270\036\205\353\321,@\331\316\367S\343e#@q=\n\327\243\360-@\366(\\\217\302u-@\270\036\205\353Q8)@\366(\\\217\302u0@\341z\024\256Ga,@\256G\341z\024\256(@\201\225C\213l\347!@\256G\341z\024\256*@33333\263)@\327\243p=\n\3275@\037\205\353Q\270\036$@\315\314\314\314\314\314)@\217\302\365(\\\217&@\217\302\365(\\\0177@\024\256G\341z\024,@\315\314\314\314\314L9@\000\000\000\000\000\200+@\354Q\270\036\205k+@\217\302\365(\\\017/@\244p=\n\327#*@H\341z\024\256G3@{\024\256G\341\2721@\303\365(\\\217\3022@\327\243p=\n\327,@\366(\\\217\302\365\'@\205\353Q\270\036\205)@33333\263*@=\n\327\243p\3754@q=\n\327\243p+@\n\327\243p=\2128@R\270\036\205\353Q&@\354Q\270\036\205\253>@\354Q\270\036\205\2530@\000\000\000\000\000\200%@\327\243p=\n\327\'@\000\000\000\000\000\3006@\037\205\353Q\270\036*@\303\365(\\\217\302%@H\341z\024\256G+@\205\353Q\270\036E1@\205\353Q\270\036\005)@\037\205\353Q\270\236)@\217\302\365(\\\217*@\\\217\302\365(\\1@q=\n\327\243\220@@\303\365(\\\217\2022@=\n\327\243p=(@=\n\327\243p\275*@\341z\024\256Ga,@\270\036\205\353Q8.@\203\300\312\241E\366#@\n\327\243p=\n(@q=\n\327\243p+@ffffff,@\000\000\000\000\000\200+@\341z\024\256G!2@\366(\\\217\302u-@\217\302\365(\\O8@q=\n\327\24308@\024\256G\341z\224,@\000\000\000\000\000\300>@)\\\217\302\365\250;@\341z\024\256Ga3@3333330@q=\n\327\243\2606@\037\205\353Q\270^9@\256G\341z\024\256-@\270\036\205\353Q\3700@33333\263%@\341z\024\256Ga-@\024\256G\341z\024-@{\024\256G\341z*@\256G\341z\024\256)@\256G\341z\024.(@\244p=\n\327#)@\\\217\302\365(\\,@{\024\256G\341z,@\024\256G\341z\224/@\303\365(\\\217B*@\205\353Q\270\036\005/@\024\256G\341z\024(@R\270\036\205\353\3214@\303\365(\\\217\302&@\327\243p=\nW$@3333335@{\024\256G\341::@\037\205\353Q\270\036+@\327\243p=\n\327-@\232\231\231\231\231\231-@{\024\256G\341z+@\\\217\302\365(\\)@fffff\346*@\315\314\314\314\314\3144@\232\231\231\231\231\231+@\303\365(\\\217B,@\270\036\205\353Q\270+@\\\217\302\365(\\*@\315\314\314\314\314\314(@\366(\\\217\302\2651@\315\314\314\314\314\314,@\024\256G\341z\0245@333333,@\232\231\231\231\231\031*@R\270\036\205\353\321(@\256G\341z\024\356#@\303\365(\\\217\3020@\303\365(\\\217B1@\232\231\231\231\231\031*@33333\263%@\354Q\270\036\205+7@\315\314\314\314\314L+@\270\036\205\353Q\270(@\244p=\n\327#*@\366(\\\217\302u0@H\341z\024\256G)@H\341z\024\256G.@\354Q\270\036\205k&@\270\036\205\353Q8&@\303\365(\\\217B(@\205\353Q\270\036\205)@\\\217\302\365(\\\'@\244p=\n\327\243+@\232\231\231\231\231Y0@\303\365(\\\217\302)@H\341z\024\256\0076@)\\\217\302\365\2506@\217\302\365(\\O0@\n\327\243p=\n1@fffff\346,@R\270\036\205\353Q/@\303\365(\\\217B/@R\270\036\205\353\321-@\270\036\205\353Q\270(@\341z\024\256Ga4@\n\327\243p=\212.@\341z\024\256G\341%@\341z\024\256Ga4@\366(\\\217\302\365)@H\341z\024\256\2075@\256G\341z\024n0@\315\314\314\314\314L0@"
      }
    }
  }
}
node {
  name: "tensors/component_21"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\254\255\330_vO\276?\375\274\251H\205\261\265?\346?\244\337\276\016\274?=\n\327\243p=\302?\314\356\311\303B\255\271?\353\3426\032\300[\300?`q8\363\2539\270?\000\221~\373:p\276?A\361c\314]K\300?\315;N\321\221\\\276?oLOX\342\001\265?\263\014q\254\213\333\270?\345a\241\3264\357\270?6v\211\352\255\201\265?2w-!\037\364\274?\270\257\003\347\214(\275?n\250\030\347oB\271?\300\312\241E\266\363\275?\230\250\336\032\330*\271?\r7\340\363\303\010\271?\205\353Q\270\036\205\273?-C\034\353\3426\272?d]\334F\003x\273?\245\270\252\354\273\"\270?\212\260\341\351\225\262\274?\315;N\321\221\\\276?$\227\377\220~\373\272?\355\r\2760\231*\270?\373\\m\305\376\262\273?L\032\243uT5\271?\314]K\310\007=\273?\300[ A\361c\274?\206\311T\301\250\244\276?\3058\177\023\n\021\270?:\264\310v\276\237\272?\013F%u\002\232\270?\275o|\355\231%\271?:\0363P\031\377\266?HU\023D\335\007\270?\246\nF%u\002\272?\276\023\263^\014\345\264?~\0358gDi\277?\254V&\374R?\267?J{\203/L\246\272? )\"\303*\336\270?\030\225\324\th\"\274?j\274t\223\030\004\266?\367u\340\234\021\245\275?\242\2647\370\302d\272?\235\364\276\361\265g\266?\\\003[%X\034\266?\352\225\262\014q\254\263?K\223R\320\355%\265?O\257\224e\210c\275?\002eS\256\360.\267?\340bE\r\246a\270?\024\320D\330\360\364\272?\226!\216uq\033\275?\340\276\016\2343\242\264?-\267\264\032\022\367\270?d\314]K\310\007\275?\212\216\344\362\037\322\277?\320\263Y\365\271\332\272?\300\225\354\330\010\304\263?\232w\234\242#\271\274?\342X\027\267\321\000\276?}\320\263Y\365\271\272?K\2608\234\371\325\264?\356\353\3009#J\273?\230\250\336\032\330*\271?\000W\262c#\020\267?zS\221\nc\013\271?B\317f\325\347j\273?\017\013\265\246y\307\271?_\235c@\366z\267?\361\200\262)Wx\267?\330\360\364JY\206\300?\335$\006\201\225C\273?.\377!\375\366u\300?\221D/\243Xn\271?K\352\0044\0216\274?\270@\202\342\307\230\273?\274\226\220\017z6\273?\264\310v\276\237\032\277?\025\2510\266\020\344\270?,\232\316N\006G\271?Z*oG8-\270?!\345\'\325>\035\267?\277\2024c\321t\266?B>\350\331\254\372\274?E\236$]3\371\266?Zd;\337O\215\267?\300\354\236<,\324\262?\013\265\246y\307)\272?)\355\r\2760\231\272?Z\201!\253[=\267?\215\227n\022\203\300\272?-C\034\353\3426\272?:\0363P\031\377\266?-\267\264\032\022\367\270?\nc\013A\016J\270?\300\312\241E\266\363\275?\335\260mQf\203\264?\356|?5^\272\271?m\2132\033d\222\271?\333\212\375e\367\344\301?\352\0044\0216<\275?O\222\256\231|\263\265?~\214\271k\t\371\300?\\\346tYLl\266?\007_\230L\025\214\272?v\375\202\335\260m\271?\035\316\374j\016\020\264?\232w\234\242#\271\274?q=\n\327\243p\275?\340(yu\216\001\271?F*\214-\0049\270?:\222\313\177H\277\275?\305 \260rh\221\275?R\2755\260U\202\265?\311q\247t\260\376\267?$\227\377\220~\373\272?\366\227\335\223\207\205\302?:#J{\203/\274?-C\034\353\3426\262?!\037\364lV}\266?\210\200C\250R\263\267?\233Z\266\326\027\t\265?q=\n\327\243p\275?\226C\213l\347\373\271?\356\353\3009#J\273?\243#\271\374\207\364\273? \322o_\007\316\271?F*\214-\0049\270?\334F\003x\013$\270?\347\035\247\350H.\267?\362A\317f\325\347\272?\"T\251\331\003\255\270?\216uq\033\r\340\275?\\ A\361c\314\275?\256G\341z\024\256\267?\337\032\330*\301\342\270?\243#\271\374\207\364\273?\237\037F\010\2176\266?l\225`q8\363\263?\222\313\177H\277}\275?\222\\\376C\372\355\273?/i\214\326Q\325\264?gDio\360\205\271?\203\206\376\t.V\264?u\223\030\004V\016\275?2U0*\251\023\270?S\226!\216uq\273?cE\r\246a\370\270?\365\177\016\363\345\005\270?+\274\313E|\'\266?%\006\201\225C\213\274?W\354/\273\'\017\263?.9\356\224\016\326\267?\314]K\310\007=\263?p\316\210\322\336\340\273?o\330\266(\263A\266?x\351&1\010\254\274?c\356ZB>\350\271?B\004\034B\225\232\265?X\004\377[\311\216\265?V\324`\032\206\217\270?\250W\3122\304\261\266?\320\263Y\365\271\332\272?&S\005\243\222:\271?p_\007\316\031Q\272?\',\361\200\262)\267?\273\270\215\006\360\026\300?\376C\372\355\353\300\271?\340\020\252\324\354\201\266?\276+\202\377\255d\267?\206\376\t.V\324\270?\230\250\336\032\330*\271?\033G\254\305\247\000\260?:X\377\3470_\266?\304\261.n\243\001\274?\331=yX\2505\275?\250\251ek}\221\270?T:X\377\3470\267?\035\254\377s\230/\267?~\000R\2338\271\267?#gaO;\374\265?\204\323\202\027}\005\271?\017\013\265\246y\307\271?\001M\204\rO\257\264?\205\353Q\270\036\205\273?K\037\272\240\276e\266?\230n\022\203\300\312\261?\325\th\"lx\272?}\320\263Y\365\271\272?2\261\371\2706T\264?\270\036\205\353Q\270\276?t^c\227\250\336\262?6Y\243\036\242\321\265?\366\013v\303\266E\271?|\233\376\354G\212\270?\241\363\032\273D\365\266?\331=yX\2505\275?\345a\241\3264\357\300?\337\340\013\223\251\202\271?\324e1\261\371\270\266?p\316\210\322\336\340\273?\277\2024c\321t\266?\273\'\017\013\265\246\271?\340\241(\320\'\362\264?\241\3264\3578E\267?K\002\324\324\262\265\266?\352\0044\0216<\275?\376C\372\355\353\300\271?`q8\363\2539\270?N\321\221\\\376C\272?\270\252\354\273\"\370\267?<\024\005\372D\236\264?\3328b->\005\270?<\275R\226!\216\265?\341E_A\232\261\270?\362A\317f\325\347\272?\232\010\033\236^)\273?=\n\327\243p=\272?\346\256%\344\203\236\265?\226}W\004\377[\271?\024\320D\330\360\364\272?\004!Y\300\004n\265?$#gaO;\264?_\007\316\031Q\332\273?\331=yX\2505\275?t\322\373\306\327\236\261?\t\371\240g\263\352\263?\373\000\2446qr\267?\354\365\356\217\367\252\265?\200H\277}\0358\267?G8-x\321W\270?O\257\224e\210c\265?>\005\300x\006\r\265?\221a\025od\036\271?\035UM\020u\037\270?\230\206\341#bJ\264? F\010\2176\216\270?\020\006\236{\017\227\264?_\230L\025\214J\272?1\010\254\034Zd\273?\325\th\"lx\262?w-!\037\364l\266?\rT\306\277\317\270\270?t\265\025\373\313\356\271?\017\013\265\246y\307\271?\316\252\317\325V\354\267?\253\317\325V\354/\273? \322o_\007\316\271?\345\320\"\333\371~\272?\346?\244\337\276\016\274?\277\016\2343\242\264\267?J\014\002+\207\026\301?\300[ A\361c\274?\274\226\220\017z6\273?\232\231\231\231\231\231\271?\006\365-s\272,\266?\357\217\367\252\225\t\267?n\243\001\274\005\022\264?g~5\007\010\346\270?\004\034B\225\232=\270?Z\360\242\257 \315\270?\313\333\021N\013^\264?T\343\245\233\304 \270?\373\\m\305\376\262\273?\023\270u7Ou\260?\351}\343k\317,\271?\3058\177\023\n\021\270?\374\035\212\002}\"\267?\227\220\017z6\253\266?\\\217\302\365(\\\277?m\034\261\026\237\002\270?\325s\322\373\306\327\266?\360\242\257 \315X\264?\007*\343\337g\\\270?\351&1\010\254\034\272?\215#\326\342S\000\264?\007_\230L\025\214\272?\356\353\3009#J\273?\026\2073\277\232\003\264?[=\'\275o|\265?\363\037\322o_\007\266? \322o_\007\316\261?\234\242#\271\374\207\264?u\037\200\324&N\266?&X\034\316\374j\266?0\236AC\377\004\267?\356|?5^\272\271?\037h\005\206\254n\265?\036\033\201x]\277\270?#\326\342S\000\214\267?\255\365EB[\316\265?0\266\020\344\240\204\271?\275\214b\271\245\325\260?\226C\213l\347\373\271?q=\n\327\243p\275?\212Y/\206r\242\265?\332\316\367S\343\245\273?\020z6\253>W\273?`\002\267\356\346\251\266?n\372\263\037)\"\263?\357\003\220\332\304\311\265?t\265\025\373\313\356\261?\375\301\300s\357\341\262?\376\331\217\024\221a\265?8-x\321W\220\266?\306\371\233P\210\200\263?\027\237\002`<\203\266?\031\347oB!\002\266?t$\227\377\220~\273?\357\003\220\332\304\311\265?\"2\254\342\215\314\263?\211\014\253x#\363\270?0\266\020\344\240\204\271?F\010\2176\216X\263?\232\010\033\236^)\273?\234\242#\271\374\207\264?d\314]K\310\007\275?\300\312\241E\266\363\275?2\003\225\361\3573\266?p_\007\316\031Q\272?\367\252\225\t\277\324\267?\263\007Z\201!\253\263?\260\003\347\214(\355\275?m\347\373\251\361\322\275?]8\020\222\005L\270?\275\251H\205\261\205\270?$\227\377\220~\373\272?\027\023\233\217kC\265?\325\004Q\367\001H\265?h\"lxz\245\274?F*\214-\0049\270?g\017\264\002CV\267?\017\013\265\246y\307\271? A\361c\314]\273?\021p\010Uj\366\270?\274\256_\260\033\266\265?\304B\255i\336q\272?\3706\375\331\217\024\271?q=\n\327\243p\275?\007\3230|DL\271?\235KqU\331w\265?\270\036\205\353Q\270\266?$\363\310\037\014<\267?\367u\340\234\021\245\275?\263$@M-[\263?\212\216\344\362\037\322\277?`vO\036\026j\275?-C\034\353\3426\272?\036m\034\261\026\237\262?w-!\037\364l\266?\373\\m\305\376\262\273?\247t\260\376\317a\266?\263v\333\205\346:\265?1\231*\030\225\324\271?al!\310A\t\263?\200\274W\255L\370\265?\023\233\217kC\305\270?$bJ$\321\313\270?\305\224H\242\227Q\264?\006\201\225C\213l\267?z6\253>W[\271?\250\000\030\317\240\241\267?\365\177\016\363\345\005\270?\274\226\220\017z6\273?\034\360\371a\204\360\270?\211\315\307\265\241b\264?\252`TR\'\240\271?\221\270\307\322\207.\270?\252\366\351x\314@\265?\320D\330\360\364J\271?\321\035\304\316\024:\267?\003\354\243SW>\263?\t\205\0108\204*\265?\305\2171w-!\277?&\344\203\236\315\252\277?\031x\356=\\r\264?\376C\372\355\353\300\261?[B>\350\331\254\272?)\350\366\222\306h\265?(\203\243\344\3259\266?\375\023\\\254\250\301\264?\261\21272\217\374\261?`vO\036\026j\265?A`\345\320\"\333\271?-}\350\202\372\226\271?)\355\r\2760\231\272?\030\004V\016-\262\275?\216uq\033\r\340\275?\201&\302\206\247W\272?F\224\366\006_\230\264?xz\245,C\034\273?+MJA\267\227\264?\342#bJ$\321\263?P\0010\236AC\267?\261rh\221\355|\277?gI\200\232Z\266\266?S\320\355%\215\321\262?\265\375++MJ\271?(\203\243\344\3259\266?\335\265\204|\320\263\271?\312T\301\250\244N\270?\243]\205\224\237T\263?\366\227\335\223\207\205\272?yX\2505\315;\266?\350e\024\313-\255\266?\247y\307):\222\273?-x\321W\220f\264?\\ A\361c\314\265?\224\366\006_\230L\265?i\214\326Q\325\004\271?}\320\263Y\365\271\272?x\351&1\010\254\274?!\037\364lV}\266?\310\230\273\226\220\017\272?\252\274\035\341\264\340\265?\242\2647\370\302d\272?_\007\316\031Q\332\273?\035\254\377s\230/\267?\205\353Q\270\036\205\273?\363\223j\237\216\307\264?\376}\306\205\003!\271?\326\220\270\307\322\207\266?\222\005L\340\326\335\264?f1\261\371\2706\264?\364\340\356\254\335v\271?$\227\377\220~\373\272?S\005\243\222:\001\275?\310\230\273\226\220\017\272?\361\272~\301n\330\266?\211A`\345\320\"\273?\210\235)t^c\267?HK\345\355\010\247\265?^\021\374o%;\266?\334\242\314\006\231d\264?\373:p\316\210\322\266?\301\004n\335\315S\265?\212\002}\"O\222\266?\235\205=\355\360\327\264?e\036\371\203\201\347\266?\222\355|?5^\272?H\304\224H\242\227\271?\035\217\031\250\214\177\267?\323\331\311\340(y\265?"
      }
    }
  }
}
node {
  name: "tensors/component_22"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\3167\242{\3265z?\327\022\362A\317fu?\215(\355\r\2760y?\234P\210\200C\250\202?\200+\331\261\021\210\207?l\220IF\316\302~?R\234\243\216\216\253q?\234\212T\030[\010\202?P\214,\231cyw?\254\207/\023EH}?\272\363\304s\266\200p?\"S>\004U\243w?\371\327\362\312\365\266i?0\363\035\374\304\001\204?\354\214\357\213KUz?_\n\017\232]\367v?\177\370\371\357\301kw?\033\021\214\203K\307|?\000p\354\331s\231z?\222\354\021j\206T\201?\354\370/\020\004\310p?~T\303~O\254\203?L\212\217O\310\316{?\265\377\001\326\252]s?\302\240L\243\311\305x?\334N[#\202q\200?s\275m\246B<r?j\274t\223\030\004\206?\316m\302\2752ou?\310\355\227OV\014w?\334\202\245\272\200\227y?\237\215\\7\245\274v?\242\235\323,\320\356\200?\t\277\324\317\233\212t?\207\341#bJ$q?\374\213\2401\223\250w?\307\023A\234\207\023x?fL\301\032g\323q? \267_>Y1|?ta\244\027\265\373u?t^c\227\250\336j?\327\0253\302\333\203\200?\002\326\252]\023\322z?(G\001\242`\306t?S\226!\216uqk?\347\215\223\302\274\307y?N)\257\225\320]\202?\024 \nfL\301z?H\301S\310\225zv?\217\337\333\364g?r?\377$>w\202\375w?\266\331X\211yVr?F=D\243;\210}?![\226\257\313\360o?\022\245\275\301\027&s?\277\362 =E\016\201?\252\326\302,\264sz?K\t\301\252z\371m?b\270:\000\342\256~?\333\205\346:\215\264\204?\350\2751\004\000\307~?\002\361\272~\301n\210? \351\323*\372C\203?\262\r\334\201:\345\201?\325\231{H\370\336\177?o\270\217\334\232t{?\317\240\241\177\202\213\205?x\"\210\363p\002\203?o\020\255\025m\216\203?\362\321\342\214aN\200?|b\235*\3373r?\217\031\250\214\177\237\221?J\200\232Z\266\326w?\241\202\303\013\"Rs?c\230\023\264\311\341s?bJ$\321\313(\206?S\226!\216uq\213?\337T\244\302\330B\200?\340\204B\004\034B\205?\t\030]\336\034\256u?\006L\340\326\335<\205?&\303\361|\006\324{?\274Y\203\367U\271\200?e\036\371\203\201\347~?}\036\243<\363rx?zj\365\325U\201z?\027\021\305\344\r0\203?\037\365\327+,\270o?\370\342\213\366x!}?\261\244\334}\216\217v?\2237\300\314w\360s?\237u\215\226\003=\204?2\007AG\253Zr?\000X\0359\322\031x?\213l\347\373\251\361\202?\3474\013\264;\244x?\347O\033\325\351@v?\317,\tPS\313\206?\252J[\\\3433y?i\306\242\351\354d\200?\215\317d\377<\rx?\256L\370\245~\336\204?\036\242\321\035\304\316t?\372(#.\000\215\202?\353V\317I\357\033\177?\177\033b\274\346U}?\005\250\251ek}\201?\234\027\'\276\332Ql?\311^\357\376x\257z?\252a\277\'\326\251\202?\257\224e\210c]\214?\215\264T\336\216p\212?\343P\277\013[\263u?\277\324\317\233\212T\210?\325u\250\246$\353\200?\373\223\370\334\t\366\177?\'\302\206\247W\312\222?\351>\000\251M\234|?\371/\020\004\310\320\201?\340\272bFx{p?\314E|\'f\275x?\341\355A\010\310\227\200?k\016\020\314\321\343\227?\033)[$\355Fo?\367\345\314v\205>x?\351D\202\251f\326r?\227\222\345$\224\276p?\217\254\3742\030#r?X\001\276\333\274q\202?\265\213i\246{\235t?_\324\356W\001\276{?\345\'\325>\035\217y?\351\235\n\270\347\371s?\341\267!\306k^u?X\212\344+\201\224x?Y\023\013|E\267~? +\370m\210\361z?\301\374\0252W\006u?{\024\256G\341z\204?\277Hh\313\271\024\207?\314E|\'f\275x?B\262\200\t\334\272{?\374\374\367\340\265K{?\206x$^\236\316u?\243\3120\356\006\321z?\371\3323K\002\324\204?\257\013?8\237:v?,+MJA\267w?\rpA\266,_w?\357\032\364\245\267?g?\305\252A\230\333\275|?\242\013\352[\346t\211?,\237\345ypw\206?@KW\260\215x\202?+\242&\372|\224\201?f\026\241\330\n\232v?\226\261\241\233\375\201\202?<\331\315\214~4l?\032\210e3\207\244v?\226\315\034\222Z(y?\362|\006\324\233Q\203?q\343\026\363sC\203?\0322\036\245\022\236p?\267\326\027\tm9\207?#\025\306\026\202\034t?\305\320\352\344\014\305m?4\330\324yT\374\177?\214\365\rLn\024y?q9^\201\350Iy?\036\242\321\035\304\316t?\322\251+\237\345y\200?\027\241\330\n\232\226x?\026\211\tj\370\026v?O;\3745Y\243\216?\221\177f\020\037\330\201?\030\261O\000\305\310\202?J\230i\373WV\212?FXT\304\351${?\266\240\367\306\020\000l?\350\205;\027Fz\201?\305\260\303\230\364\367r?\270\346\216\376\227kq?\352wak\266\362r?_\271\3366S!~?\335A\354L\241\363j?\270\222\035\033\201x\215?\257\227\246\010pzg?F\261\334\322jH|?-\351(\007\263\t\200?\177Q\202\376B\217x?m\377\312J\223R\200?\212\006)x\n\271r?\243V\230\276\327\020\\?c\014\254\343\370\241\202?}v\300u\305\214\200?\343P\277\013[\263u?lxz\245,C\214?\327\236Y\022\240\246v?\237Z}uU\240v?I\236\353\373p\220p?\350\2751\004\000\307~?R~R\355\323\361x?O\"\302\277\010\032\203?\241\366[;Q\022\202?\017\323\276\271\277z|?[\013\263\320\316iv?\355\3262\031\216\347\203?\217\304\313\323\271\242t?y:W\224\022\202u?\314\226\254\212p\223q?\364j\200\322P\243\200?\007\013\'i\376\230v?\226\262\014q\254\213\213?\343\252\262\357\212\340\237?\177\237q\341@H\206?(\270XQ\203ix?\205\007\315\256{+\202?\354\335\037\357U+s?\3344\266\327\202\336{?-\005\244\375\017\260v?B\222Y\275\303\355p?\305\340a\3327\367w?\306k^\325Y-\200?\310\257\037b\203\205s?\325\352\253\253\002\265x?r\335\224\362Z\t}?\nH\373\037`\255z?\022\363\254\244\025\337p?\030\226?\337\026,u?,(\014\3124\232|?\226\265M\361\270\250v?\330\200\010q\345\354m?\376\233\027\'\276\332q?\344\3676\375\331\217t?J\200\232Z\266\326\207?\2300\232\225\355C~?\214\201u\034?Tz?\344\300\253\345\316L\200?\270!\306k^\325y?\234\334\357P\024\350s?\034_{fI\200z?V\t\026\2073\277j?\235\361}q\251J{?\007AG\253Z\322q?{\240\025\030\262\272\205?\261\033\266-\312l\220?\255\026\330c\"\245y?\031U\206q7\210v?\177NA~6r}??\346\003\002\235I{?T\246\230\203\240\243u?\303_\2235\352!z?F^\326\304\002_\201?sI\325v\023|s?p}Xo\324\ns?\005\026\300\224\201\003z?\340N\"\302\277\010z?Dio\360\205\311\204?\252}:\0363P\211?Mg\'\203\243\344u?i\375-\001\370\247t?vS\312k%tw?\237W<\365H\203{?\013\n\2032\215&g?\243\217\371\200@gr? #\240\302\021\244r?\233\3117\333\334\230~?\004r\211#\017Dv?f\026\241\330\n\232v?\024\262\36366;\202?\2143\2069A\233l?\331uoEb\202z?\002\2302p@Kw?lxz\245,C\214?\373\314Y\237rLv?\322\350\016bg\n\215?\347\037}\223\246A\201?\006F^\326\304\002\177?\014R\360\024r\245n?\r\032\372\'\270Xq?\265R\010\344\022G~?Hk\014:!t\200?\311 w\021\246(w?\223\253X\374\246\260r?\331\017\261\301\302Iz?\340\201\001\204\017%z?]n0\324a\205{?\321!p$\320`s?\347\306\364\204%\036\220?Md\346\002\227\307z?\313\301l\002\014\313\177?|\323\364\331\001\327u?\312\303B\255i\336\201?\353V\317I\357\033\177?\260V\355\232\220\326x?\352\036\331\\5\317q?,\365,\010\345}l?L\215\320\317\324\353v?4\202\215\353\337\365i?\371\3323K\002\324\204?\272\373\034\037-\316x?V\t\026\2073\277z?Q\335\\\374mO\200?\223\030\004V\016-\202?\212t?\247 ?{?-\352\223\334a\023y?H\243\002\'\333\300m?\2300\232\225\355C~?o\205\260\032KXk?\321<\200E~\375p?\260V\355\232\220\326x?\367tu\307b\233t?\000p\354\331s\231z?\355+\017\322S\344p?sh\221\355|?\225?\316\341Z\355a/t?\217P3\244\212\342u?)!XU/\277s?D\243;\210\235)\204?\274\304X\246_\"~?A\366z\367\307{\205?\222xy:W\224r?\242\177\202\213\0255x?,\237\345ypwv?\312\372\315\304t!v?\265m\030\005\301\343{?\\;Q\022\022i{?\023\013|E\267^s?6t\263?Pn{?8\204*5{\240\205?TX\251\240\242\352w?\325^D\3331uw?\331B\220\203\022f\212?\024|\323\364\331\001w?q\005\024\352\351#\200?\215\264T\336\216pz?\021W\316\336\031mu?\201@g\322\246\352~?\373\223\370\334\t\366\177?)w\237\343\243\305y?\303J\005\025U\277r?\357s|\2648cx?\231cyW=`~?\024>[\007\007{s?\206\306\023A\234\207\203?\364\303\010\341\321\306\221?)\350\366\222\306h}?0-\352\223\334as?\035\035W#\273\322\202?\340\234\021\245\275\301w?\371cZ\233\306\366z?\256-</\025\033\203?\260\342Tka\026z?\317\240\241\177\202\213\205?\353\033\230\334(\262v?\300\320#F\317-\204?v\301\340\232;\372\177?\334j\326\031\337\027w?\303\273\\\304wb\206?\266\240\367\306\020\000|?\224\333\366=\352\257w?\3742\030#\022\205v?\276\025\211\tj\370v?\260S\254\032\204\271}?\365)\307dq\377q?\n\274\223O\217my?\317i\026hwH\201?\032\024\315\003X\344w?\354Nw\236x\316v?\325\257t><Kp?\277Hh\313\271\024w?\355\234f\201v\207t?\320\225\010T\377 r?\'\336\001\236\264py?2\341\227\372ySq?\360P\024\350\023yr?\354\276cx\354g\201?\376\200\007\006\020>t?\006\177\277\230-Yu?\206\346:\215\264T~?=\263$@M-{?&:\313,B\261u?\013\362\263\221\353\246t?\342@H\0260\201{?d\263#\325w~q?\310\227P\301\341\005\201?\t\247\005/\372\nr?k*\213\302.\212n?\340\204B\004\034B\205?0\236AC\377\004\207?)_\320B\002Fw?O\252}:\0363\220?\"\334dT\031\306}?#\241-\347R\\u?\007\350\276\234\331\256\200?\357\216\214\325\346\377u?=\266e\300YJv?v\307b\233T4v?\362*k\233\342qq?\005\245h\345^`v?b\371\363m\301R}?\320D\330\360\364Jy?\017_&\212\220\272m??u\254Rz\246g?\217\027\322\341!\214\177?\340e\206\215\262~\203?l\314\353\210C6p?\r\374\250\206\375\236x?\017,G\310@\236}?{\205\005\367\003\036x?Xr\025\213\337\024v?\005\031\001\025\216 u?I\3642\212\345\226v?V\233\377W\0359r?\334g\225\231\322\372{?\210\277&k\324C\204?\217X\213O\0010\216?\252\017$\357\034\312\200?\203P\336\307\321\034y?c\323J!\220K|?xB\257?\211\317}?\t\214\365\rLn\204?\000X\0359\322\031x?\223\306h\035UMp?0Bx\264q\304\212?\270<\326\214\014rw?U\024\257\262\266)~?)\235H0\325\314z?\241L\243\311\305\030x?U\341\317\360f\r~?\202[w\363T\207|?{\024\256G\341z\204?\331\315\214~4\234\202?\261N\225\357\031\211\200?\223\250\027|\232\223w?\321\006`\003\"\304u?\242\177\202\213\0255x?\212!9\231\270U\200?76;R}\347w?\027\327\370L\366\317s?\'6\037\327\206\212\201?\255\025m\216s\233\200?\007\257]\332pXz?\334\021N\013^\364\205?U\334\270\305\374\334p?D\3058\177\023\n\201?\205`U\275\374Ns?\346\004mr\370\244s?r1\006\326q\374p?"
      }
    }
  }
}
node {
  name: "tensors/component_23"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "4\242\2647\370\302\304?6\253>W[\261\277?]m\305\376\262{\302?\320\263Y\365\271\332\312?\0216<\275R\226\301??W[\261\277\354\306?L\246\nF%u\302?@\023a\303\323+\305?\\ A\361c\314\305?Gr\371\017\351\267\307?yX\2505\315;\276?\312\303B\255i\336\301?\007_\230L\025\214\272?2w-!\037\364\274?\247\350H.\377!\305?\nh\"lxz\305?\0054\0216<\275\302?.\220\240\3701\346\306?\230\335\223\207\205Z\303?<\337O\215\227n\302?\t\033\236^)\313\300?m\305\376\262{\362\300?\230n\022\203\300\312\301?t\265\025\373\313\356\301?\264\310v\276\237\032\307?-\262\235\357\247\306\303?\205\353Q\270\036\205\303?\3436\032\300[ \301?S\005\243\222:\001\305?\252\361\322Mb\020\300?h\263\352s\265\025\303?2w-!\037\364\304?\230L\025\214J\352\304?\377\262{\362\260P\303?n4\200\267@\202\302?\304\261.n\243\001\304?n4\200\267@\202\302?\275\214b\271\245\325\270?HU\023D\335\007\270?\317\367S\343\245\233\304?\304\261.n\243\001\274?\0358gDio\310?\316\252\317\325V\354\277?/\335$\006\201\225\303?\314]K\310\007=\303?\222\313\177H\277}\305?\013F%u\002\232\300?\225e\210c]\334\306?\001\336\002\t\212\037\303?:\222\313\177H\277\275?-\262\235\357\247\306\273?p\316\210\322\336\340\273?\014\223\251\202QI\275?\374\251\361\322Mb\300?\017\013\265\246y\307\301?\3578EGr\371\277?Dio\360\205\311\304?\337\340\013\223\251\202\301?\372\355\353\3009#\272?X\3122\304\261.\306?R\270\036\205\353Q\300?B>\350\331\254\372\304?\312\241E\266\363\375\304? \014<\367\036.\271?6\253>W[\261\307?\016\2760\231*\030\305?\306\334\265\204|\320\303?P\215\227n\022\203\300?\2343\242\2647\370\302?\202\342\307\230\273\226\300?C\255i\336q\212\276?.\220\240\3701\346\276?}?5^\272I\304?\310\230\273\226\220\017\302?%u\002\232\010\033\276?333333\303?\030&S\005\243\222\302?z\245,C\034\353\302?B>\350\331\254\372\304?\307):\222\313\177\300?\222\\\376C\372\355\303?a2U0*\251\303?\030\225\324\th\"\304?\2505\315;N\321\301?\252`TR\'\240\301?\333\212\375e\367\344\301?\326\305m4\200\267\300?\3578EGr\371\277?\305\376\262{\362\260\300?c\177\331=yX\300?%\006\201\225C\213\274?\273\270\215\006\360\026\300?\376C\372\355\353\300\271?k\232w\234\242#\301?_\007\316\031Q\332\303?\021X9\264\310v\276?\311v\276\237\032/\275?*\251\023\320D\330\300?p_\007\316\031Q\302?p_\007\316\031Q\302?\376\324x\351&1\300?\365\333\327\201sF\304?\253>W[\261\277\274?\243#\271\374\207\364\303?\367\344a\241\3264\277?\023\362A\317f\325\307?^K\310\007=\233\305?\254\255\330_vO\276?KY\2068\326\305\305?:\222\313\177H\277\305?\236^)\313\020\307\302?\267b\177\331=y\300?\233\254Q\017\321\350\266?\244p=\n\327\243\300?\214J\352\0044\021\306?333333\303?X\3122\304\261.\276?\231*\030\225\324\t\310?X9\264\310v\276\307?S\226!\216uq\273?\306\334\265\204|\320\303?\314]K\310\007=\303?\241g\263\352s\265\305?\221~\373:p\316\300?=\n\327\243p=\272?\346\256%\344\203\236\275?\300\354\236<,\324\302?\372\355\353\3009#\272?v\340\234\021\245\275\301?R\270\036\205\353Q\300?N\321\221\\\376C\302?\265\025\373\313\356\311\303?B`\345\320\"\333\301?;\001M\204\rO\277?\215\227n\022\203\300\302?\013\265\246y\307)\302?0*\251\023\320D\300?\021X9\264\310v\276?\310\230\273\226\220\017\302?V}\256\266b\177\301?\363\216St$\227\277?\031\342X\027\267\321\300?\331_vO\036\026\302?\t\033\236^)\313\300?\226\262\014q\254\213\273?\265\246y\307):\302?\356|?5^\272\301?gDio\360\205\271?*\251\023\320D\330\300?\316S\035r3\334\270?\013F%u\002\232\300?w\276\237\032/\335\304?aTR\'\240\211\300?|a2U0*\301?z\245,C\034\353\302?\326V\354/\273\'\277?\203QI\235\200&\302?\365\020\215\356 v\266?R\270\036\205\353Q\300?\321\221\\\376C\372\275?\213\375e\367\344a\301?\274\005\022\024?\306\274?+\030\225\324\th\302?\240\211\260\341\351\225\302?\217\344\362\037\322o\277?\215\227n\022\203\300\272?\032Q\332\033|a\302?\237<,\324\232\346\275?\"\375\366u\340\234\301?\305\2171w-!\277?\356|?5^\272\301?t\265\025\373\313\356\301?\270@\202\342\307\230\303?\305\2171w-!\277?\226\262\014q\254\213\273?:\222\313\177H\277\275?,\324\232\346\035\247\300?\351&1\010\254\034\302?\315\314\314\314\314\314\264?:\222\313\177H\277\275?HP\374\030s\327\302?h\263\352s\265\025\303?a\303\323+e\031\302?\212\260\341\351\225\262\274?,\324\232\346\035\247\300?d]\334F\003x\303?\363\216St$\227\277?\345a\241\3264\357\300?z6\253>W[\301?\346?\244\337\276\016\274?\310\007=\233U\237\303?b\234\277\t\205\010\270?d\321tv28\262?\014\002+\207\026\331\306?*\251\023\320D\330\300?\367\006_\230L\025\274?yX\2505\315;\306?\023f\332\376\225\225\266?]\376C\372\355\353\300?\350j+\366\227\335\303?_\230L\025\214J\302?\314\356\311\303B\255\301?a2U0*\251\303?\003x\013$(~\314?\306m4\200\267@\302?h\263\352s\265\025\303?\351&1\010\254\034\302?\342\351\225\262\014q\274?\277}\0358gD\301?*:\222\313\177H\277?G\003x\013$(\276?\374\251\361\322Mb\300?\352\0044\0216<\275?\212\216\344\362\037\322\277?\243#\271\374\207\364\303?\343\245\233\304 \260\302?\226C\213l\347\373\301?38J^\235c\270?\341\013\223\251\202Q\301?/n\243\001\274\005\302?\200\267@\202\342\307\300?\"\375\366u\340\234\301?\036\247\350H.\377\301?\350j+\366\227\335\303?\332\033|a2U\300?\013F%u\002\232\300?|a2U0*\301?\206Z\323\274\343\024\275?~\0358gDi\277?\311\345?\244\337\276\306?\\ A\361c\314\305?\2549@0G\217\267?\366\356\217\367\252\225\271?;\001M\204\rO\277?U\301\250\244N@\303?\267b\177\331=y\300?\024\320D\330\360\364\302?\217\344\362\037\322o\277?\352\225\262\014q\254\273?F\266\363\375\324x\301?\353\3426\032\300[\300?\007_\230L\025\214\272?\256\266b\177\331=\301?A\016J\230i\373\267?}\320\263Y\365\271\302?1\010\254\034Zd\303?:#J{\203/\274?\"\216uq\033\r\300?\253\317\325V\354/\303?\017\013\265\246y\307\301?q\254\213\333h\000\277?\233\346\035\247\350H\276?\027\331\316\367S\343\305?r\212\216\344\362\037\302?\232\010\033\236^)\303?\230\335\223\207\205Z\303?\204\rO\257\224e\300?d;\337O\215\227\306?U\301\250\244N@\303?C\034\353\3426\032\310?\354\3009#J{\303?X9\264\310v\276\277?d\314]K\310\007\275?\034\353\3426\032\300\273?\032\300[ A\361\303?t\265\025\373\313\356\301?\223:\001M\204\r\277?\356|?5^\272\271?2U0*\251\023\300?J\014\002+\207\026\301?\347\221?\030x\356\265?\213\375e\367\344a\301?\271\215\006\360\026H\300?\236^)\313\020\307\302?\242E\266\363\375\324\300?\023a\303\323+e\301?\314\177H\277}\035\300?\212\216\344\362\037\322\277?\341z\024\256G\341\272?\274t\223\030\004V\276?s\327\022\362A\317\306?\366\227\335\223\207\205\272?\3122\304\261.n\303?F\266\363\375\324x\301?\267\013\315u\032i\271?\030&S\005\243\222\272?6\315;N\321\221\274?\256\360.\027\361\235\270?p_\007\316\031Q\272?W[\261\277\354\236\274?\312\340(yu\216\271?\221~\373:p\316\300?$\227\377\220~\373\302?gDio\360\205\301?\223\251\202QI\235\300?\300\312\241E\266\363\275?J\200\232Z\266\326\267?\226!\216uq\033\275?vq\033\r\340-\270?\373\313\356\311\303B\275?\211A`\345\320\"\303?\341z\024\256G\341\272?\256\266b\177\331=\301?\331_vO\036\026\302?\014\223\251\202QI\275?\0358gDio\270?\377!\375\366u\340\274?\312\375\016E\201>\271?}:\0363P\031\267?\246\nF%u\002\272?;\001M\204\rO\277?R\'\240\211\260\341\271?Tt$\227\377\220\276?\243#\271\374\207\364\273?\256\266b\177\331=\301?lxz\245,C\274?\252`TR\'\240\271?\t\212\037c\356Z\302?\031s\327\022\362A\277?\020\257\353\027\354\206\265?\374\030s\327\022\362\301?$\227\377\220~\373\272?>yX\2505\315\303?8\370\302d\252`\304?2U0*\251\023\300?e\031\342X\027\267\301?\204\rO\257\224e\300?t\265\025\373\313\356\271?\'1\010\254\034Z\304?\306m4\200\267@\302?\221\355|?5^\302??\306\334\265\204|\300?\265\246y\307):\302?}\256\266b\177\331\275?*:\222\313\177H\277?\007_\230L\025\214\302?\352\0044\0216<\275?\"lxz\245,\303?\374\030s\327\022\362\301?1\010\254\034Zd\303?q\033\r\340-\220\300?\343\307\230\273\226\220\277?\203QI\235\200&\302?\347\035\247\350H.\277?\343\245\233\304 \260\302?\234\304 \260rh\301?\307):\222\313\177\300?\010\254\034Zd;\277?\270@\202\342\307\230\303?\351\267\257\003\347\214\300? \357U+\023~\271?\327\243p=\n\327\303?/\335$\006\201\225\303?sh\221\355|?\305?\214\020\036m\034\261\266?\346?\244\337\276\016\274?\215(\355\r\2760\301?\243\222:\001M\204\275?\226C\213l\347\373\271?9EGr\371\017\301?C9\321\256B\312\267?\311v\276\237\032/\275?\223\251\202QI\235\300?\3436\032\300[ \301?\223:\001M\204\r\277?\007\360\026HP\374\300?\353\3426\032\300[\300?\337\340\013\223\251\202\301?5\3578EGr\301?q\033\r\340-\220\300?\351&1\010\254\034\302?\336\223\207\205Z\323\274?2\346\256%\344\203\276?<N\321\221\\\376\303?}?5^\272I\274?\004V\016-\262\235\277?\373\313\356\311\303B\275?\257\224e\210c]\274?R\270\036\205\353Q\300?\243#\271\374\207\364\313?\317\367S\343\245\233\304?\325x\351&1\010\274?\237\002`<\203\206\266?N\321\221\\\376C\302?}\256\266b\177\331\275?\t\033\236^)\313\300?N\321\221\\\376C\272?\016\204d\001\023\270\265?K\352\0044\0216\274?\210c]\334F\003\300?\215(\355\r\2760\301?\343\245\233\304 \260\302?\243\222:\001M\204\305?D\372\355\353\3009\303?\370\302d\252`T\302?\356\353\3009#J\273?\3274\3578EG\302?\361)\000\3063h\270?x\351&1\010\254\274?\233U\237\253\255\330\277?\3578EGr\371\307?\0216<\275R\226\301?\0319\013{\332\341\267?\342X\027\267\321\000\276?\300\354\236<,\324\272?5\3578EGr\301?\035\311\345?\244\337\276?\341\177+\331\261\021\270?\2343\242\2647\370\302?X9\264\310v\276\277?)\355\r\2760\231\302?gDio\360\205\301?>yX\2505\315\273?\247y\307):\222\273?O\257\224e\210c\275?\306m4\200\267@\302?\016O\257\224e\210\303?B\317f\325\347j\303?\031\342X\027\267\321\300?\rq\254\213\333h\300?\3578EGr\371\277?\t\033\236^)\313\300?\351&1\010\254\034\302?>\350\331\254\372\\\275?\333\212\375e\367\344\301?\336\223\207\205Z\323\274?\007\360\026HP\374\300?=\233U\237\253\255\300?\222\355|?5^\272?\020z6\253>W\273?\013\265\246y\307)\302?\217\302\365(\\\217\302?\035Zd;\337O\305?\230n\022\203\300\312\301?\347\035\247\350H.\277?h\"lxz\245\304?\243\001\274\005\022\024\277?d;\337O\215\227\276?W[\261\277\354\236\274?\325\th\"lx\272? \322o_\007\316\301?\032Q\332\033|a\302?S\226!\216uq\273?\246a\370\210\230\022\271?\355\r\2760\231*\300?\200\267@\202\342\307\300?t\265\025\373\313\356\301?mV}\256\266b\277?p\316\210\322\336\340\273?"
      }
    }
  }
}
node {
  name: "tensors/component_24"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\330\201sF\224\366\316?o\201\004\305\2171\307?]m\305\376\262{\312?W[\261\277\354\236\320?\326V\354/\273\'\307?\364lV}\256\266\312?\330\201sF\224\366\306?\007\316\031Q\332\033\314?\024\256G\341z\024\316?\226C\213l\347\373\311?\036\026jM\363\216\303?k+\366\227\335\223\307?\037\364lV}\256\316?\025\035\311\345?\244\307?]m\305\376\262{\312?\nh\"lxz\315?\005\243\222:\001M\304?\373\\m\305\376\262\313?\344\024\035\311\345?\304?T\343\245\233\304 \310?\005\305\2171w-\311?\010\254\034Zd;\307?\030\225\324\th\"\320?\206\311T\301\250\244\306?\360\247\306K7\211\311?\333\371~j\274t\323?\336\223\207\205Z\323\314?)\313\020\307\272\270\305?,\324\232\346\035\247\310?\212\037c\356ZB\306?\032\300[ A\361\313?\371\240g\263\352s\315?\274\005\022\024?\306\314?Gr\371\017\351\267\307?\211\322\336\340\013\223\311?0*\251\023\320D\310?T\343\245\233\304 \310?\236^)\313\020\307\302?\325x\351&1\010\304?j\274t\223\030\004\306?\204\236\315\252\317\325\306?\250\306K7\211A\310?\305 \260rh\221\315?\277}\0358gD\311?E\330\360\364JY\306?\rq\254\213\333h\310?\206\311T\301\250\244\306?\314]K\310\007=\313?q=\n\327\243p\305?\326V\354/\273\'\307?\211A`\345\320\"\303?\341\013\223\251\202Q\301?EGr\371\017\351\307?\236^)\313\020\307\312?\001M\204\rO\257\304?\372~j\274t\223\310?aTR\'\240\211\310?\374\030s\327\022\362\311?*:\222\313\177H\307?\264Y\365\271\332\212\305?<\275R\226!\216\321?\365\271\332\212\375e\307?m\305\376\262{\362\310?I.\377!\375\366\315?\374\251\361\322Mb\310?\217St$\227\377\310?\321\221\\\376C\372\305?\272k\t\371\240g\303?\276\301\027&S\005\313?\'1\010\254\034Z\304?\344\024\035\311\345?\304?c\177\331=yX\310?\2657\370\302d\252\310?\203/L\246\nF\305?j\274t\223\030\004\306?\371\017\351\267\257\003\307?RI\235\200&\302\316?\226\262\014q\254\213\313?)\355\r\2760\231\322?Z\365\271\332\212\375\305?k+\366\227\335\223\307?\263\014q\254\213\333\310?~\0358gDi\307?\230L\025\214J\352\304?\261Pk\232w\234\312?\356\353\3009#J\313?\217\302\365(\\\217\312?\217St$\227\377\310?Nb\020X9\264\310?h\263\352s\265\025\313?\305 \260rh\221\305?\321\221\\\376C\372\305?v\340\234\021\245\275\301?\272\332\212\375e\367\304?X9\264\310v\276\307?7\211A`\345\320\312?R\270\036\205\353Q\310?H\341z\024\256G\301?#\333\371~j\274\304?\"\216uq\033\r\310?F\224\366\006_\230\304?Nb\020X9\264\310?\212\037c\356ZB\306?L7\211A`\345\310?8\370\302d\252`\314?\244p=\n\327\243\310?\223:\001M\204\r\307?\214\333h\000o\201\304?\353\3426\032\300[\320?F%u\002\232\010\303?\365\333\327\201sF\304?h\221\355|?5\306?\344\203\236\315\252\317\305?\013F%u\002\232\310?\226!\216uq\033\305?^K\310\007=\233\305?Nb\020X9\264\300?@\244\337\276\016\234\313?\300\354\236<,\324\312?U\301\250\244N@\313?-!\037\364lV\305?|a2U0*\311?\313\241E\266\363\375\320?\340\234\021\245\275\301\307?\244\337\276\016\2343\302?\360\205\311T\301\250\304?C\255i\336q\212\306?\324\232\346\035\247\350\310?\"\375\366u\340\234\311?:#J{\203/\314?\252\361\322Mb\020\310?\326\305m4\200\267\310?\332\316\367S\343\245\313?\221\017z6\253>\307?\177\331=yX\250\305?}?5^\272I\304?k\232w\234\242#\301?\340-\220\240\3701\306?\261\341\351\225\262\014\311?\227\220\017z6\253\306?\353\3426\032\300[\310?\212\216\344\362\037\322\307?u\223\030\004V\016\305?RI\235\200&\302\306?c\356ZB>\350\301?\360\247\306K7\211\311?k\232w\234\242#\321?4\0216<\275R\306?\214J\352\0044\021\306?\320\263Y\365\271\332\302?\250\306K7\211A\320?\342\351\225\262\014q\314?\312T\301\250\244N\320?\006\201\225C\213l\307?\303d\252`TR\307?\235\357\247\306K7\311?&S\005\243\222:\311?|\362\260Pk\232\307?\'1\010\254\034Z\304?L\246\nF%u\302?\337\340\013\223\251\202\311?\233\346\035\247\350H\306?\374\030s\327\022\362\311?_\007\316\031Q\332\303?\223:\001M\204\r\307?1\010\254\034Zd\303?\314\356\311\303B\255\301?\227\377\220~\373:\310?r\371\017\351\267\257\303?c\020X9\264\310\306?\301\250\244N@\023\311?jM\363\216St\304?|a2U0*\311?]\334F\003x\013\304?=\233U\237\253\255\310?{\203/L\246\n\306?>\350\331\254\372\\\305?\330\201sF\224\366\306?B`\345\320\"\333\301?\026\373\313\356\311\303\302?\n\327\243p=\n\307?\016-\262\235\357\247\316?\022\024?\306\334\265\304?\216uq\033\r\340\275?%u\002\232\010\033\306?\\ A\361c\314\305?\253>W[\261\277\304?\272k\t\371\240g\303?Z\365\271\332\212\375\305?-!\037\364lV\305?2\346\256%\344\203\316?\220\240\3701\346\256\305?\270\257\003\347\214(\305?;p\316\210\322\336\310?yX\2505\315;\306?~\0358gDi\307?(\017\013\265\246y\307?\016-\262\235\357\247\306?u\002\232\010\033\236\306?\366(\\\217\302\365\310?io\360\205\311T\311?f\210c]\334F\303?)\\\217\302\365(\314?U0*\251\023\320\314?\244p=\n\327\243\310?H\277}\0358g\304?o\360\205\311T\301\310?t\265\025\373\313\356\311?\256G\341z\024\256\307?\023a\303\323+e\301?d;\337O\215\227\306?\310\007=\233U\237\303?\016\2760\231*\030\305?\347\214(\355\r\276\300?\317\367S\343\245\233\314?\024\320D\330\360\364\312?\005\305\2171w-\311?k\232w\234\242#\311?\257%\344\203\236\315\312?\3274\3578EG\302?\234\304 \260rh\301?[\323\274\343\024\035\311?\246\233\304 \260r\310?\370S\343\245\233\304\310?\022\245\275\301\027&\303?\217\302\365(\\\217\312?\245,C\034\353\342\306?2U0*\251\023\310?\251\244N@\023a\303?\"lxz\245,\313?f\210c]\334F\313?\316\252\317\325V\354\307?\004V\016-\262\235\307?\177\373:p\316\210\302?_\007\316\031Q\332\303?B\317f\325\347j\303?\0358gDio\310?\236^)\313\020\307\302?\005\305\2171w-\301?\326V\354/\273\'\307?\321\221\\\376C\372\305?\265\025\373\313\356\311\303?_\230L\025\214J\312?\250W\3122\304\261\306?\341\013\223\251\202Q\311?yX\2505\315;\306?F%u\002\232\010\303?Y\2068\326\305m\304?\271\215\006\360\026H\310?C\034\353\3426\032\310?\323Mb\020X9\314?(\017\013\265\246y\307?X\3122\304\261.\306?\367\344a\241\3264\307?A\202\342\307\230\273\306?\225\324\th\"l\310?\227\377\220~\373:\310?\250W\3122\304\261\316?V\016-\262\235\357\317?\026\373\313\356\311\303\312?\200H\277}\0358\307?M\025\214J\352\004\304?$\227\377\220~\373\312?>yX\2505\315\303?\275\343\024\035\311\345\307?\206\311T\301\250\244\306?\013F%u\002\232\310?!\260rh\221\355\304?\356|?5^\272\311?\266\204|\320\263Y\305?vO\036\026jM\303?\206\311T\301\250\244\306?\363\037\322o_\007\306?\302\027&S\005\243\312?r\371\017\351\267\257\303?\230n\022\203\300\312\311?\027\267\321\000\336\002\311?\327\243p=\n\327\303?\030\225\324\th\"\304?6^\272I\014\002\313?c\177\331=yX\310?j\336q\212\216\344\312?\227\377\220~\373:\310?\210c]\334F\003\310?\370\302d\252`T\302?)\313\020\307\272\270\305?\026jM\363\216S\304?[\323\274\343\024\035\301?\317\367S\343\245\233\320?\207\247W\3122\304\311?8gDio\360\305?\"\216uq\033\r\310?\277\237\032/\335$\306?\000\000\000\000\000\000\310?\272\332\212\375e\367\304?8\370\302d\252`\304?\007_\230L\025\214\302?\232w\234\242#\271\304?!\260rh\221\355\304?\031\004V\016-\262\305?\307\272\270\215\006\360\306?\353s\265\025\373\313\306?Dio\360\205\311\314?\2343\242\2647\370\302?\310\230\273\226\220\017\302?\370S\343\245\233\304\310?\210\205Z\323\274\343\304?\245,C\034\353\342\306?F\266\363\375\324x\301?)\355\r\2760\231\302?\200\267@\202\342\307\310?\210\205Z\323\274\343\304?\003x\013$(~\304?\237\253\255\330_v\307?r\371\017\351\267\257\313?\264\310v\276\237\032\277?`vO\036\026j\305?\305\2171w-!\307?m\347\373\251\361\322\315?HP\374\030s\327\302?\254\255\330_vO\306?=\233U\237\253\255\310?\034\353\3426\032\300\303?\342\351\225\262\014q\320?\272\332\212\375e\367\304?}\256\266b\177\331\305?\211\322\336\340\013\223\301?TR\'\240\211\260\301?\345a\241\3264\357\310?\316\252\317\325V\354\307?s\327\022\362A\317\306?C\255i\336q\212\306?\241E\266\363\375\324\310?\250W\3122\304\261\306?\373\\m\305\376\262\303?%u\002\232\010\033\306?0L\246\nF%\305?\217St$\227\377\310?\375\324x\351&1\310?q\254\213\333h\000\307?\267b\177\331=y\310?\310\230\273\226\220\017\312?A\202\342\307\230\273\306?J{\203/L\246\312?e\031\342X\027\267\311?\020\351\267\257\003\347\304?\201\225C\213l\347\303?d]\334F\003x\303?\230L\025\214J\352\304?(\017\013\265\246y\317?O\257\224e\210c\305?ffffff\316?(~\214\271k\t\311?\206Z\323\274\343\024\305?n\022\203\300\312\241\305?\310\007=\233U\237\303??5^\272I\014\312?\265\246y\307):\302?Nb\020X9\264\310?f\210c]\334F\303?\036\026jM\363\216\303?\010\254\034Zd;\307?2\346\256%\344\203\306?\211A`\345\320\"\303?\037\205\353Q\270\036\305?\022\024?\306\334\265\304?\000\000\000\000\000\000\310?\031\004V\016-\262\305?\321\221\\\376C\372\305?\324+e\031\342X\307?\327\243p=\n\327\313?\363\037\322o_\007\306?7\032\300[ A\311?\007\316\031Q\332\033\304?g\325\347j+\366\307?E\266\363\375\324x\311?\304\261.n\243\001\314?\034|a2U0\302?\307\272\270\215\006\360\306?\007\316\031Q\332\033\314?1\231*\030\225\324\311?3\304\261.n\243\311?\353s\265\025\373\313\276?\332\254\372\\m\305\306?\212\260\341\351\225\262\304?\336\223\207\205Z\323\304?\375\366u\340\234\021\305?6\315;N\321\221\304?_\272I\014\002+\307?\275R\226!\216u\311?\n\327\243p=\n\307?\234\304 \260rh\311?\305\376\262{\362\260\310?\352\225\262\014q\254\313?\t\033\236^)\313\310?S\005\243\222:\001\305?=,\324\232\346\035\307?\241\3701\346\256%\304?\331\316\367S\343\245\303?\025\035\311\345?\244\307?\316\210\322\336\340\013\313?\003x\013$(~\304?x\234\242#\271\374\307?h\221\355|?5\306?\007\316\031Q\332\033\304?\276\301\027&S\005\303?h\221\355|?5\306?\323Mb\020X9\304?V}\256\266b\177\311?|a2U0*\311?\003x\013$(~\304?8gDio\360\305?\312T\301\250\244N\300?\303\323+e\031\342\310?\277\016\2343\242\264\307?\271\374\207\364\333\327\311?\354Q\270\036\205\353\311?\343\245\233\304 \260\312?lxz\245,C\304?y\351&1\010\254\304?\036\247\350H.\377\311?l\t\371\240g\263\312?\334F\003x\013$\310?\235\200&\302\206\247\307? c\356ZB>\320?w\276\237\032/\335\304?\244p=\n\327\243\310? \322o_\007\316\311?\020z6\253>W\303?[B>\350\331\254\302?r\212\216\344\362\037\312?\347\035\247\350H.\307?\214J\352\0044\021\306?;p\316\210\322\336\310?\030\225\324\th\"\304?>\350\331\254\372\\\305?\212\216\344\362\037\322\307?8gDio\360\305?\201\225C\213l\347\303?\237\315\252\317\325V\304?W\354/\273\'\017\303?\236^)\313\020\307\302?\226C\213l\347\373\301?\315;N\321\221\\\316?j\274t\223\030\004\306?\262\235\357\247\306K\307?\260\003\347\214(\355\305?\227\377\220~\373:\310?\320\263Y\365\271\332\302?"
      }
    }
  }
}
node {
  name: "tensors/component_25"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\000t\230//\300\236?\031x\356=\\r\214?\n\327\243p=\n\227?\325\220\270\307\322\207\256?z\374\336\246?\373\221?\317f\325\347j+\226?\014\007B\262\200\t\214?\311\002&p\353n\216?o\365\234\364\276\361\225?\213\246\263\223\301Q\222?\237<,\324\232\346\215?\344\3676\375\331\217\224?\241\363\032\273D\365\246?\240\002`<\203\206\236?\333\277\262\322\244\024\224?\2073\277\232\003\004\223?\377!\375\366u\340\214?\354\213\204\266\234K\221?\366#EdX\305\213?\365\333\327\201sF\224?;S\350\274\306.\221?\375\023\\\254\250\301\224?\223\3367\276\366\314\242?<\203\206\376\t.\206?q\003>?\214\020\216?\303G\304\224H\242\227?\202\347\336\303%\307\215?_\235c@\366z\227?\230Q,\267\264\032\222?\203\300\312\241E\266\223?v\333\205\346:\215\224?\330d\215z\210F\227?\365g?RD\206\225?a\253\004\213\303\231\217?\343\0314\364Op\221?\310\260\21272\217\234?j0\r\303G\304\224?}\226\347\301\335Y\233? \013\321!p$\200?\335\315S\035r3\214?lxz\245,C\214?\320\\\247\221\226\312\213?\221\226\312\333\021N\253?\265\340E_A\232\221?\317,\tPS\313\206?\351\232\3117\333\334\230?$\321\313(\226[\232?\360\212\340\177+\331\221?X!\345\'\325>\215?v7Ou\310\315\220?\210)\221D/\243\230?\211A`\345\320\"\213?\306\242\351\354dp\224?\303\353\372\005\273a\233?w-!\037\364l\206?\322\251+\237\345y\240?e\245I)\350\366\222?z\302\022\017(\233\222?w-!\037\364l\226?\327\022\362A\317f\225?{\275\373\343\275j\245?q\341@H\0260\241?\234\304 \260rh\221?f\275\030\312\211v\245?\347\214(\355\r\276\220?\333\371~j\274t\223?g\017\264\002CV\227?|fI\200\232Z\226?w\204\323\202\027}\245?\277Hh\313\271\024\227?\211\315\307\265\241b\214?\023\'\367;\024\005\232?\274\035\341\264\340E\217?\007\360\026HP\374\210?\211\315\307\265\241b\214?X9\264\310v\276\217?J\230i\373WV\232?d\264\216\252&\210\232?K\352\0044\0216\264?\022\031V\361F\346\221?\r\246a\370\210\230\222?\231\365b(\'\332\225?\344\203\236\315\252\317\205?\230VC\342\036K\237?\213\370N\314z1\224?0*\251\023\320D\230?\246~\336T\244\302\230?#\025\306\026\202\034\224?\224j\237\216\307\014\224?|~\030!<\332\230?\266\204|\320\263Y\225?=a\211\007\224M\231?Mg\'\203\243\344\205?\t3m\377\312J\223?\005\255\300\220\325\255\216?\205\0108\204*5\233?A\202\342\307\230\273\226?\250\373\000\2446q\222?\271S:X\377\347\220?S\256\360.\027\361\215?\342X\027\267\321\000\216?_A\232\261h:\233?\211Y/\206r\242\215?\322\251+\237\345y\220?\034\353\3426\032\300\233?\311\216\215@\274\256\217?\021\307\272\270\215\006\220?t\322\373\306\327\236\211?u\216\001\331\353\335\237?X\034\316\374j\016\220??\251\366\351x\314\240?\334\021N\013^\364\225?\274\355Bs\235F\232?\317\362<\270;k\227?\005\250\251ek}\221?x\321W\220f,\212?(\270XQ\203i\230?\326\342S\000\214g\220?u\002\232\010\033\236\216?\225`q8\363\253\251?\274y\252Cn\206\213?\251\023\320D\330\360\224?\016\363\345\005\330G\247?\036\026jM\363\216\223?\314E|\'f\275\210?\013\357r\021\337\211\211?\325\317\233\212T\030\213?Dio\360\205\311\224?\362F\346\221?\030\230?\2348\271\337\241(\220?\246\226\255\365EB\233?\351>\000\251M\234\214?\217\344\362\037\322o\217?eS\256\360.\027\221?\346Ws\200`\216\216?\004\342u\375\202\335\220?\206\316k\354\022\325\213?\222W\347\030\220\275\216?g\355\266\013\315u\252?vq\033\r\340-\220?\214\326Q\325\004Q\227?333333\223?\256d\307F ^\227?\317\240\241\177\202\213\225??\214\020\036m\034\221?m\034\261\026\237\002\240?pw\326n\273\320\254?;S\350\274\306.\241?\202\347\336\303%\307\215?\362$\351\232\3117\213?\326\255\236\223\3367\236?0du\253\347\244\227?\272\337\241(\320\'\242?\335)\035\254\377s\230?Bx\264q\304Z\234?\316\302\236v\370k\222?\333m\027\232\3534\222?\305\2171w-!\217?\342X\027\267\321\000\216?\301\305\212\032L\303\220?\370\031\027\016\204d\241?\2348\271\337\241(\240?\2446qr\277C\221?\350\244\367\215\257=\223?\2721=a\211\007\224?\026\244\031\213\246\263\223?\003}\"O\222\256\211?D/\243Xni\225?\027HP\374\030s\207?\331\316\367S\343\245\213?\026\244\031\213\246\263\223?\305\2171w-!\217?\322\373\306\327\236Y\222?\2549@0G\217\237?\326\305m4\200\267\240?\212\007\224M\271\302\233?\350j+\366\227\335\243?\357\304\254\027C9\221?\207\033\360\371a\204\220?\344\203\236\315\252\317\205?T\343\245\233\304 \220?a\246\355_Yi\222?\311\216\215@\274\256\217?\317f\325\347j+\226?\033G\254\305\247\000\210?\314\321\343\3676\375\231?Mg\'\203\243\344\205?\223\244k&\337l\223?\373\306\327\236Y\022\240?#\333\371~j\274\224?\257_\260\033\266-\252?\333\304\311\375\016E\241?\244k&\337ls\243?{\210Fw\020;\223?\310\230\273\226\220\017\232?\323\301\372?\207\371\222?(\226[Z\r\211\233?\'\240\211\260\341\351\225?B>\350\331\254\372\214?y\001\366\321\251+\217?H\311\253s\014\310\216?m\377\312J\223R\220?\022\203\300\312\241E\226?\241\333K\032\243u\224?\217\337\333\364g?\222?T:X\377\3470\217?\376e\367\344a\241\226?\314\271\024W\225}\227?\221\'I\327L\276\231?\225\327J\350.\211\203?\337T\244\302\330B\240?\316p\003>?\214\220?[\r\211{,}\250?\022\203\300\312\241E\226?\323HK\345\355\010\247?{Nz\337\370\332\223?}\"O\222\256\231\234?-C\034\353\3426\232?\223\244k&\337l\223?\200\317\017#\204G\213?\300x\006\r\375\023\214?\"\211^F\261\334\222?\376\317a\276\274\000\233?L\303\360\0211%\222?_\037\235\272\362Y\216?\334\235\265\333.4\227?l\220IF\316\302\216?\314\351\262\230\330|\214?\243#\271\374\207\364\213?\025\214J\352\0044\221?_c\227\250\336\032\210?BV\267zNz\217?\255\300\220\325\255\236\223?\206B\004\034B\225\212?\273\233\247:\344f\230?\256|\226\347\301\335\211?\271\215\006\360\026H\220?-\317\203\273\263v\213?0*\251\023\320D\210?$EdX\305\033\211?\001\301\034=~o\223?\"\375\366u\340\234\221?Y\2068\326\305m\224?_{fI\200\232\232?\303\273\\\304wb\226?\316\374j\016\020\314\241?H\334c\351C\027\224?=\'\275o|\355\211?\324\237\375H\021\031\226?\31667\246\',\221?g\233\033\323\023\226\230?\361\200\262)Wx\227?\226\312\333\021N\013\216?\\\224\331 \223\214\214?\243#\271\374\207\364\213?\350\366\222\306h\035\225?3\371f\233\033\323\223?\t3m\377\312J\223?\037\200\324&N\356\227?)\347\213\275\027_\204?\340\264\340E_A\212?\331Z_$\264\345\214?\341\006|~\030!\234?\220\367\252\225\t\277\204?=\017\356\316\332m\207?V\225}W\004\377\213?\305\212\032L\303\360\241?Dio\360\205\311\224?>\355\360\327d\215\232?\311\352V\317I\357\233?h\035UM\020u\217?2\341\227\372yS\221?\026\244\031\213\246\263\223?a\246\355_Yi\222?\254!q\217\245\017\215?y]\277`7l\233?\023\325[\003[%\230?\245N@\023a\303\223?\274y\252Cn\206\213?\230VC\342\036K\217?O\257\224e\210c\215?\rY\335\3529\351\235?\3127\333\334\230\236\220???\214\020\036m\214?{\210Fw\020;\223?\336{\270\344\270S\232?\354\335\037\357U+\223?\025\306\026\202\034\224\220?r\304Z|\n\200\241?\005\250\251ek}\241?\344\332P1\316\337\244?y\001\366\321\251+\217?\341z\024\256G\341\232?\322\373\306\327\236Y\222?O#-\225\267#\214?\037.9\356\224\016\226?\223\221\263\260\247\035\236?T\343\245\233\304 \220?I\3642\212\345\226\206??RD\206U\274\241?\t3m\377\312J\223?\346?\244\337\276\016\234?2\316\337\204B\004\234?e\337\025\301\377V\222?MOX\342\001e\223?\264T\336\216pZ\240?\274y\252Cn\206\213?G\353\250j\202\250\233?\254\255\330_vO\216?9\314\227\027`\037\215?=\325!7\303\r\230?\233\3117\333\334\230\216?\3225\223o\266\271\221?\036\242\321\035\304\316\224?\3269\006d\257w\257?\202[w\363T\207\214?\255\206\304=\226>\224?\351&1\010\254\034\212?\001R\2338\271\337\241?\244\031\213\246\263\223\241?\362\352\034\003\262\327\233?\277\2024c\321t\226?\256\360.\027\361\235\210?\325[\003[%X\234?\\\010rP\302L\213?\306h\035UM\020\225?\034wJ\007\353\377\214?\274\221y\344\017\006\216?h\035UM\020u\217?+MJA\267\227\244?\226\312\333\021N\013\216?\227x@\331\224+\234?E\022\275\214b\271\245?\234\304 \260rh\221?{Nz\337\370\332\223?\230\027`\037\235\272\222?\234\376\354G\212\310\220?\027\274\350+H3\226?\033/\335$\006\201\225?\322tv28J\216?Y\372\320\005\365-\223?\354Q\270\036\205\353\221?\320\270p $\013\230?{\210Fw\020;\243?s\334)\035\254\377\223?7\211A`\345\320\242?\316\024:\257\261K\224?\365-s\272,&\226?\r\340-\220\240\370\221?V\225}W\004\377\233?\214\020\036m\034\261\226?R?o*Ra\254?EGr\371\017\351\227?\241g\263\352s\265\225?2r\026\366\264\303\237?\330\010\304\353\372\005\233?\014\223\251\202QI\235?;\344f\270\001\237\217?>\005\300x\006\r\235?\302\243\215#\326\342\223?\317\332m\027\232\353\224?\230\027`\037\235\272\222?\261\371\2706T\214\223?\r\032\372\'\270X\221?\215\264T\336\216p\212?\325\347j+\366\227\215?\255\372\\m\305\376\242?\0162\311\310Y\330\223?\256|\226\347\301\335\211?\021\036m\034\261\026\217?X\377\3470_^\240?\004\342u\375\202\335\220?\364\375\324x\351&\221?\303_\2235\352!\212?0\300>:u\345\223?Y\300\004n\335\315\223?;\215\264T\336\216\220?F=D\243;\210\215?\350\336\303%\307\235\222?\316\374j\016\020\314\221?\204\022f\332\376\225\225?U\301\250\244N@\223?\320D\330\360\364J\231?n\027\232\3534\322\222?yu\216\001\331\353\215?\2505\315;N\321\221?\316N\006G\311\253\223?\004\342u\375\202\335\220?-\267\264\032\022\367\210?\325[\003[%X\234?\0162\311\310Y\330\223?\360\026HP\374\030\223?e\245I)\350\366\222?\251\023\320D\330\360\224?\340\276\016\2343\242\224?\265\340E_A\232\221?\003\t\212\037c\356\212?\245\210\014\253x#\223?M\177\366#Ed\210?\034\003\262\327\273?\216?&\252\267\006\266J\220?Qf\203L2r\206?\335A\354L\241\363\232?\022\245\275\301\027&\223?\357\311\303B\255i\236?\'\332UH\371I\225?\270\036\205\353Q\270\216?\242]\205\224\237T\233?h\005\206\254n\365\214?\331B\220\203\022f\232?-\317\203\273\263v\213?H\304\224H\242\227\221?\230\243\307\357m\372\223?j\244\245\362v\204\223?\213q\376&\024\"\240?t\272,&6\037\227?y\001\366\321\251+\237?\'\024\"\340\020\252\224?\'6\037\327\206\212\221?J$\321\313(\226\233?8l[\224\331 \223?\321\226s)\256*\233?\2613\205\316k\354\222?\343\215\314#\1770\220?X9\264\310v\276\237?\325\347j+\366\227\215?\033\365\020\215\356 \226?\375\301\300s\357\341\222?Q\024\350\023y\222\224?\350j+\366\227\335\223?\336\345\"\276\023\263\216?0\330\r\333\026e\226?\267(\263A&\031\231?\273\233\247:\344f\230?2r\026\366\264\303\217?\225\232=\320\n\014\211?\210\327\365\013v\303\226?\234\242#\271\374\207\224?s\242]\205\224\237\224?A\016J\230i\373\207?\\\254\250\3014\014\217?m\377\312J\223R\220?\376}\306\205\003!\211?\332\247\3431\003\225\221?\366\227\335\223\207\205\212?\214\204\266\234Kq\225?\205\266\234KqU\211?\277Hh\313\271\024\227?\\\224\331 \223\214\214?"
      }
    }
  }
}
node {
  name: "tensors/component_26"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "5\3578EGr\335?\232\231\231\231\231\231\321?\001\336\002\t\212\037\327?\256\266b\177\331=\345?\212\037c\356ZB\316?\033/\335$\006\201\331?|\362\260Pk\232\323?jM\363\216St\324?M\025\214J\352\004\334?\032\300[ A\361\333?Y\027\267\321\000\336\322?0*\251\023\320D\330?\026jM\363\216S\324?\321\221\\\376C\372\321?\371\017\351\267\257\003\327?\255\372\\m\305\376\332?mV}\256\266b\323?Gr\371\017\351\267\327?e\031\342X\027\267\321?\223:\001M\204\r\323?8\370\302d\252`\324?\\\217\302\365(\\\317?\312\303B\255i\336\335?\310\230\273\226\220\017\322?\001\336\002\t\212\037\327?/n\243\001\274\005\332?\356\353\3009#J\333?I.\377!\375\366\315?KY\2068\326\305\331?3\304\261.n\243\321?{\203/L\246\n\326?\325\th\"lx\336?d;\337O\215\227\326?9\326\305m4\200\327?\210\026\331\316\367S\333?\001\336\002\t\212\037\337?$\227\377\220~\373\326?\254\213\333h\000o\311?\325x\351&1\010\304?I.\377!\375\366\321?\232\010\033\236^)\323?\2343\242\2647\370\322?\027\331\316\367S\343\335?\222\\\376C\372\355\327?Qk\232w\234\242\327?\216\006\360\026HP\330?\254\034Zd;\337\323?\366(\\\217\302\365\330?M\204\rO\257\224\321?V\237\253\255\330_\322?M\363\216St$\317?\363\037\322o_\007\316?m\347\373\251\361\322\321?K\310\007=\233U\323?\037\205\353Q\270\036\321?\270\257\003\347\214(\325?\302\027&S\005\243\326?&\344\203\236\315\252\327?\200H\277}\0358\317?\317\367S\343\245\233\324?\026\373\313\356\311\303\326?\276\301\027&S\005\323?\244\337\276\016\2343\322?S\005\243\222:\001\325?\273\'\017\013\265\246\325?7\032\300[ A\325?\263{\362\260Pk\322?\270\036\205\353Q\270\316?W\354/\273\'\017\333?\252\202QI\235\200\316?\026jM\363\216S\320?\356ZB>\350\331\314?\025\214J\352\0044\325?6\315;N\321\221\320?o\360\205\311T\301\320?\366(\\\217\302\365\320?\362\322Mb\020X\321?\304\261.n\243\001\330?\234\304 \260rh\341?\323\274\343\024\035\311\321?\314\356\311\303B\255\321?\030&S\005\243\222\326?\276\237\032/\335$\316?M\204\rO\257\224\315?\252`TR\'\240\325?\331\316\367S\343\245\327?\207\026\331\316\367S\323?\341\013\223\251\202Q\331?\276\301\027&S\005\323?\355\r\2760\231*\324?\334F\003x\013$\320?\353\3426\032\300[\320?\374\030s\327\022\362\311?k\232w\234\242#\321?\372\355\353\3009#\322?@\244\337\276\016\234\327?\214\333h\000o\201\314?o\360\205\311T\301\310?v\340\234\021\245\275\321?\023a\303\323+e\321?\272\332\212\375e\367\320?\026\373\313\356\311\303\322?\256\266b\177\331=\321?\200\267@\202\342\307\320?\331_vO\036\026\322?\334F\003x\013$\324?\205|\320\263Y\365\321?,e\031\342X\027\323?\301\312\241E\266\363\331?%u\002\232\010\033\322?K\352\0044\0216\320?\003x\013$(~\314?\250W\3122\304\261\316?\252\202QI\235\200\316?}\320\263Y\365\271\322?\367\344a\241\3264\317?0L\246\nF%\305?\213l\347\373\251\361\326?2w-!\037\364\324?\221\017z6\253>\337?vO\036\026jM\323?\366\227\335\223\207\205\322?W[\261\277\354\236\324?!\037\364lV}\322?-C\034\353\3426\312?\212\037c\356ZB\316?i\221\355|?5\326?X\3122\304\261.\322?\372~j\274t\223\320?\364\375\324x\351&\325?\244\337\276\016\2343\326?G\003x\013$(\322?\022\203\300\312\241E\326?\350\331\254\372\\m\321?\275\343\024\035\311\345\323?%u\002\232\010\033\322?\'\240\211\260\341\351\305?\3436\032\300[ \321?}\256\266b\177\331\325?\362A\317f\325\347\312?\254\034Zd;\337\323?\312\303B\255i\336\321?aTR\'\240\211\320?\364lV}\256\266\326?q=\n\327\243p\315?\371\240g\263\352s\321?\231\273\226\220\017z\342?\306m4\200\267@\322?b\241\3264\3578\321?\024\256G\341z\024\316?jM\363\216St\324?\373\313\356\311\303B\325?\3711\346\256%\344\323?#J{\203/L\322?\340\276\016\2343\242\330?\316\252\317\325V\354\323?I\235\200&\302\206\317?\261\277\354\236<,\320?\273\270\215\006\360\026\320?gDio\360\205\321?\365\333\327\201sF\324?\241\3264\3578E\317?\377\262{\362\260P\327?d\314]K\310\007\315?\2343\242\2647\370\326?\345a\241\3264\357\320?\215\227n\022\203\300\312?\226C\213l\347\373\321?\332\316\367S\343\245\313?\332\254\372\\m\305\316?\235\021\245\275\301\027\322?L\246\nF%u\322?\2760\231*\030\225\324?c\177\331=yX\310?\362\322Mb\020X\321?\202\342\307\230\273\226\320?_)\313\020\307\272\320?\226\262\014q\254\213\323?\307K7\211A`\315?\373:p\316\210\322\306?\3274\3578EG\322?\265\246y\307):\332?\036\247\350H.\377\325?\347\035\247\350H.\307?R\270\036\205\353Q\324?\332\254\372\\m\305\322?\024?\306\334\265\204\324?.\377!\375\366u\320?{\024\256G\341z\324?i\000o\201\004\305\317?\234\242#\271\374\207\340?\3711\346\256%\344\313?\0358gDio\310?\372~j\274t\223\324?333333\323?\230\335\223\207\205Z\323?\203\300\312\241E\266\323?4\0216<\275R\316?\0358gDio\324?\263{\362\260Pk\336?\301\250\244N@\023\321?\0054\0216<\275\322?\362\260Pk\232w\324?\257\224e\210c]\334?\356\353\3009#J\323?B`\345\320\"\333\325?\305\2171w-!\323?\366(\\\217\302\365\324?\263{\362\260Pk\332?\030\004V\016-\262\315?u\002\232\010\033\236\322?\323Mb\020X9\320?\016\2760\231*\030\305?\024?\306\334\265\204\304?yX\2505\315;\336?\010\254\034Zd;\327?v\340\234\021\245\275\325?\t\212\037c\356Z\322?\331\316\367S\343\245\323?>\350\331\254\372\\\321?\021X9\264\310v\316?\004V\016-\262\235\323?Zd;\337O\215\323?<\275R\226!\216\331?\231*\030\225\324\t\320?\270@\202\342\307\230\323?#\333\371~j\274\320?\362A\317f\325\347\322?\331_vO\036\026\322? \322o_\007\316\325?\275\343\024\035\311\345\323?yX\2505\315;\322?\376e\367\344a\241\322?o\201\004\305\2171\317?\367u\340\234\021\245\321?\003x\013$(~\314?$\271\374\207\364\333\323?h\"lxz\245\314?\375\324x\351&1\310?\212\037c\356ZB\322?\376\324x\351&1\320?Tt$\227\377\220\322?@\023a\303\323+\325?\354/\273\'\017\013\321?\343\245\233\304 \260\322?\210\364\333\327\201s\322?\241g\263\352s\265\321?\210\205Z\323\274\343\320?\2505\315;N\321\325?\261\341\351\225\262\014\321?\304\261.n\243\001\324?\357\247\306K7\211\321?\325\347j+\366\227\321?\367\006_\230L\025\324?\252`TR\'\240\325?Qk\232w\234\242\323?\267\321\000\336\002\t\322?\356ZB>\350\331\324?~\214\271k\t\371\324?\231\273\226\220\017z\326?\355\r\2760\231*\324?mV}\256\266b\317?\214\271k\t\371\240\323?@\023a\303\323+\321?\2760\231*\030\225\324?\t\212\037c\356Z\322?7\211A`\345\320\322?;\001M\204\rO\317?\033\236^)\313\020\327?y\351&1\010\254\320?\237\253\255\330_v\317?\222\313\177H\277}\321?6<\275R\226!\322?X\3122\304\261.\322?\021\307\272\270\215\006\320?\321\"\333\371~j\314?\273\'\017\013\265\246\321?Y\2068\326\305m\320?\027\331\316\367S\343\315?\266\363\375\324x\351\322?\356ZB>\350\331\324?\233U\237\253\255\330\323?`\345\320\"\333\371\326?\355|?5^\272\321?\0216<\275R\226\311?\325x\351&1\010\320?Zd;\337O\215\317?<\275R\226!\216\315?\266\363\375\324x\351\322?\324\232\346\035\247\350\324?\206Z\323\274\343\024\315?\024\320D\330\360\364\322?n\022\203\300\312\241\325?\233U\237\253\255\330\323?4\0216<\275R\316?\214J\352\0044\021\322?\3122\304\261.n\313?\341\013\223\251\202Q\311?;p\316\210\322\336\320?\214\333h\000o\201\314?\255\372\\m\305\376\322?\311v\276\237\032/\321?\206Z\323\274\343\024\325?\026jM\363\216S\314?lxz\245,C\314?4\242\2647\370\302\324?\272\332\212\375e\367\320?M\363\216St$\323?\334h\000o\201\004\315?\2343\242\2647\370\312?p_\007\316\031Q\326?\376\324x\351&1\320?\rq\254\213\333h\320?\030\004V\016-\262\325?\007\316\031Q\332\033\324?aTR\'\240\211\310?\266\204|\320\263Y\315?\036\247\350H.\377\321?\252\361\322Mb\020\324?\332\033|a2U\310?\305\376\262{\362\260\320?Zd;\337O\215\323?!\037\364lV}\316?\323\274\343\024\035\311\341?d\314]K\310\007\321?\025\214J\352\0044\321?\341z\024\256G\341\312?\265\025\373\313\356\311\313?$\271\374\207\364\333\323?\337\340\013\223\251\202\321?\303d\252`TR\323?\371\017\351\267\257\003\327?\375\366u\340\234\021\325?j\274t\223\030\004\322?c\177\331=yX\320?Dio\360\205\311\320?\305\2171w-!\317?\226\262\014q\254\213\327?\366\227\335\223\207\205\322?F\224\366\006_\230\320?\322\000\336\002\t\212\323?h\263\352s\265\025\323?\3436\032\300[ \325?\027\331\316\367S\343\331?\031\004V\016-\262\321?\326V\354/\273\'\317?<\337O\215\227n\322?\275\343\024\035\311\345\323?\002\274\005\022\024?\322?<N\321\221\\\376\323?\nh\"lxz\321?^\272I\014\002+\333?\004V\016-\262\235\327?\007\360\026HP\374\320??\306\334\265\204|\320?\022\245\275\301\027&\313?\316\252\317\325V\354\323?yX\2505\315;\316?\326V\354/\273\'\317?~\0358gDi\317?\2760\231*\030\225\314?\377!\375\366u\340\320?\000o\201\004\305\217\321?\206\311T\301\250\244\316?\264Y\365\271\332\212\321?\212\260\341\351\225\262\320?\345a\241\3264\357\324?F\224\366\006_\230\324?\252\361\322Mb\020\320?\264Y\365\271\332\212\321?\035\311\345?\244\337\336?\023\362A\317f\325\317?F\266\363\375\324x\321?\331=yX\2505\321?\277}\0358gD\325?vq\033\r\340-\324?W[\261\277\354\236\320?\256\266b\177\331=\321?\314\356\311\303B\255\325?\240\211\260\341\351\225\332?\023a\303\323+e\325?\003x\013$(~\324?]\334F\003x\013\314?{\203/L\246\n\322?\337\340\013\223\251\202\321?\277\016\2343\242\264\317?\247\350H.\377!\321?0*\251\023\320D\320?@\244\337\276\016\234\313??\306\334\265\204|\320?\353s\265\025\373\313\322?\262\235\357\247\306K\317?\204\rO\257\224e\324?\307):\222\313\177\330?\3019#J{\203\323?\241\3701\346\256%\320?9EGr\371\017\321?5\3578EGr\311?\372~j\274t\223\320?\323\274\343\024\035\311\321?\370S\343\245\233\304\324?\261rh\221\355|\317?\330\360\364JY\206\324?\322o_\007\316\031\325?`vO\036\026j\315?U0*\251\023\320\314?\017\013\265\246y\307\321?\233U\237\253\255\330\317?/\335$\006\201\225\323?\351&1\010\254\034\326?\202sF\224\366\006\323?\253\317\325V\354/\323?\357\311\303B\255i\316? c\356ZB>\324?\305\376\262{\362\260\324?\256G\341z\024\256\323?\032Q\332\033|a\322?\200H\277}\0358\323?\303\365(\\\217\302\321?\316\210\322\336\340\013\323?\006\201\225C\213l\323?\235\021\245\275\301\027\322?\365JY\2068\326\321?\000o\201\004\305\217\321?jM\363\216St\324?\214J\352\0044\021\316?\207\026\331\316\367S\323?`\345\320\"\333\371\322?\252\202QI\235\200\316?\203\300\312\241E\266\313?\201&\302\206\247W\322?\353\3426\032\300[\320?\272k\t\371\240g\323?\221\017z6\253>\323?)\\\217\302\365(\320?c\177\331=yX\324?\025\214J\352\0044\325?q=\n\327\243p\321?\367\006_\230L\025\320?\020z6\253>W\313?\250\306K7\211A\320?\000\000\000\000\000\000\320?z\307):\222\313\307?\203/L\246\nF\321?\034|a2U0\322?\340\276\016\2343\242\320?\276\301\027&S\005\323?\n\327\243p=\n\327?\214\271k\t\371\240\317?"
      }
    }
  }
}
node {
  name: "tensors/component_27"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\303\365(\\\217\302$@\205\353Q\270\036\3051@\000\000\000\000\000@5@\341z\024\256Ga4@\256G\341z\024\256,@ffffff/@{\024\256G\341\3723@\024\256G\341z\3244@R\270\036\205\353\3215@\n\327\243p=\n8@=\n\327\243p=7@\244p=\n\327\3431@\315\314\314\314\314\3148@33333\3637@\\\217\302\365(\2346@\n\327\243p=\212;@\341z\024\256G!4@\256G\341z\024\2564@fffff&6@\270\036\205\353Q\270,@\354Q\270\036\205k/@\341z\024\256G\341(@\205\353Q\270\036\205,@\n\327\243p=\n7@\341z\024\256Ga5@ffffff0@H\341z\024\256\2075@\000\000\000\000\000@4@\205\353Q\270\036E9@\232\231\231\231\231\031.@\\\217\302\365(\0349@33333\2632@{\024\256G\341\3727@\270\036\205\353Qx:@\341z\024\256G\3411@\327\243p=\n\2275@\270\036\205\353Q\2705@\354Q\270\036\205k2@3333339@R\270\036\205\353\3214@\024\256G\341z\2245@\232\231\231\231\231Y5@\217\302\365(\\\3178@H\341z\024\256G4@\217\302\365(\\\3175@\232\231\231\231\231\2311@\327\243p=\n\3270@)\\\217\302\365\2502@\303\365(\\\217B-@\315\314\314\314\314L6@\232\231\231\231\231\2315@\327\243p=\nW0@=\n\327\243p=2@33333\2632@\205\353Q\270\036\0056@\000\000\000\000\000\3002@R\270\036\205\353\2212@\327\243p=\n\2275@\217\302\365(\\O3@\024\256G\341z\224\'@\303\365(\\\217\302-@{\024\256G\341\3724@fffff&6@\270\036\205\353Q\270+@\327\243p=\n\3277@q=\n\327\243\3607@\303\365(\\\217\0025@\n\327\243p=\n3@\024\256G\341zT1@=\n\327\243p}0@\217\302\365(\\O5@H\341z\024\256G-@\205\353Q\270\036\2058@\024\256G\341z\224/@\205\353Q\270\036\2050@fffff\2463@\341z\024\256G\341%@fffff&0@\270\036\205\353Q\3707@\000\000\000\000\000\0002@\270\036\205\353Q\3704@\270\036\205\353Q\270/@)\\\217\302\365\3508@\n\327\243p=J:@\315\314\314\314\314L/@\205\353Q\270\036\2052@\366(\\\217\302u5@\327\243p=\n\2278@\315\314\314\314\314\3145@{\024\256G\341z.@\205\353Q\270\036\0058@\303\365(\\\217\3026@\205\353Q\270\036\205-@\315\314\314\314\314L2@\024\256G\341z\3243@H\341z\024\256\0077@\327\243p=\n\3271@q=\n\327\243\3603@\256G\341z\024\256)@\205\353Q\270\036\3053@{\024\256G\341\3728@\\\217\302\365(\334*@\205\353Q\270\036\2054@ffffff3@\n\327\243p=J3@\037\205\353Q\270\036/@\024\256G\341zT2@\n\327\243p=\2122@\354Q\270\036\205\2533@\303\365(\\\217B5@=\n\327\243p\3750@\303\365(\\\217\3024@fffff\2463@q=\n\327\24304@)\\\217\302\365\250/@H\341z\024\256\2075@\205\353Q\270\036\205/@\354Q\270\036\205\2530@)\\\217\302\365\3506@\303\365(\\\217\0024@\244p=\n\327\243%@\037\205\353Q\270\0361@3333334@H\341z\024\256\307%@\244p=\n\327c0@\366(\\\217\30251@q=\n\327\243\2608@)\\\217\302\365\3502@\244p=\n\327c0@\037\205\353Q\270\0369@\024\256G\341z\224*@{\024\256G\341z3@\n\327\243p=\2125@\\\217\302\365(\334+@)\\\217\302\365\3505@\270\036\205\353Qx6@\354Q\270\036\205\2530@H\341z\024\256\307.@R\270\036\205\353\2211@H\341z\024\256\307*@q=\n\327\243\360\'@\315\314\314\314\314\0142@\217\302\365(\\O1@\327\243p=\n\327/@q=\n\327\243\360-@\315\314\314\314\314L-@\024\256G\341z\2240@\205\353Q\270\036\3052@\\\217\302\365(\\.@)\\\217\302\365\3501@H\341z\024\256\3074@33333\2634@\256G\341z\024\256.@)\\\217\302\365(*@\256G\341z\024\256.@q=\n\327\243\3601@=\n\327\243p\2754@\366(\\\217\302u3@{\024\256G\341z)@\354Q\270\036\205\353)@\256G\341z\024.4@\341z\024\256G\341/@fffff&2@\270\036\205\353Q86@\n\327\243p=\n6@\303\365(\\\217\3023@\354Q\270\036\205k#@\315\314\314\314\314\3142@\256G\341z\024\2568@33333\3630@H\341z\024\256\307(@\341z\024\256G\2413@H\341z\024\256\307\'@\354Q\270\036\205k-@\315\314\314\314\314L.@fffff\346,@\217\302\365(\\\0172@\\\217\302\365(\0344@\270\036\205\353Q86@\037\205\353Q\270\036*@\037\205\353Q\270\3365@R\270\036\205\353\221:@\217\302\365(\\O4@\327\243p=\n\327-@)\\\217\302\365h6@\270\036\205\353Q8.@\024\256G\341z\2242@q=\n\327\24301@\244p=\n\327c1@\315\314\314\314\314\314/@\037\205\353Q\270\0367@)\\\217\302\365h5@\270\036\205\353Q82@\\\217\302\365(\334:@\366(\\\217\30257@\024\256G\341zT0@\n\327\243p=J6@\327\243p=\n\3275@=\n\327\243p}6@\270\036\205\353Q84@\217\302\365(\\\2173@R\270\036\205\353Q3@\354Q\270\036\205\253:@\000\000\000\000\000\3007@\232\231\231\231\231\2312@\256G\341z\024\2560@\205\353Q\270\036E1@\303\365(\\\217B4@\n\327\243p=\2126@R\270\036\205\353\321)@\244p=\n\327#6@q=\n\327\243\3602@\270\036\205\353Qx2@\217\302\365(\\\2179@\217\302\365(\\\3177@\256G\341z\024\3560@\232\231\231\231\231Y2@{\024\256G\341z1@\217\302\365(\\\2175@\\\217\302\365(<@@R\270\036\205\353Q*@\315\314\314\314\314\314+@H\341z\024\256\2071@\000\000\000\000\000@4@\205\353Q\270\036\0051@q=\n\327\243\360*@\354Q\270\036\205\353.@\205\353Q\270\036\005/@\270\036\205\353Q\3707@\024\256G\341zT6@\024\256G\341z\0243@\024\256G\341z\024;@H\341z\024\256\347@@\217\302\365(\\\317;@R\270\036\205\353\321/@\000\000\000\000\000@5@\270\036\205\353Q\370:@\366(\\\217\302u5@\232\231\231\231\231\331;@\244p=\n\327\243C@333333/@\024\256G\341z\024.@q=\n\327\24302@\205\353Q\270\036\3057@\000\000\000\000\000\2007@\\\217\302\365(\3343@\256G\341z\024n1@\270\036\205\353Q8,@\270\036\205\353Q89@\\\217\302\365(\334-@\217\302\365(\\\2177@33333s2@R\270\036\205\353\3213@\024\256G\341z\0241@\024\256G\341zT3@\315\314\314\314\314\0141@\205\353Q\270\036\305<@\205\353Q\270\036E1@3333337@H\341z\024\256\307@@\217\302\365(\\\017;@\217\302\365(\\\0177@\341z\024\256G!6@\341z\024\256Ga3@R\270\036\205\353\0216@\037\205\353Q\270\036?@33333\3632@\327\243p=\n\3275@\366(\\\217\30250@\244p=\n\327c4@R\270\036\205\353\3210@\024\256G\341z\024*@=\n\327\243p\3754@\327\243p=\nW/@{\024\256G\341z8@\\\217\302\365(\\1@R\270\036\205\353Q,@{\024\256G\341\3723@\327\243p=\n\3271@\\\217\302\365(\\.@\232\231\231\231\231\231:@\n\327\243p=\n,@\256G\341z\024.2@\205\353Q\270\036\3052@ffffff/@ffffff2@\303\365(\\\217\3024@=\n\327\243p=*@\366(\\\217\302\3653@\244p=\n\327\3432@{\024\256G\341\2723@\232\231\231\231\231\0313@\205\353Q\270\036\0050@\366(\\\217\302u1@\217\302\365(\\\217+@\n\327\243p=\212*@33333\263(@\244p=\n\327#2@\354Q\270\036\205+2@\327\243p=\n\0277@fffff\3462@\244p=\n\327\3433@\\\217\302\365(\3347@\\\217\302\365(\2342@)\\\217\302\365(2@=\n\327\243p}8@\244p=\n\327\243/@\315\314\314\314\314\314,@\354Q\270\036\205k)@\256G\341z\024\256+@\\\217\302\365(\0343@\341z\024\256Ga/@=\n\327\243p\275*@q=\n\327\243p%@\232\231\231\231\231\2312@\232\231\231\231\231\3310@)\\\217\302\365(,@\037\205\353Q\270\3362@fffff\3462@\000\000\000\000\000\0001@\256G\341z\024.0@)\\\217\302\365\2503@\244p=\n\327\243*@\303\365(\\\217\2025@\354Q\270\036\205k.@\315\314\314\314\314L1@\303\365(\\\217\302)@\256G\341z\024\3561@\366(\\\217\302\2654@\341z\024\256G\3415@\205\353Q\270\036\005/@\232\231\231\231\231Y3@\\\217\302\365(\3343@\217\302\365(\\\217-@\205\353Q\270\036\0053@\000\000\000\000\000\0005@\366(\\\217\302u,@\256G\341z\024n5@H\341z\024\256\2071@\205\353Q\270\036E8@\n\327\243p=\2120@\327\243p=\n\3270@\354Q\270\036\205\353-@\256G\341z\024\2565@fffff\346.@\354Q\270\036\205k-@fffff\3462@{\024\256G\341z-@H\341z\024\256\0070@\354Q\270\036\205\353-@R\270\036\205\353\0211@\270\036\205\353Q83@\366(\\\217\302u1@=\n\327\243p\2759@\244p=\n\327#,@R\270\036\205\353\0213@\327\243p=\n\2272@\366(\\\217\30250@{\024\256G\341\372.@R\270\036\205\353Q2@R\270\036\205\353\0212@R\270\036\205\353\2215@\327\243p=\n\3272@\n\327\243p=J2@33333\3630@H\341z\024\256\3075@\024\256G\341z\324:@\205\353Q\270\036\0052@\000\000\000\000\000@1@fffff\3465@\n\327\243p=J7@\354Q\270\036\205k*@333333.@\232\231\231\231\231Y1@R\270\036\205\353\0210@R\270\036\205\353\0210@\270\036\205\353Q84@\366(\\\217\3025<@\315\314\314\314\314L.@\024\256G\341z\3242@\354Q\270\036\205\353)@\\\217\302\365(\334-@\270\036\205\353Q\2706@{\024\256G\341z1@q=\n\327\243p+@\n\327\243p=J7@\256G\341z\024.,@)\\\217\302\365(0@\000\000\000\000\000\000/@\366(\\\217\30257@q=\n\327\243p(@\327\243p=\n\3270@\270\036\205\353Q\3703@H\341z\024\256G6@\270\036\205\353Q\2701@\256G\341z\024.1@\244p=\n\327\3432@\366(\\\217\302u1@)\\\217\302\365\250-@\303\365(\\\217B1@\205\353Q\270\036\0055@R\270\036\205\353\321%@\n\327\243p=J2@\354Q\270\036\205+0@fffff\346-@\327\243p=\n\2272@\270\036\205\353Q\270-@\037\205\353Q\270^5@)\\\217\302\365\2504@\354Q\270\036\205\3531@R\270\036\205\353\2211@\024\256G\341z\3240@\256G\341z\024\2565@\\\217\302\365(\0346@\217\302\365(\\\317=@\354Q\270\036\205+5@33333\2635@\024\256G\341z\0245@\327\243p=\nW(@)\\\217\302\365h5@\n\327\243p=\n3@\366(\\\217\302\365+@\205\353Q\270\036\0050@\341z\024\256G!3@\037\205\353Q\270\0363@H\341z\024\256G5@\366(\\\217\302\365-@{\024\256G\341\3725@\037\205\353Q\270\2360@\354Q\270\036\205\2531@H\341z\024\256\2076@\256G\341z\024\2561@\n\327\243p=\2123@\270\036\205\353Q\3705@q=\n\327\243\3600@\037\205\353Q\270\2363@\n\327\243p=\2123@\366(\\\217\302\365/@\232\231\231\231\231\2313@R\270\036\205\353Q/@3333331@\354Q\270\036\205k9@\024\256G\341z\224/@R\270\036\205\353Q2@\232\231\231\231\231\3310@\244p=\n\327\3438@H\341z\024\256\007<@)\\\217\302\365\2501@\327\243p=\nW3@"
      }
    }
  }
}
node {
  name: "tensors/component_28"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\2343\242\2647\370\354?\316\031Q\332\033|\347?\347\035\247\350H.\351?\345\320\"\333\371~\362?q\254\213\333h\000\351??\306\334\265\204|\354?\347\214(\355\r\276\350?\324x\351&1\010\366?\325x\351&1\010\360?/\335$\006\201\225\371?\313\241E\266\363\375\362?\243\222:\001M\204\357?%\006\201\225C\213\014@sh\221\355|?\361?Nb\020X9\264\362?\272I\014\002+\207\360?\327\243p=\n\327\363?^\272I\014\002+\361?\023\203\300\312\241E\360?\352\0044\0216<\351?\260\003\347\214(\355\347?\031s\327\022\362A\357?0\273\'\017\013\265\346?\325x\351&1\010\362?\320\263Y\365\271\332\354?\010\254\034Zd;\357?\237\253\255\330_v\357?/\335$\006\201\225\375?\376\324x\351&1\360?R\270\036\205\353Q\352?\333\371~j\274t\367?{\024\256G\341z\360?\222\355|?5^\366?\365\271\332\212\375e\343?\032\300[ A\361\345?\3122\304\261.n\355?\350\373\251\361\322M\360?#\333\371~j\274\002@\033/\335$\006\201\001@?W[\261\277\354\342?\246\233\304 \260r\352?\r\002+\207\026\331\366?\016-\262\235\357\247\372?\204\rO\257\224e\352?\325\347j+\366\227\343?D\372\355\353\3009\345?\223\251\202QI\235\356?)\355\r\2760\231\354?\020z6\253>W\347?\332\316\367S\343\245\365?\\\217\302\365(\\\363?x\013$(~\214\355?\306m4\200\267@\344?\261rh\221\355|\371?\001M\204\rO\257\352?\305\376\262{\362\260\356?J\014\002+\207\026\363?ffffff\362?\006\201\225C\213l\363?\007_\230L\025\214\342?t\223\030\004V\016\367?\357\247\306K7\211\000@}?5^\272I\364?\037\205\353Q\270\036\002@\014\002+\207\026\331\362?\345\320\"\333\371~\364?J\014\002+\207\026\000@\261\277\354\236<,\356?\264\310v\276\237\032\363?\032\300[ A\361\353?\205\353Q\270\036\205\351?\241\3264\3578E\353?\016-\262\235\357\247\360?B`\345\320\"\333\343?ffffff\360?\250\306K7\211A\360?\323Mb\020X9\360?\004V\016-\262\235\341?)\\\217\302\365(\376?\205\353Q\270\036\205\361?1\010\254\034Zd\001@\250\306K7\211A\360?/\335$\006\201\225\367?H\341z\024\256G\007@\024\256G\341z\024\364?\232\231\231\231\231\231\367?\303\365(\\\217\302\001@\352\0044\0216<\345?\324x\351&1\010\370?\363\216St$\227\347?-\262\235\357\247\306\361?]\376C\372\355\353\352?\246\233\304 \260r\362?,\207\026\331\316\367\365?\225e\210c]\334\356?\277\237\032/\335$\370?\223\030\004V\016-\370?\362\322Mb\020X\000@U\301\250\244N@\341?\004V\016-\262\235\375?\244p=\n\327\243\364?T\343\245\233\304 \370?\211A`\345\320\"\371?Zd;\337O\215\363?%\006\201\225C\213\370?\000o\201\004\305\217\355?O\215\227n\022\203\372?W[\261\277\354\236\354?\270\036\205\353Q\270\370?<\275R\226!\216\357?c\020X9\264\310\366?\r\002+\207\026\331\374?\327\243p=\n\327\367?\303\365(\\\217\302\375?\026\373\313\356\311\303\342?I\235\200&\302\206\355?\245\275\301\027&S\357?\257\224e\210c]\356?\364\375\324x\351&\361?\006\201\225C\213l\363?\316\031Q\332\033|\335?\262\235\357\247\306K\371?\366(\\\217\302\365\010@\006\201\225C\213l\353?=\n\327\243p=\362?\023a\303\323+e\353?\024\256G\341z\024\360?E\266\363\375\324x\365?J\014\002+\207\026\361?\311v\276\237\032/\363?\2201w-!\037\352?\022\245\275\301\027&\351?=\n\327\243p=\364?\177j\274t\223\030\352?\010\254\034Zd;\363?\024\256G\341z\024\366?\252\361\322Mb\020\004@>yX\2505\315\357?\010\254\034Zd;\367?\261rh\221\355|\365?X9\264\310v\276\337?\034Zd;\337O\365?\273I\014\002+\207\376?=\233U\237\253\255\350?m\347\373\251\361\322\363?]\376C\372\355\353\344?7\211A`\345\320\366?%\006\201\225C\213\376?a2U0*\251\347?[\261\277\354\236<\350?\363\375\324x\351&\365?1\010\254\034Zd\377?\034Zd;\337O\005@5^\272I\014\002\351? A\361c\314]\351?\254\213\333h\000o\357?ffffff\366?{\024\256G\341z\000@\035Zd;\337O\347?\257\224e\210c]\350?J\014\002+\207\026\373?\365\333\327\201sF\344?\370S\343\245\233\304\360?\345\320\"\333\371~\372?\023a\303\323+e\353?\n\327\243p=\n\361?\246\nF%u\002\332?\250\306K7\211A\366?\217\302\365(\\\217\366?F\266\363\375\324x\363?\224\366\006_\230L\345?\'1\010\254\034Z\362?\033\236^)\313\020\345?\341z\024\256G\341\374?\315\314\314\314\314\314\376?o\201\004\305\2171\351?J\014\002+\207\026\002@%\006\201\225C\213\364?\023\203\300\312\241E\362?\314\356\311\303B\255\357?\030\004V\016-\262\367?\357\311\303B\255i\350?ffffff\362?\355|?5^\272\361?Gr\371\017\351\267\337?}?5^\272I\364?\304B\255i\336q\336?\345\320\"\333\371~\350?7\211A`\345\320\376?#\333\371~j\274\352?\341z\024\256G\341\000@,\207\026\331\316\367\373?\n\327\243p=\212\023@\214l\347\373\251\361\374?\'\302\206\247W\312\356?\301\250\244N@\023\355?L7\211A`\345\000@\341z\024\256G\341\364?^\272I\014\002+\361?\300\354\236<,\324\344?\235\357\247\306K7\365?\252\202QI\235\200\352?\366(\\\217\302\365\370?\341z\024\256G\341\376?Nb\020X9\264\360?\"lxz\245,\327?E\266\363\375\324x\365?\345\362\037\322o_\353?\3019#J{\203\355?\200H\277}\0358\327?\256G\341z\024\256\367?r\371\017\351\267\257\353?\004V\016-\262\235\367?x\351&1\010\254\372?\205\353Q\270\036\205\375?\264\310v\276\237\032\363?6^\272I\014\002\371?\215\227n\022\203\300\376?`\345\320\"\333\371\362?\211A`\345\320\"\365?\034\353\3426\032\300\333?p\316\210\322\336\340\337?F\266\363\375\324x\363?d]\334F\003x\355?\252\202QI\235\200\354?x\234\242#\271\374\351?\245,C\034\353\342\354?\361c\314]K\310\337?t\223\030\004V\016\361?\264\310v\276\237\032\361?\356|?5^\272\345?Tt$\227\377\220\354?&1\010\254\034Z\372?\240\032/\335$\006\363?q\033\r\340-\220\352?@5^\272I\014\370?\242E\266\363\375\324\356?\016-\262\235\357\247\360?d;\337O\215\227\002@\023a\303\323+e\353?\270\257\003\347\214(\345?/\335$\006\201\225\345?\022\203\300\312\241E\372?\266\363\375\324x\351\360?\241E\266\363\375\324\374?L7\211A`\345\004@\004V\016-\262\235\371?\261\277\354\236<,\334?\027\331\316\367S\343\367?\317\367S\343\245\233\360?N\321\221\\\376C\352?~\214\271k\t\371\352?\366(\\\217\302\365\350?B\317f\325\347j\353?A\361c\314]K\344?\'\240\211\260\341\351\351?\311v\276\237\032/\363?\214l\347\373\251\361\360?o\022\203\300\312\241\003@\246\233\304 \260r\364?\272I\014\002+\207\360?\337O\215\227n\022\365?T\343\245\233\304 \372?g\325\347j+\366\357?\252`TR\'\240\347?\254\034Zd;\337\371?\364\375\324x\351&\363?\016-\262\235\357\247\376?\033/\335$\006\201\363?m\347\373\251\361\322\367?F%u\002\232\010\347?\307\272\270\215\006\360\340?n\022\203\300\312\241\365?%\006\201\225C\213\366?!\260rh\221\355\366?\362\322Mb\020X\002@{\024\256G\341z\364?\345\320\"\333\371~\352?\016-\262\235\357\247\362?\006\201\225C\213l\355?j\274t\223\030\004\360?}?5^\272I\364?\271\374\207\364\333\327\357?\230\335\223\207\205Z\355?\323Mb\020X9\366?\232\231\231\231\231\231\365?=\n\327\243p=\366?j\274t\223\030\004\336?{\024\256G\341z\376?/\335$\006\201\225\377?R\270\036\205\353Q\374?\274t\223\030\004V\356?\0358gDio\350?\002+\207\026\331\316\363?vq\033\r\340-\346?\265\246y\307):\346?<\337O\215\227n\360?\327\243p=\n\327\000@\234\304 \260rh\345?}?5^\272I\362?\372~j\274t\223\362?\244p=\n\327\243\360?\027\331\316\367S\343\373?6^\272I\014\002\371?\214l\347\373\251\361\360?\372~j\274t\223\374?\'1\010\254\034Z\342?\341z\024\256G\341\364?I.\377!\375\366\345?P\215\227n\022\203\352?\341z\024\256G\341\366?^\272I\014\002+\355?\322o_\007\316\031\345?\223:\001M\204\r\327?\235\357\247\306K7\006@\303\323+e\031\342\346?\253\317\325V\354/\343?@\244\337\276\016\234\341?\372~j\274t\223\376?\232\231\231\231\231\231\001@\357\247\306K7\211\367?g\325\347j+\366\345?y\351&1\010\254\360?\221\355|?5^\360?\023\362A\317f\325\351?\321\"\333\371~j\356?\262\235\357\247\306K\361?xz\245,C\034\355?\203\300\312\241E\266\363?\034Zd;\337O\367?\316\252\317\325V\354\347?r\212\216\344\362\037\342?\333\371~j\274t\377?\216uq\033\r\340\357?O\215\227n\022\203\370?\325x\351&1\010\001@\024?\306\334\265\204\344?{\024\256G\341z\370?\037\205\353Q\270\036\000@/\335$\006\201\225\355?\360\205\311T\301\250\350?\261\277\354\236<,\356?R\270\036\205\353Q\352?\023\203\300\312\241E\002@D\213l\347\373\251\347?\337O\215\227n\022\004@<\337O\215\227n\362?\nh\"lxz\331?\221\355|?5^\350?\315\314\314\314\314\314\360?\243\222:\001M\204\345?\311v\276\237\032/\365?&S\005\243\222:\353?\177j\274t\223\030\370?\333\212\375e\367\344\351?\332\316\367S\343\245\367?)\\\217\302\365(\370?\003+\207\026\331\316\365?333333\363?\301\312\241E\266\363\363??\306\334\265\204|\356?:\264\310v\276\237\370?\217\302\365(\\\217\364?\240\032/\335$\006\367?\270@\202\342\307\230\343?-!\037\364lV\355?\022\203\300\312\241E\376?\230L\025\214J\352\350?7\211A`\345\320\360?\204\rO\257\224e\346?\'1\010\254\034Z\360?ffffff\332?\214l\347\373\251\361\364?\n\327\243p=\n\345?K\352\0044\0216\340?\262\235\357\247\306K\337?\030\004V\016-\262\363?ffffff\362?K\310\007=\233U\341?<\337O\215\227n\360?\226\262\014q\254\213\357?\345\320\"\333\371~\360?\214l\347\373\251\361\366?V\016-\262\235\357\353?\007\360\026HP\374\340?\324x\351&1\010\372?\202\342\307\230\273\226\352?\275\343\024\035\311\345\343?\337O\215\227n\022\361?\344\245\233\304 \260\006@I\235\200&\302\206\341?o\022\203\300\312\241\000@\262\235\357\247\306K\365?d]\334F\003x\355?;\337O\215\227n\372?\366(\\\217\302\365\372?\034Zd;\337O\365?=\n\327\243p=\364?M\025\214J\352\004\346?=\n\327\243p=\362?\'\302\206\247W\312\350?\270\036\205\353Q\270\360?c\020X9\264\310\364?\366(\\\217\302\365\354?\261\341\351\225\262\014\355?\027\331\316\367S\343\373?\300[ A\361c\344?\370S\343\245\233\304\374?\374\030s\327\022\362\353?\345\320\"\333\371~\374?\341z\024\256G\341\370?\375\324x\351&1\366?\266\363\375\324x\351\362?\306K7\211A`\365?\324x\351&1\010\372?sh\221\355|?\363?\240\032/\335$\006\007@\234\304 \260rh\363?\323\336\340\013\223\251\344?\r\002+\207\026\331\372?\n\327\243p=\n\367?\223\030\004V\016-\370?\316\031Q\332\033|\347?\244p=\n\327\243\354?\300\312\241E\266\363\373?\333\371~j\274t\365?\325x\351&1\010\362?V\016-\262\235\357\371?m\305\376\262{\362\356?\365\333\327\201sF\354?\036\247\350H.\377\353?\\\217\302\365(\\\367?j\274t\223\030\004\360?L7\211A`\345\376?mV}\256\266b\345?\214\333h\000o\201\356?u\002\232\010\033\236\350?#\333\371~j\274\360?\r\002+\207\026\331\372?\024\320D\330\360\364\344?j\274t\223\030\004\366?w\276\237\032/\335\372?\003\t\212\037c\356\336?\274t\223\030\004V\004@.\220\240\3701\346\342?\335$\006\201\225C\363?\010\254\034Zd;\361?c\356ZB>\350\343?D\213l\347\373\251\365?"
      }
    }
  }
}
node {
  name: "tensors/component_29"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content: "\024\256G\341zT1@)\\\217\302\365h7@H\341z\024\256\2079@\000\000\000\000\000\200:@\354Q\270\036\205\2530@\000\000\000\000\000\3007@)\\\217\302\365\250;@\244p=\n\327#<@{\024\256G\341\272>@\327\243p=\nWD@q=\n\327\243\360@@H\341z\024\256G;@q=\n\327\243\360=@)\\\217\302\365\250;@\341z\024\256G\001@@q=\n\327\243\220B@\341z\024\256G\341>@{\024\256G\341z?@\341z\024\256G\341>@\303\365(\\\217B3@=\n\327\243p}4@R\270\036\205\353Q/@\024\256G\341z\0243@\354Q\270\036\205\313A@\217\302\365(\\\217?@ffffff5@{\024\256G\341\232@@\303\365(\\\217B;@{\024\256G\341ZB@\205\353Q\270\036\2053@\341z\024\256G\001A@\037\205\353Q\270\036<@\354Q\270\036\205\013@@fffff\346>@\303\365(\\\217B;@\205\353Q\270\036\005=@\\\217\302\365(\\>@\217\302\365(\\\3176@3333339@\205\353Q\270\036\005:@\000\000\000\000\000@>@\354Q\270\036\205\253A@\366(\\\217\302\225@@\000\000\000\000\000\000<@\244p=\n\327\343=@R\270\036\205\353Q5@\366(\\\217\302\3655@33333\363;@33333\2634@R\270\036\205\353\321?@\270\036\205\353Q\2709@q=\n\327\24307@\024\256G\341zT5@\341z\024\256G!8@q=\n\327\243\260?@\270\036\205\353Qx6@\244p=\n\327#<@33333\263>@\000\000\000\000\000@6@\315\314\314\314\314\314.@33333s1@\n\327\243p=\n;@\303\365(\\\217\202=@{\024\256G\341:3@\\\217\302\365(\274@@R\270\036\205\353\261@@\217\302\365(\\\217?@\327\243p=\n\3277@fffff\2466@\303\365(\\\217\3023@\024\256G\341z\224:@\327\243p=\nW/@)\\\217\302\365\350@@\\\217\302\365(\3344@\366(\\\217\30257@\217\302\365(\\\2178@{\024\256G\341\372(@)\\\217\302\365\3502@\270\036\205\353Q\270?@R\270\036\205\353\3218@\024\256G\341z\024@@q=\n\327\24307@\217\302\365(\\\317@@\\\217\302\365(\\@@fffff\3468@\256G\341z\024\256;@\000\000\000\000\000@=@)\\\217\302\365h>@\000\000\000\000\000\200>@=\n\327\243p=2@\\\217\302\365(\034=@\327\243p=\n\3279@\232\231\231\231\231Y6@q=\n\327\243\3609@{\024\256G\341:8@\327\243p=\n\227?@\354Q\270\036\205\3534@\n\327\243p=J:@)\\\217\302\365(1@\\\217\302\365(\334>@\303\365(\\\217\242A@\n\327\243p=\2123@\354Q\270\036\205k@@\024\256G\341z\324:@\217\302\365(\\O7@ffffff6@\303\365(\\\217B=@=\n\327\243p};@\303\365(\\\217\002<@fffff&=@\270\036\205\353Qx5@\270\036\205\353Qx9@{\024\256G\341\2727@\000\000\000\000\000\3006@\037\205\353Q\270\2363@fffff&:@R\270\036\205\353\0211@\037\205\353Q\270^;@\000\000\000\000\000\200>@\024\256G\341z\324;@q=\n\327\243\360/@fffff\3468@=\n\327\243p\3757@\366(\\\217\302\365/@\000\000\000\000\000\3006@\024\256G\341z\2247@R\270\036\205\353\321A@{\024\256G\341\2729@\024\256G\341zT2@\n\327\243p=\312@@\217\302\365(\\\3171@\000\000\000\000\000\000:@\256G\341z\024\256?@\000\000\000\000\000@3@\244p=\n\327c?@\217\302\365(\\\257@@{\024\256G\341z9@\205\353Q\270\036\0056@\256G\341z\024n5@\n\327\243p=\212/@333333,@\205\353Q\270\036E9@\303\365(\\\217\302:@R\270\036\205\353\3215@\270\036\205\353Q\2704@\303\365(\\\217\2020@\341z\024\256Ga:@\270\036\205\353Qx9@\232\231\231\231\231\3313@\366(\\\217\302u6@\\\217\302\365(\0348@\270\036\205\353Q\270=@=\n\327\243p}3@\315\314\314\314\314L0@\000\000\000\000\000\2004@\270\036\205\353Q89@\\\217\302\365(\0349@R\270\036\205\353\021<@)\\\217\302\365h2@3333332@\366(\\\217\3025:@\217\302\365(\\\3171@\244p=\n\327c:@\256G\341z\024\256<@\270\036\205\353Q8<@R\270\036\205\353\3219@\n\327\243p=\n(@\315\314\314\314\314L:@\n\327\243p=*@@\000\000\000\000\000\0007@H\341z\024\256G/@\037\205\353Q\270\336=@\n\327\243p=\n1@R\270\036\205\353\3210@3333333@\n\327\243p=\n1@\244p=\n\327c8@33333s<@\205\353Q\270\036\005=@fffff&0@\315\314\314\314\314l@@=\n\327\243p\275@@)\\\217\302\365h@@33333\2631@H\341z\024\256\007<@\256G\341z\024.5@\\\217\302\365(\\:@\244p=\n\327c5@{\024\256G\341z:@\327\243p=\n\2273@\327\243p=\n\227B@\000\000\000\000\000\2007@\024\256G\341z\3244@\354Q\270\036\205\253C@H\341z\024\256\307;@\000\000\000\000\000\0006@\341z\024\256G\001A@33333\2638@H\341z\024\256\007@@\037\205\353Q\270\036>@\\\217\302\365(\\<@\327\243p=\n\3279@\327\243p=\nW@@\315\314\314\314\314\354D@\244p=\n\327\2438@=\n\327\243p=4@\270\036\205\353Q87@\315\314\314\314\314\0149@)\\\217\302\365(=@\327\243p=\n\327/@\327\243p=\n\327;@=\n\327\243p\3758@\270\036\205\353Qx2@R\270\036\205\353\021<@\315\314\314\314\314lA@\256G\341z\024\356:@\232\231\231\231\231\031;@\270\036\205\353Qx8@\244p=\n\327\243<@\024\256G\341z\264F@\232\231\231\231\231Y0@\341z\024\256G!1@\327\243p=\n\3276@\n\327\243p=J>@\232\231\231\231\231\2317@fffff\3460@\315\314\314\314\314\3143@\217\302\365(\\O3@\217\302\365(\\O?@fffff&>@\244p=\n\327\3438@\000\000\000\000\000\340@@\244p=\n\327\343D@q=\n\327\243\260B@)\\\217\302\365(3@H\341z\024\256G>@\341z\024\256GAA@\354Q\270\036\205+:@\205\353Q\270\036ED@\217\302\365(\\oF@\315\314\314\314\314\0143@\037\205\353Q\270^4@\366(\\\217\302\365;@\327\243p=\nW:@H\341z\024\256\207>@\366(\\\217\302u=@R\270\036\205\353\321;@33333\2631@\270\036\205\353Q\230A@q=\n\327\24305@\000\000\000\000\000\000;@\366(\\\217\302u6@\327\243p=\n\2279@\327\243p=\n\0279@R\270\036\205\353\2218@R\270\036\205\353\0216@\303\365(\\\217\"B@)\\\217\302\365\2506@\244p=\n\327\243?@\205\353Q\270\036\305H@\024\256G\341z\224C@\270\036\205\353Qx?@=\n\327\243p=;@\354Q\270\036\205\253?@\024\256G\341zT=@\024\256G\341z\224G@q=\n\327\243\3606@\n\327\243p=\n>@\244p=\n\327\2437@\366(\\\217\30259@fffff\2464@\256G\341z\024.0@\256G\341z\024.<@\341z\024\256G\3414@\270\036\205\353QXA@=\n\327\243p\3752@=\n\327\243p\3752@\315\314\314\314\314L8@\232\231\231\231\231\031:@=\n\327\243p\2755@33333\363A@\303\365(\\\217B2@fffff\246<@\327\243p=\n\0279@q=\n\327\243\2603@\024\256G\341z\0247@\n\327\243p=J;@\024\256G\341z\024/@\024\256G\341zT6@\244p=\n\327#:@\341z\024\256G!6@q=\n\327\2430:@\256G\341z\024\3563@\000\000\000\000\000\3009@{\024\256G\341z1@\256G\341z\024\3560@\244p=\n\327\243-@\244p=\n\327c7@\303\365(\\\217B9@\270\036\205\353Q88@=\n\327\243p=:@R\270\036\205\353\0217@\256G\341z\024n=@\n\327\243p=\2128@\\\217\302\365(\2345@\037\205\353Q\270\236?@33333s4@R\270\036\205\353\0214@q=\n\327\243\3600@ffffff1@\315\314\314\314\314\214:@\000\000\000\000\000\3005@ffffff0@=\n\327\243p\275)@q=\n\327\243p6@\366(\\\217\302\2653@\270\036\205\353Qx0@\000\000\000\000\000\0009@ffffff7@\366(\\\217\30254@\\\217\302\365(\2344@H\341z\024\256\0077@\024\256G\341z\0245@\\\217\302\365(\334?@\341z\024\256Ga5@\232\231\231\231\231\0315@\000\000\000\000\000\0002@\000\000\000\000\000@6@\341z\024\256Ga>@\366(\\\217\30259@{\024\256G\341\3725@33333\3635@H\341z\024\256\3079@\217\302\365(\\\0176@\366(\\\217\302u<@33333\223@@)\\\217\302\365\3500@\217\302\365(\\/A@\327\243p=\n\327:@{\024\256G\341\272>@\303\365(\\\217\2025@R\270\036\205\353\0217@fffff\3463@\024\256G\341zTA@)\\\217\302\365(2@{\024\256G\341z3@\217\302\365(\\\017;@\256G\341z\024\3561@\n\327\243p=\3124@\270\036\205\353Q\2701@=\n\327\243p\2753@\354Q\270\036\205+8@\024\256G\341z\2247@\\\217\302\365(\234@@\244p=\n\327\243/@\256G\341z\024n6@\232\231\231\231\231\3318@\024\256G\341z\2249@33333\2631@\205\353Q\270\036\0059@{\024\256G\341\3724@333333=@=\n\327\243p\3759@33333s9@33333\2635@\037\205\353Q\270^:@H\341z\024\256\347@@\n\327\243p=\n8@q=\n\327\243p:@\315\314\314\314\314\3149@H\341z\024\256\007?@\366(\\\217\302u/@\327\243p=\n\3275@\354Q\270\036\205+7@\366(\\\217\30254@\244p=\n\327#3@R\270\036\205\353\3216@q=\n\327\243\320A@\244p=\n\327\2433@)\\\217\302\365h@@H\341z\024\256\2074@\024\256G\341z\3244@\366(\\\217\302\265<@\341z\024\256G!7@\037\205\353Q\270^1@\366(\\\217\302\265?@\n\327\243p=J3@\270\036\205\353Q\3703@\256G\341z\024\3562@q=\n\327\243p>@\315\314\314\314\314L/@\315\314\314\314\314\3146@)\\\217\302\365h=@=\n\327\243p\275<@\315\314\314\314\314\3149@\327\243p=\nW9@333333;@\217\302\365(\\\0175@\232\231\231\231\231Y4@=\n\327\243p}8@H\341z\024\256\307;@\244p=\n\327#4@\\\217\302\365(\2348@\205\353Q\270\036\0057@\232\231\231\231\231\3310@\024\256G\341z\2249@\024\256G\341z\2243@\303\365(\\\217\002;@)\\\217\302\365h9@\341z\024\256G\341<@)\\\217\302\365(B@q=\n\327\243p:@=\n\327\243p\375;@\315\314\314\314\314\214?@\024\256G\341ztB@\366(\\\217\3025;@=\n\327\243p=?@fffff\246;@\354Q\270\036\205\3530@\354Q\270\036\205\353<@{\024\256G\341\372:@\327\243p=\nW2@\354Q\270\036\205\2533@\000\000\000\000\000\2009@\354Q\270\036\205+7@q=\n\327\243\360<@R\270\036\205\353\2215@\205\353Q\270\036\005@@\n\327\243p=J4@\366(\\\217\302\3654@R\270\036\205\353\221;@)\\\217\302\365\3506@R\270\036\205\353\0219@\256G\341z\024\356>@\n\327\243p=\2124@\315\314\314\314\314\314>@\341z\024\256Ga8@\024\256G\341z\2245@\303\365(\\\217\002<@\217\302\365(\\O3@\037\205\353Q\270\336:@{\024\256G\341\272A@\000\000\000\000\000\2001@\217\302\365(\\O7@\205\353Q\270\036\0056@\\\217\302\365(\\>@\205\353Q\270\036EC@=\n\327\243p\2756@\244p=\n\327c<@"
      }
    }
  }
}
node {
  name: "tensors/component_30"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 449
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 449
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  input: "tensors/component_8"
  input: "tensors/component_9"
  input: "tensors/component_10"
  input: "tensors/component_11"
  input: "tensors/component_12"
  input: "tensors/component_13"
  input: "tensors/component_14"
  input: "tensors/component_15"
  input: "tensors/component_16"
  input: "tensors/component_17"
  input: "tensors/component_18"
  input: "tensors/component_19"
  input: "tensors/component_20"
  input: "tensors/component_21"
  input: "tensors/component_22"
  input: "tensors/component_23"
  input: "tensors/component_24"
  input: "tensors/component_25"
  input: "tensors/component_26"
  input: "tensors/component_27"
  input: "tensors/component_28"
  input: "tensors/component_29"
  input: "tensors/component_30"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "RepeatDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/area_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/area_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/area_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/area_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/area_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/area_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/area_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:20"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:21"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:22"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:23"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:24"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:25"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:26"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:27"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:28"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:29"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/Shape"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/area_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/area_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/area_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/compactness_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concave_points_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concavity_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/fractal_dimension_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/perimeter_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/radius_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/smoothness_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/symmetry_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_mean/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_se/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/texture_worst/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 30
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Fill"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros/shape_as_tensor"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Elu"
  op: "Elu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Elu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Fill"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros/shape_as_tensor"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Elu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Elu"
  op: "Elu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/Elu"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  op: "Fill"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros/shape_as_tensor"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Elu"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Elu"
  op: "Elu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_2/Elu"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2/activation/tag"
  input: "dnn/hiddenlayer_2/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Fill"
  input: "dnn/logits/bias/part_0/Initializer/zeros/shape_as_tensor"
  input: "dnn/logits/bias/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Elu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_3/Cast"
  input: "dnn/zero_fraction_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:30"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/gradients/Fill"
  op: "Fill"
  input: "dnn/gradients/Shape"
  input: "dnn/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/Fill"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/AddN"
  op: "AddN"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/AddN"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/AddN"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Elu"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_2/Elu_grad/EluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_2/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/Elu_grad/EluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Elu"
  input: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/Elu_grad/EluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_1/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/Elu_grad/EluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Elu"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_0/Elu_grad/EluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_0/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/Elu_grad/EluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/Elu_grad/EluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dnn/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/beta1_power/Assign"
  op: "Assign"
  input: "dnn/beta1_power"
  input: "dnn/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/beta1_power/read"
  op: "Identity"
  input: "dnn/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "dnn/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/beta2_power/Assign"
  op: "Assign"
  input: "dnn/beta2_power"
  input: "dnn/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/beta2_power/read"
  op: "Identity"
  input: "dnn/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dnn/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "dnn/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/logits/kernel/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/update_dnn/logits/bias/part_0/ApplyAdam"
  op: "ApplyAdam"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "dnn/beta1_power/read"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/learning_rate"
  input: "dnn/Adam/beta1"
  input: "dnn/Adam/beta2"
  input: "dnn/Adam/epsilon"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adam/mul"
  op: "Mul"
  input: "dnn/beta1_power/read"
  input: "dnn/Adam/beta1"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/bias/part_0/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Adam/Assign"
  op: "Assign"
  input: "dnn/beta1_power"
  input: "dnn/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/Adam/mul_1"
  op: "Mul"
  input: "dnn/beta2_power/read"
  input: "dnn/Adam/beta2"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/bias/part_0/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Adam/Assign_1"
  op: "Assign"
  input: "dnn/beta2_power"
  input: "dnn/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/Adam/update"
  op: "NoOp"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/kernel/part_0/ApplyAdam"
  input: "^dnn/Adam/update_dnn/logits/bias/part_0/ApplyAdam"
  input: "^dnn/Adam/Assign"
  input: "^dnn/Adam/Assign_1"
}
node {
  name: "dnn/Adam/value"
  op: "Const"
  input: "^dnn/Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/beta1_power/Assign"
  input: "^dnn/beta2_power/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/beta1_power"
        string_val: "dnn/beta2_power"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/logits/bias/part_0/Adam"
        string_val: "dnn/dnn/logits/bias/part_0/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/beta1_power"
        string_val: "dnn/beta2_power"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/logits/bias/part_0/Adam"
        string_val: "dnn/dnn/logits/bias/part_0/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
  input: "^init_3"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 10
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_4d5efc6cae854f5391dfee0a8b1baeff/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "dnn/beta1_power"
        string_val: "dnn/beta2_power"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam_1"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adam"
        string_val: "dnn/logits/bias/t_0/Adam_1"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adam"
        string_val: "dnn/logits/kernel/t_0/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: ""
        string_val: ""
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/beta1_power"
  input: "dnn/beta2_power"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/read"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/read"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/read"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/read"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/read"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adam/read"
  input: "dnn/dnn/logits/bias/part_0/Adam_1/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adam/read"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "dnn/beta1_power"
        string_val: "dnn/beta2_power"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam_1"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adam"
        string_val: "dnn/logits/bias/t_0/Adam_1"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adam"
        string_val: "dnn/logits/kernel/t_0/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: ""
        string_val: ""
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
